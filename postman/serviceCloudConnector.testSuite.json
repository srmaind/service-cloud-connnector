{
	"info": {
		"_postman_id": "cf744fbc-7efc-4855-af91-765905e93498",
		"name": "SCC: Test Suite",
		"description": "What is the Service Cloud Connector: Test Script Suite?\nThis collection of Postman test-scripts can be used to exercise the Service Cloud and Salesforce B2C Commerce REST endpoints to validate that each environment is configured correctly.  Requests that can be exercised include:\n\nService Cloud Requests\n\n- Retrieving an authorization token for the SCC Integration Account\n- Create a case via REST leveraging the authorization token\n- Create a customer Account via REST leveraging the authorization token\n- Create an Order via REST leveraging the authorization token\n\nExecution and Configuration Steps\nPrior to executing any of the requests documented in this suite, please:\n\n- Configure the variables at the root of this project to point to your specific environment\n- For Service Cloud, generate an authToken and seed the bearerToken in the Authorization tab\n- Remember to perform this step after every authToken has been generated\n\nOnce these customizations have been made, each Service Cloud request should execute without any issues.  \n\n\n",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Cross Cloud Use Cases",
			"item": [
				{
					"name": "Case Management",
					"item": [
						{
							"name": "Create Cases for Anonymous Customers",
							"item": [
								{
									"name": "00. Retrieve Service Cloud AuthToken",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "12f5cbc7-330d-4cb0-91aa-8b6f5044172b",
												"exec": [
													"",
													"// Clear the contents of the Service Cloud last-case processed environment variable",
													"pm.environment.unset(\"sfscLastCaseRecordId\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a5010dd8-7f42-47b3-bb6c-cac62d262b98",
												"exec": [
													"// Parse the JSON response",
													"var parsedResponse = JSON.parse(responseBody);",
													"",
													"// Check if the parsedResponse has an access-token key",
													"if (parsedResponse.hasOwnProperty('access_token')) {",
													"    ",
													"    // If an access-token exists, then set it as part of the environment",
													"    postman.setEnvironmentVariable('sfscAuthToken', parsedResponse.access_token);",
													"    ",
													"    // Write the serviceCloud Url based on the instance_url in the response",
													"    postman.setEnvironmentVariable('serviceCloudUrl', parsedResponse.instance_url);",
													"    ",
													"}",
													"",
													"// Execute a test to validate that the access-token exists",
													"pm.test(\"StatusCode is 200.\", function () {",
													"    pm.expect(responseCode.code === 200).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that we've received a response",
													"pm.test(\"Response is not empty.\", function () {",
													"    pm.expect(responseBody.length > 0).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that the response provided is JSON",
													"pm.test(\"Response is JSON.\", function () {",
													"    pm.expect(parsedResponse !== null).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that the access-token exists",
													"pm.test(\"Service Cloud AuthToken response contains an access token.\", function () {",
													"    pm.expect(parsedResponse.hasOwnProperty('access_token')).to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"description": "... represents the content-type of the request",
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{authTokenUrl}}/services/oauth2/token?grant_type=password&client_id={{sfscConsumerKey}}&client_secret={{sfscConsumerSecret}}&username={{sfscUsername}}&password={{sfscPassword}}{{sfscSecurityToken}}",
											"protocol": "https",
											"host": [
												"{{authTokenUrl}}"
											],
											"path": [
												"services",
												"oauth2",
												"token"
											],
											"query": [
												{
													"key": "grant_type",
													"value": "password",
													"description": "... represents the grant-type to be performed"
												},
												{
													"key": "client_id",
													"value": "{{sfscConsumerKey}}",
													"description": "... identifies the clientId associated to the SCC Integration User account"
												},
												{
													"key": "client_secret",
													"value": "{{sfscConsumerSecret}}",
													"description": "... identifies the clientSecret associated to the SCC Integration User account"
												},
												{
													"key": "username",
													"value": "{{sfscUsername}}",
													"description": "... identifies the username associated to the SCC Integration User account"
												},
												{
													"key": "password",
													"value": "{{sfscPassword}}{{sfscSecurityToken}}",
													"description": "... represents the password + securityToken associated to the SCC Integration User account"
												}
											]
										},
										"description": "... this request is used to confirm that a REST access token can be retrieve using the credentials and security token associated to the SCC Integration User.  This request leverages the Salesforce grant-type of \"password\".  A successful request will generate an access token of token_type \"Bearer\" that must be attached to all subsequent REST interactions (ex. creating cases, accounts, and orders).\n- For details on this request-type, please visit https://help.salesforce.com/articleView?id=remoteaccess_oauth_username_password_flow.htm&type=5.\n- Once the bearer token has been generated, please update the Authorization tab in the parent project folder to include the generated Bearer token."
									},
									"response": []
								},
								{
									"name": "01. Create 1st Anonymous Customer Service Case",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "fe9dec86-faa2-4da0-8a84-3e441742c616",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "624de6da-e323-48aa-b058-8fdb84d58b94",
												"exec": [
													"// Parse the JSON response",
													"var parsedResponse = JSON.parse(responseBody);",
													"",
													"// Execute a test to validate that the access-token exists",
													"pm.test(\"StatusCode is 200.\", function () {",
													"    pm.expect(responseCode.code === 200).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that we've received a response",
													"pm.test(\"Response is not empty.\", function () {",
													"    pm.expect(responseBody.length > 0).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that the response provided is JSON",
													"pm.test(\"Response is JSON.\", function () {",
													"    pm.expect(parsedResponse !== null).to.be.true;",
													"});",
													"",
													"pm.test(\"Service Cloud returned a valid case object response.\", function () {",
													"    pm.expect(parsedResponse.hasOwnProperty('objectType')).to.be.true;",
													"    pm.expect(parsedResponse.hasOwnProperty('recordId')).to.be.true;",
													"    pm.expect(parsedResponse.hasOwnProperty('errors')).to.be.true;",
													"});",
													"",
													"pm.test(\"The response object was of type 'Case'.\", function () {",
													"    pm.expect(parsedResponse.objectType).to.not.equal(null);    ",
													"    pm.expect(parsedResponse.objectType).to.equal('Case');",
													"});",
													"",
													"pm.test(\"The response object contains a valid recordId.\", function () {",
													"    pm.expect(parsedResponse.recordId).to.not.equal(null);",
													"});",
													"",
													"pm.test(\"The response object does not contain any errors.\", function () {",
													"    pm.expect(parsedResponse.errors).to.equal(null);",
													"});",
													"",
													"// Record the recordId for the last case that was processed",
													"if (parsedResponse.hasOwnProperty('recordId') && parsedResponse.recordId !== null) {",
													"    ",
													"    // Initialize the header object",
													"    var Header = require('postman-collection').Header;",
													"    ",
													"    // Initialize the request options",
													"    var options = { ",
													"        method: 'GET',",
													"        header: [] ",
													"    };",
													"    ",
													"    // Build out the environment url for this request",
													"    options.url = pm.environment.get('serviceCloudUrl') + '/services/apexrest/Case/' + parsedResponse.recordId;",
													"    ",
													"    // Add the headers to the request definition",
													"    options.header.push(new Header({key: 'Content-Type', value: 'application/json'}));",
													"    options.header.push({key: 'Authorization', value: 'Bearer ' + pm.environment.get('sfscAuthToken')});",
													"",
													"    // Invoke the request",
													"    pm.sendRequest(options, function (error, response) {",
													"    ",
													"        // Throw an error if one is caught",
													"        if (error) throw new Error(error);",
													"",
													"        // Convert the response to JSON",
													"        var responseJSON = response.json();",
													"        var createdCase = responseJSON[0];",
													"",
													"        pm.test(\"Verify the case is created in Service Cloud.\", function () {",
													"            pm.expect(responseJSON.length).to.equal(1);",
													"            pm.expect(createdCase['Id']).to.equal(parsedResponse.recordId);",
													"        });    ",
													"",
													"         // Capture and maintain a list of caseIds that were created",
													"        var caseIds = [];",
													"        caseIds.push(parsedResponse.recordId)",
													"        pm.environment.set('tmpCaseIds', caseIds);",
													"        ",
													"        pm.test(\"Verify there is an account associated to the case.\", function() {",
													"            pm.expect(createdCase.hasOwnProperty('AccountId')).to.be.true;",
													"            pm.expect(createdCase['AccountId'].length > 0).to.be.true;",
													"        });",
													"",
													"        // Only run this request if we found an account",
													"        if (createdCase['AccountId'].length > 0) {",
													"            ",
													"            // Initialize the header object",
													"            var Header = require('postman-collection').Header;",
													"            ",
													"            // Initialize the request options",
													"            var options = { ",
													"                method: 'GET',",
													"                header: [] ",
													"            };",
													"            ",
													"            // Build out the environment url for this request",
													"            options.url = pm.environment.get('serviceCloudUrl') + '/services/apexrest/Contact/Registration/' + createdCase['AccountId'];",
													"            ",
													"            // Add the headers to the request definition",
													"            options.header.push(new Header({key: 'Content-Type', value: 'application/json'}));",
													"            options.header.push({key: 'Authorization', value: 'Bearer ' + pm.environment.get('sfscAuthToken')});",
													"        ",
													"            // Invoke the request",
													"            pm.sendRequest(options, function (error, response) {",
													"            ",
													"                // Throw an error if one is caught",
													"                if (error) throw new Error(error);",
													"        ",
													"                // Convert the response to JSON",
													"                var responseJSON = response.json();",
													"                var createdAccount = responseJSON[0];",
													"        ",
													"                pm.test(\"Verify the account associated to this case is created in Service Cloud.\", function () {",
													"                    pm.expect(responseJSON.length).to.equal(1);",
													"                    pm.expect(createdAccount['Id']).to.equal(createdCase.AccountId);",
													"                });    ",
													"        ",
													"                pm.test(\"Verify the account associated to this case has the case's contact details.\", function () {",
													"                    pm.expect(createdAccount['FirstName']).to.equal(pm.environment.get('sfccCustomerFirstName'));",
													"                    pm.expect(createdAccount['LastName']).to.equal(pm.environment.get('sfccCustomerLastName'));",
													"                    pm.expect(createdAccount['PersonEmail']).to.equal(pm.environment.get('sfccCustomerEmail'));                    ",
													"                });  ",
													"",
													"            });            ",
													"            ",
													"            ",
													"        }",
													"",
													"    });",
													"",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{sfscAuthToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"description": "... represents the content-type of the request.",
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"first_name\":\"{{sfccCustomerFirstName}}\",\n\t\"last_name\":\"{{sfccCustomerLastName}}\",\n\t\"email\":\"{{sfccCustomerEmail}}\",\n\t\"phone\":\"555.555.1212\",\n\t\"case_type\":\"ContactUs\",\t\n\t\"case_sub_type\":\"General Information\",\n\t\"subject\":\"First test case of case creation.\",\n\t\"description\":\"Testing case creation via an anonymous customer in Salesforce B2C Commerce.  This should create the case, a new PersonAccount representing the anonymous customer, and associate the case to the newly created PersonAccount.\"\n}"
										},
										"url": {
											"raw": "{{serviceCloudUrl}}/services/apexrest/Case",
											"host": [
												"{{serviceCloudUrl}}"
											],
											"path": [
												"services",
												"apexrest",
												"Case"
											]
										},
										"description": "... this request will attempt to create a case within Service Cloud for an anonymous user (ie - a user that isn't registered in Salesforce B2C Commerce).  The request should result in:\n- the case is created in Service Cloud\n- a new PersonAccount representing the anonymous user\n- the case associated to the newly created PersonAccount"
									},
									"response": []
								},
								{
									"name": "02. Create 2nd Anonymous Customer Service Case",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "fe9dec86-faa2-4da0-8a84-3e441742c616",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "34c2ba18-27e6-4917-810c-7a28947d762c",
												"exec": [
													"// Parse the JSON response",
													"var parsedResponse = JSON.parse(responseBody);",
													"",
													"// Execute a test to validate that the access-token exists",
													"pm.test(\"StatusCode is 200.\", function () {",
													"    pm.expect(responseCode.code === 200).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that we've received a response",
													"pm.test(\"Response is not empty.\", function () {",
													"    pm.expect(responseBody.length > 0).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that the response provided is JSON",
													"pm.test(\"Response is JSON.\", function () {",
													"    pm.expect(parsedResponse !== null).to.be.true;",
													"});",
													"",
													"pm.test(\"Service Cloud returned a valid case object response.\", function () {",
													"    pm.expect(parsedResponse.hasOwnProperty('objectType')).to.be.true;",
													"    pm.expect(parsedResponse.hasOwnProperty('recordId')).to.be.true;",
													"    pm.expect(parsedResponse.hasOwnProperty('errors')).to.be.true;",
													"});",
													"",
													"pm.test(\"The response object was of type 'Case'.\", function () {",
													"    pm.expect(parsedResponse.objectType).to.not.equal(null);    ",
													"    pm.expect(parsedResponse.objectType).to.equal('Case');",
													"});",
													"",
													"pm.test(\"The response object contains a valid recordId.\", function () {",
													"    pm.expect(parsedResponse.recordId).to.not.equal(null);",
													"});",
													"",
													"pm.test(\"The response object does not contain any errors.\", function () {",
													"    pm.expect(parsedResponse.errors).to.equal(null);",
													"});",
													"",
													"// Record the recordId for the last case that was processed",
													"if (parsedResponse.hasOwnProperty('recordId') && parsedResponse.recordId !== null) {",
													"    ",
													"    // Initialize the header object",
													"    var Header = require('postman-collection').Header;",
													"    ",
													"    // Initialize the request options",
													"    var options = { ",
													"        method: 'GET',",
													"        header: [] ",
													"    };",
													"    ",
													"    // Build out the environment url for this request",
													"    options.url = pm.environment.get('serviceCloudUrl') + '/services/apexrest/Case/' + parsedResponse.recordId;",
													"    ",
													"    // Add the headers to the request definition",
													"    options.header.push(new Header({key: 'Content-Type', value: 'application/json'}));",
													"    options.header.push({key: 'Authorization', value: 'Bearer ' + pm.environment.get('sfscAuthToken')});",
													"",
													"    // Invoke the request",
													"    pm.sendRequest(options, function (error, response) {",
													"    ",
													"        // Throw an error if one is caught",
													"        if (error) throw new Error(error);",
													"",
													"        // Convert the response to JSON",
													"        responseJSON = response.json();",
													"",
													"        pm.test(\"Verify the case is created in Service Cloud.\", function () {",
													"            pm.expect(responseJSON.length).to.equal(1);",
													"            pm.expect(responseJSON[0]['Id']).to.equal(parsedResponse.recordId);",
													"        });    ",
													"",
													"        // Capture and maintain a list of caseIds that were created",
													"        var caseIds = pm.environment.get('tmpCaseIds');",
													"        caseIds.push(parsedResponse.recordId);",
													"        pm.environment.set('tmpCaseIds', caseIds);",
													"",
													"    });",
													"",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{sfscAuthToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"description": "... represents the content-type of the request.",
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"first_name\":\"{{sfccCustomerFirstName}}\",\n\t\"last_name\":\"{{sfccCustomerLastName}}\",\n\t\"email\":\"{{sfccCustomerEmail}}\",\n\t\"phone\":\"555.555.1212\",\n\t\"case_type\":\"ContactUs\",\t\n\t\"case_sub_type\":\"General Information\",\n\t\"subject\":\"Second test case of case creation.\",\n\t\"description\":\"Testing case creation via an anonymous customer in Salesforce B2C Commerce.  This should create the case and associate it to the customer's existing PersonAccount.\"\n}"
										},
										"url": {
											"raw": "{{serviceCloudUrl}}/services/apexrest/Case",
											"host": [
												"{{serviceCloudUrl}}"
											],
											"path": [
												"services",
												"apexrest",
												"Case"
											]
										},
										"description": "... this request will attempt to create a case within Service Cloud for an anonymous user (ie - a user that isn't registered in Salesforce B2C Commerce) already registered in Service Cloud with a PersonAccount.  The request should result in:\n- the case is created in Service Cloud\n- the case is associated to the existing Service Cloud PersonAccount for this customer."
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Create Cases for Registered Customers",
							"item": [
								{
									"name": "00. Retrieve Service Cloud AuthToken",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "12f5cbc7-330d-4cb0-91aa-8b6f5044172b",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a5010dd8-7f42-47b3-bb6c-cac62d262b98",
												"exec": [
													"// Parse the JSON response",
													"var parsedResponse = JSON.parse(responseBody);",
													"",
													"// Execute a test to validate that the access-token exists",
													"pm.test(\"StatusCode is 200.\", function () {",
													"    pm.expect(responseCode.code === 200).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that we've received a response",
													"pm.test(\"Response is not empty.\", function () {",
													"    pm.expect(responseBody.length > 0).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that the response provided is JSON",
													"pm.test(\"Response is JSON.\", function () {",
													"    pm.expect(parsedResponse !== null).to.be.true;",
													"});",
													"",
													"// Check if the parsedResponse has an access-token key",
													"if (parsedResponse.hasOwnProperty('access_token')) {",
													"    ",
													"    // If an access-token exists, then set it as part of the environment",
													"    postman.setEnvironmentVariable('sfscAuthToken', parsedResponse.access_token);",
													"    ",
													"    // Write the serviceCloud Url based on the instance_url in the response",
													"    postman.setEnvironmentVariable('serviceCloudUrl', parsedResponse.instance_url);",
													"    ",
													"}",
													"",
													"// Execute a test to validate that the access-token exists",
													"pm.test(\"Service Cloud AuthToken response contains an access token.\", function () {",
													"    pm.expect(parsedResponse.hasOwnProperty('access_token')).to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"description": "... represents the content-type of the request",
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{authTokenUrl}}/services/oauth2/token?grant_type=password&client_id={{sfscConsumerKey}}&client_secret={{sfscConsumerSecret}}&username={{sfscUsername}}&password={{sfscPassword}}{{sfscSecurityToken}}",
											"protocol": "https",
											"host": [
												"{{authTokenUrl}}"
											],
											"path": [
												"services",
												"oauth2",
												"token"
											],
											"query": [
												{
													"key": "grant_type",
													"value": "password",
													"description": "... represents the grant-type to be performed"
												},
												{
													"key": "client_id",
													"value": "{{sfscConsumerKey}}",
													"description": "... identifies the clientId associated to the SCC Integration User account"
												},
												{
													"key": "client_secret",
													"value": "{{sfscConsumerSecret}}",
													"description": "... identifies the clientSecret associated to the SCC Integration User account"
												},
												{
													"key": "username",
													"value": "{{sfscUsername}}",
													"description": "... identifies the username associated to the SCC Integration User account"
												},
												{
													"key": "password",
													"value": "{{sfscPassword}}{{sfscSecurityToken}}",
													"description": "... represents the password + securityToken associated to the SCC Integration User account"
												}
											]
										},
										"description": "... this request is used to confirm that a REST access token can be retrieve using the credentials and security token associated to the SCC Integration User.  This request leverages the Salesforce grant-type of \"password\".  A successful request will generate an access token of token_type \"Bearer\" that must be attached to all subsequent REST interactions (ex. creating cases, accounts, and orders).\n- For details on this request-type, please visit https://help.salesforce.com/articleView?id=remoteaccess_oauth_username_password_flow.htm&type=5.\n- Once the bearer token has been generated, please update the Authorization tab in the parent project folder to include the generated Bearer token."
									},
									"response": []
								},
								{
									"name": "01. Retrieve Commerce Cloud AuthToken",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "86c21dc4-46c9-4da9-8a77-bb21288a428e",
												"exec": [
													"// Audit the pre-execution test script",
													"console.log(' ----------------------------------------------------------');",
													"console.log(' - START: Executing SFCC RetrieveAuthToken Pre-Execution Script')",
													"console.log(' ----------------------------------------------------------');",
													"",
													"// Build the credential string by concatenating the username, password, and clientSecret",
													"credentialString = pm.environment.get(\"sfccUsername\") + ':' + pm.environment.get(\"sfccPassword\") + ':' + pm.environment.get(\"sfccClientSecret\");",
													"",
													"// Encrypt the credential string to base64",
													"rawCredential = CryptoJS.enc.Utf8.parse(credentialString);",
													"encodedCredential = CryptoJS.enc.Base64.stringify(rawCredential);",
													"",
													"// Set the environment variable representing the credential",
													"pm.environment.set(\"sfccUserCredential\", encodedCredential);",
													"",
													"console.log(' ----------------------------------------------------------');",
													"console.log(' -   END: Executing SFCC RetrieveAuthToken Pre-Execution Script')",
													"console.log(' ----------------------------------------------------------');",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "0dc132c9-2c32-41b5-b224-9fb1f872cdc3",
												"exec": [
													"",
													"// Parse the response data",
													"var parsedResponse = JSON.parse(responseBody);",
													"",
													"// Execute a test to validate that the access-token exists",
													"pm.test(\"StatusCode is 200.\", function () {",
													"    pm.expect(responseCode.code === 200).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that we've received a response",
													"pm.test(\"Response is not empty.\", function () {",
													"    pm.expect(responseBody.length > 0).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that the response provided is JSON",
													"pm.test(\"Response is JSON.\", function () {",
													"    pm.expect(parsedResponse !== null).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that the response contains the properties expected.",
													"pm.test(\"Response is well-formed and contains the access_token property.\", function () {",
													"    pm.expect(parsedResponse.hasOwnProperty('access_token')).to.be.true;",
													"    pm.expect(parsedResponse.hasOwnProperty('expires_in')).to.be.true;",
													"    pm.expect(parsedResponse.hasOwnProperty('token_type')).to.be.true;",
													"});",
													"",
													"// Check if the parsedResponse has an access-token key",
													"if (parsedResponse.hasOwnProperty('access_token')) {",
													"    ",
													"    // If an access-token exists, then set it as part of the environment",
													"    postman.setEnvironmentVariable('sfccAuthToken', parsedResponse.access_token);",
													"",
													"} "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Basic {{sfccUserCredential}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "grant_type=urn:demandware:params:oauth:grant-type:client-id:dwsid:dwsecuretoken"
										},
										"url": {
											"raw": "{{sfccOAuth2Url}}?client_id={{sfccClientId}}",
											"host": [
												"{{sfccOAuth2Url}}"
											],
											"query": [
												{
													"key": "client_id",
													"value": "{{sfccClientId}}"
												}
											]
										},
										"description": "... retrieves an authToken for a Salesforce B2C Commerce Business Manager user.  The request will encode the username:password:clientSecret via Base64 and seed the encoded string via the sfccUserCredential environment property.  This encoded string is then used to request the authToken."
									},
									"response": []
								},
								{
									"name": "02. Verify Customer Account Exists in B2C Commerce",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6509dc87-d8cb-4c46-8bfa-b053da2d1364",
												"exec": [
													"// Parse the JSON response",
													"var parsedResponse = JSON.parse(responseBody);",
													"",
													"// Execute a test to validate that the access-token exists",
													"pm.test(\"StatusCode is 200.\", function () {",
													"    pm.expect(responseCode.code === 200).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that we've received a response",
													"pm.test(\"Response is not empty.\", function () {",
													"    pm.expect(responseBody.length > 0).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that the response provided is JSON",
													"pm.test(\"Response is JSON.\", function () {",
													"    pm.expect(parsedResponse !== null).to.be.true;",
													"});",
													"",
													"pm.test(\"Response is of type 'customer_search_result'.\", function() {",
													"    pm.expect(parsedResponse._type).to.be.equal('customer_search_result');    ",
													"});",
													"",
													"pm.test(\"Response returned at least one search result.\", function() {",
													"    pm.expect(parsedResponse.hits.length).to.be.at.least(1);    ",
													"});",
													"",
													"// Only evaluate the search hits if we have at least one (1) result",
													"if (parsedResponse.hits.length > 0) {",
													"    ",
													"    // Default the customer-found flag",
													"    var customerFound = false;",
													"    ",
													"    // Loop over the collection fo search hits returned by the response",
													"    for (var hitIndex = 0; hitIndex < parsedResponse.hits.length; hitIndex++) {",
													"        ",
													"        // Create a reference to the current search hit",
													"        var thisSearchHit = parsedResponse.hits[hitIndex];",
													"        ",
													"        // Check if we've found the customer number in the search results",
													"        if (thisSearchHit.data.customer_no === pm.environment.get('sfccCustomerNo')) {",
													"            customerFound = true;",
													"        }",
													"",
													"    }",
													"    ",
													"    pm.test(\"Verified that the customer number was found in the Salesforce B2C Commerce environment.\", function() {",
													"        pm.expect(customerFound).to.be.at.true;    ",
													"    });",
													"    ",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{sfccAuthToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n     \"query\" : \n     {\n        \"text_query\": { \"fields\": [\"credentials.login\"], \"search_phrase\":\"{{sfccCustomerEmail}}\" }\n     }\n}"
										},
										"url": {
											"raw": "{{sfccDataUrl}}/customer_lists/{{sfccCustomerListId}}/customer_search",
											"host": [
												"{{sfccDataUrl}}"
											],
											"path": [
												"customer_lists",
												"{{sfccCustomerListId}}",
												"customer_search"
											]
										},
										"description": "... this request attempts to verify that the test-customer exists in Salesforce B2C Commerce prior to working with that customer."
									},
									"response": []
								},
								{
									"name": "03. Register Customer Account",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d7b57436-f759-4ff5-9518-6cb1be861b46",
												"exec": [
													"// Parse the JSON response",
													"var parsedResponse = JSON.parse(responseBody);",
													"",
													"// Execute a test to validate that the access-token exists",
													"pm.test(\"StatusCode is 200.\", function () {",
													"    pm.expect(responseCode.code === 200).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that we've received a response",
													"pm.test(\"Response is not empty.\", function () {",
													"    pm.expect(responseBody.length > 0).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that the response provided is JSON",
													"pm.test(\"Response is JSON.\", function () {",
													"    pm.expect(parsedResponse !== null).to.be.true;",
													"});",
													"",
													"pm.test(\"Service Cloud returned a valid account object response.\", function () {",
													"    pm.expect(parsedResponse.hasOwnProperty('objectType')).to.be.true;",
													"    pm.expect(parsedResponse.hasOwnProperty('recordId')).to.be.true;",
													"    pm.expect(parsedResponse.hasOwnProperty('errors')).to.be.true;",
													"});",
													"",
													"pm.test(\"The response object was of type 'Account'.\", function () {",
													"    pm.expect(parsedResponse.objectType).to.not.equal(null);    ",
													"    pm.expect(parsedResponse.objectType).to.equal('Account');",
													"});",
													"",
													"pm.test(\"The response object contains a valid recordId.\", function () {",
													"    pm.expect(parsedResponse.recordId).to.not.equal(null);",
													"});",
													"",
													"pm.test(\"The response object does not contain any errors.\", function () {",
													"    pm.expect(parsedResponse.errors).to.equal(null);",
													"});",
													"",
													"// Validate that the Account was successfully created",
													"if (parsedResponse.hasOwnProperty('recordId') && parsedResponse.recordId !== null) {",
													"    ",
													"    // Initialize the header object",
													"    var Header = require('postman-collection').Header;",
													"    ",
													"    // Initialize the request options",
													"    var options = { ",
													"        method: 'GET',",
													"        header: [] ",
													"    };",
													"    ",
													"    // Build out the environment url for this request",
													"    options.url = pm.environment.get('serviceCloudUrl') + '/services/apexrest/Contact/Registration/' + parsedResponse.recordId;",
													"    ",
													"    // Add the headers to the request definition",
													"    options.header.push(new Header({key: 'Content-Type', value: 'application/json'}));",
													"    options.header.push({key: 'Authorization', value: 'Bearer ' + pm.environment.get('sfscAuthToken')});",
													"",
													"    // Invoke the request",
													"    pm.sendRequest(options, function (error, response) {",
													"    ",
													"        // Throw an error if one is caught",
													"        if (error) throw new Error(error);",
													"",
													"        // Convert the response to JSON",
													"        responseJSON = response.json();",
													"",
													"        pm.test(\"Verify the customer is created in Service Cloud.\", function () {",
													"            pm.expect(responseJSON.length).to.equal(1);",
													"            pm.expect(responseJSON[0]['Id']).to.equal(parsedResponse.recordId);",
													"        });    ",
													"",
													"        // Record the AccountId for the registered user",
													"        pm.environment.set('tmpAccountId', parsedResponse.recordId);",
													"",
													"    });",
													"",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{sfscAuthToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"description": "... represents the content-type of the request.",
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"first_name\":\"{{sfccCustomerFirstName}}\",\n\t\"last_name\":\"{{sfccCustomerLastName}}\",\n\t\"email\":\"{{sfccCustomerEmail}}\",\n\t\"customer_id\":\"{{sfccCustomerId}}\",\n\t\"customer_no\":\"{{sfccCustomerNo}}\"\n}"
										},
										"url": {
											"raw": "{{serviceCloudUrl}}/services/apexrest/Contact/Registration",
											"host": [
												"{{serviceCloudUrl}}"
											],
											"path": [
												"services",
												"apexrest",
												"Contact",
												"Registration"
											]
										},
										"description": "... this request will create a customer as a Person Account in the specified Service Cloud Instance.  As a pre-requisite, please ensure that this user has been created and exists in your Salesforce B2C Commerce instance prior to attempting to create the account record in Service Cloud."
									},
									"response": []
								},
								{
									"name": "04. Create 1st Registered Customer Service Case",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "fe9dec86-faa2-4da0-8a84-3e441742c616",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "fbe76d9f-a2da-44a8-8584-b6d68e9cb6d1",
												"exec": [
													"// Parse the JSON response",
													"var parsedResponse = JSON.parse(responseBody);",
													"",
													"// Execute a test to validate that the access-token exists",
													"pm.test(\"StatusCode is 200.\", function () {",
													"    pm.expect(responseCode.code === 200).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that we've received a response",
													"pm.test(\"Response is not empty.\", function () {",
													"    pm.expect(responseBody.length > 0).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that the response provided is JSON",
													"pm.test(\"Response is JSON.\", function () {",
													"    pm.expect(parsedResponse !== null).to.be.true;",
													"});",
													"",
													"pm.test(\"Service Cloud returned a valid case object response.\", function () {",
													"    pm.expect(parsedResponse.hasOwnProperty('objectType')).to.be.true;",
													"    pm.expect(parsedResponse.hasOwnProperty('recordId')).to.be.true;",
													"    pm.expect(parsedResponse.hasOwnProperty('errors')).to.be.true;",
													"});",
													"",
													"pm.test(\"The response object was of type 'Case'.\", function () {",
													"    pm.expect(parsedResponse.objectType).to.not.equal(null);    ",
													"    pm.expect(parsedResponse.objectType).to.equal('Case');",
													"});",
													"",
													"pm.test(\"The response object contains a valid recordId.\", function () {",
													"    pm.expect(parsedResponse.recordId).to.not.equal(null);",
													"});",
													"",
													"pm.test(\"The response object does not contain any errors.\", function () {",
													"    pm.expect(parsedResponse.errors).to.equal(null);",
													"});",
													"",
													"// Record the recordId for the last case that was processed",
													"if (parsedResponse.hasOwnProperty('recordId') && parsedResponse.recordId !== null) {",
													"    ",
													"    // Initialize the header object",
													"    var Header = require('postman-collection').Header;",
													"    ",
													"    // Initialize the request options",
													"    var options = { ",
													"        method: 'GET',",
													"        header: [] ",
													"    };",
													"    ",
													"    // Build out the environment url for this request",
													"    options.url = pm.environment.get('serviceCloudUrl') + '/services/apexrest/Case/' + parsedResponse.recordId;",
													"    ",
													"    // Add the headers to the request definition",
													"    options.header.push(new Header({key: 'Content-Type', value: 'application/json'}));",
													"    options.header.push({key: 'Authorization', value: 'Bearer ' + pm.environment.get('sfscAuthToken')});",
													"",
													"    // Invoke the request",
													"    pm.sendRequest(options, function (error, response) {",
													"    ",
													"        // Throw an error if one is caught",
													"        if (error) throw new Error(error);",
													"",
													"        // Convert the response to JSON",
													"        responseJSON = response.json();",
													"",
													"        pm.test(\"Verify the case is created in Service Cloud.\", function () {",
													"            pm.expect(responseJSON.length).to.equal(1);",
													"            pm.expect(responseJSON[0]['Id']).to.equal(parsedResponse.recordId);",
													"        });    ",
													"",
													"        // Capture and maintain a list of caseIds that were created",
													"        var caseIds = [];",
													"        caseIds.push(parsedResponse.recordId)",
													"        pm.environment.set('tmpCaseIds', caseIds);",
													"",
													"    });",
													"",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{sfscAuthToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"description": "... represents the content-type of the request.",
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"first_name\":\"{{sfccCustomerFirstName}}\",\n\t\"last_name\":\"{{sfccCustomerLastName}}\",\n\t\"email\":\"{{sfccCustomerEmail}}\",\n\t\"phone\":\"555-555-1212\",\n\t\"case_type\":\"ContactUs\",\n\t\"order_no\": \"00000100\",\n\t\"case_sub_type\":\"General Information\",\n\t\"subject\":\"General Information\",\n\t\"description\":\"Testing case creation via the storefront for a registered customer.  This should result in a PersonAccount being created, a case being created, and the case being mapped to the newly created PersonAccount.\",\n\t\"customer_id\":\"{{sfccCustomerId}}\"\n}"
										},
										"url": {
											"raw": "{{serviceCloudUrl}}/services/apexrest/Case",
											"host": [
												"{{serviceCloudUrl}}"
											],
											"path": [
												"services",
												"apexrest",
												"Case"
											]
										},
										"description": "... this request will attempt to create a case within Service Cloud for a registered user (ie - a user that is registered in Salesforce B2C Commerce) that does not have a corresponding Service Cloud PersonAccount.  The request should result in:\n- the case is created in Service Cloud\n- a PersonAccount is created for the registered Salesforce B2C Commerce user\n- the case is associated to the PersonAccount"
									},
									"response": []
								},
								{
									"name": "05. Create 2nd Registered Customer Service Case",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "fe9dec86-faa2-4da0-8a84-3e441742c616",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "bcbbec7b-ca93-4841-a0f4-938158798d54",
												"exec": [
													"// Parse the JSON response",
													"var parsedResponse = JSON.parse(responseBody);",
													"",
													"// Execute a test to validate that the access-token exists",
													"pm.test(\"StatusCode is 200.\", function () {",
													"    pm.expect(responseCode.code === 200).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that we've received a response",
													"pm.test(\"Response is not empty.\", function () {",
													"    pm.expect(responseBody.length > 0).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that the response provided is JSON",
													"pm.test(\"Response is JSON.\", function () {",
													"    pm.expect(parsedResponse !== null).to.be.true;",
													"});",
													"",
													"pm.test(\"Service Cloud returned a valid case object response.\", function () {",
													"    pm.expect(parsedResponse.hasOwnProperty('objectType')).to.be.true;",
													"    pm.expect(parsedResponse.hasOwnProperty('recordId')).to.be.true;",
													"    pm.expect(parsedResponse.hasOwnProperty('errors')).to.be.true;",
													"});",
													"",
													"pm.test(\"The response object was of type 'Case'.\", function () {",
													"    pm.expect(parsedResponse.objectType).to.not.equal(null);    ",
													"    pm.expect(parsedResponse.objectType).to.equal('Case');",
													"});",
													"",
													"pm.test(\"The response object contains a valid recordId.\", function () {",
													"    pm.expect(parsedResponse.recordId).to.not.equal(null);",
													"});",
													"",
													"pm.test(\"The response object does not contain any errors.\", function () {",
													"    pm.expect(parsedResponse.errors).to.equal(null);",
													"});",
													"",
													"// Record the recordId for the last case that was processed",
													"if (parsedResponse.hasOwnProperty('recordId') && parsedResponse.recordId !== null) {",
													"    ",
													"    // Initialize the header object",
													"    var Header = require('postman-collection').Header;",
													"    ",
													"    // Initialize the request options",
													"    var options = { ",
													"        method: 'GET',",
													"        header: [] ",
													"    };",
													"    ",
													"    // Build out the environment url for this request",
													"    options.url = pm.environment.get('serviceCloudUrl') + '/services/apexrest/Case/' + parsedResponse.recordId;",
													"    ",
													"    // Add the headers to the request definition",
													"    options.header.push(new Header({key: 'Content-Type', value: 'application/json'}));",
													"    options.header.push({key: 'Authorization', value: 'Bearer ' + pm.environment.get('sfscAuthToken')});",
													"",
													"    // Invoke the request",
													"    pm.sendRequest(options, function (error, response) {",
													"    ",
													"        // Throw an error if one is caught",
													"        if (error) throw new Error(error);",
													"",
													"        // Convert the response to JSON",
													"        responseJSON = response.json();",
													"",
													"        pm.test(\"Verify the case is created in Service Cloud.\", function () {",
													"            pm.expect(responseJSON.length).to.equal(1);",
													"            pm.expect(responseJSON[0]['Id']).to.equal(parsedResponse.recordId);",
													"        });    ",
													"        ",
													"        // Capture and maintain a list of caseIds that were created",
													"        var caseIds = pm.environment.get('tmpCaseIds');",
													"        caseIds.push(parsedResponse.recordId);",
													"        pm.environment.set('tmpCaseIds', caseIds);",
													"",
													"    });",
													"",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{sfscAuthToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"description": "... represents the content-type of the request.",
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"first_name\":\"{{sfccCustomerFirstName}}\",\n\t\"last_name\":\"{{sfccCustomerLastName}}\",\n\t\"email\":\"{{sfccCustomerEmail}}\",\n\t\"phone\":\"555-555-1212\",\n\t\"case_type\":\"ContactUs\",\n\t\"order_no\":\"0000101\",\n\t\"case_sub_type\":\"General Information\",\n\t\"subject\":\"General Information\",\n\t\"description\":\"Testing case creation via the storefront for a registered customer.  This should result in a PersonAccount being created, a case being created, and the case being mapped to the newly created PersonAccount.\",\n\t\"customer_id\":\"{{sfccCustomerId}}\"\n}"
										},
										"url": {
											"raw": "{{serviceCloudUrl}}/services/apexrest/Case",
											"host": [
												"{{serviceCloudUrl}}"
											],
											"path": [
												"services",
												"apexrest",
												"Case"
											]
										},
										"description": "... this request will attempt to create a case within Service Cloud for a registered user (ie - a user that is registered in Salesforce B2C Commerce) that already has a corresponding Service Cloud PersonAccount.  The request should result in:\n- the case is created in Service Cloud\n- the case is associated to the existing PersonAccount"
									},
									"response": []
								},
								{
									"name": "06. Verify Account Cases",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "fe9dec86-faa2-4da0-8a84-3e441742c616",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "fbe76d9f-a2da-44a8-8584-b6d68e9cb6d1",
												"exec": [
													"// Parse the JSON response",
													"var parsedResponse = JSON.parse(responseBody);",
													"",
													"// Retrieve the collection of recorded caseIds",
													"var caseIds = pm.environment.get('tmpCaseIds');",
													"var caseObjects = {};",
													"",
													"// Execute a test to validate that the access-token exists",
													"pm.test(\"StatusCode is 200.\", function () {",
													"    pm.expect(responseCode.code === 200).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that we've received a response",
													"pm.test(\"Response is not empty.\", function () {",
													"    pm.expect(responseBody.length > 0).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that the response provided is JSON",
													"pm.test(\"Response is JSON.\", function () {",
													"    pm.expect(parsedResponse !== null).to.be.true;",
													"});",
													"",
													"pm.test(\"Service Cloud returned at least two cases.\", function () {",
													"    pm.expect(parsedResponse.length).of.at.least(2);",
													"});",
													"",
													"// Convert the collection of cases into an object",
													"if (parsedResponse.length > 0) {",
													"    ",
													"    // Loop over the collection of cases and capture the ID for each",
													"    for (var caseIndex = 0; caseIndex < parsedResponse.length; caseIndex++) {",
													"        ",
													"        // Create a reference to the current case",
													"        var thisCase = parsedResponse[caseIndex];",
													"        ",
													"        // Capy the case to the objects collection",
													"        caseObjects[thisCase.Id] = thisCase;",
													"        ",
													"    }",
													"    ",
													"    // Check if we've found the cases that were created",
													"    for (var caseIndex = 0; caseIndex < caseIds.length; caseIndex++) {",
													"        ",
													"        // Create a reference to the current caseId",
													"        var thisCase = caseIds[caseIndex];",
													"        ",
													"        // Verity that the case(s) we're tracking were created in Service Cloud",
													"        pm.test(\"Verify that case [\" + thisCase + \"] is created in Service Cloud.\", function () {",
													"            pm.expect(caseObjects.hasOwnProperty(thisCase)).to.be.true;",
													"        }); ",
													"        ",
													"    }",
													"    ",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{sfscAuthToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"description": "... represents the content-type of the request.",
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"first_name\":\"{{sfccCustomerFirstName}}\",\n\t\"last_name\":\"{{sfccCustomerLastName}}\",\n\t\"email\":\"{{sfccCustomerEmail}}\",\n\t\"phone\":\"555-555-1212\",\n\t\"case_type\":\"ContactUs\",\n\t\"order_no\": \"00000100\",\n\t\"case_sub_type\":\"General Information\",\n\t\"subject\":\"General Information\",\n\t\"description\":\"Testing case creation via the storefront for a registered customer.  This should result in a PersonAccount being created, a case being created, and the case being mapped to the newly created PersonAccount.\",\n\t\"customer_id\":\"{{sfccCustomerId}}\"\n}"
										},
										"url": {
											"raw": "{{serviceCloudUrl}}/services/apexrest/Case/{{tmpAccountId}}",
											"host": [
												"{{serviceCloudUrl}}"
											],
											"path": [
												"services",
												"apexrest",
												"Case",
												"{{tmpAccountId}}"
											]
										},
										"description": "... this request will attempt to validate the total number of cases created for a given Service Cloud Person Account."
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Create Cases for Anonymous & Registered Customer",
							"item": [
								{
									"name": "00. Retrieve Service Cloud AuthToken",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "12f5cbc7-330d-4cb0-91aa-8b6f5044172b",
												"exec": [
													"",
													"// Clear the contents of the Service Cloud last-case processed environment variable",
													"pm.environment.unset(\"sfscLastCaseRecordId\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a5010dd8-7f42-47b3-bb6c-cac62d262b98",
												"exec": [
													"// Parse the JSON response",
													"var parsedResponse = JSON.parse(responseBody);",
													"",
													"// Execute a test to validate that the access-token exists",
													"pm.test(\"StatusCode is 200.\", function () {",
													"    pm.expect(responseCode.code === 200).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that we've received a response",
													"pm.test(\"Response is not empty.\", function () {",
													"    pm.expect(responseBody.length > 0).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that the response provided is JSON",
													"pm.test(\"Response is JSON.\", function () {",
													"    pm.expect(parsedResponse !== null).to.be.true;",
													"});",
													"",
													"// Check if the parsedResponse has an access-token key",
													"if (parsedResponse.hasOwnProperty('access_token')) {",
													"    ",
													"    // If an access-token exists, then set it as part of the environment",
													"    postman.setEnvironmentVariable('sfscAuthToken', parsedResponse.access_token);",
													"    ",
													"    // Write the serviceCloud Url based on the instance_url in the response",
													"    postman.setEnvironmentVariable('serviceCloudUrl', parsedResponse.instance_url);",
													"    ",
													"}",
													"",
													"// Execute a test to validate that the access-token exists",
													"pm.test(\"Service Cloud AuthToken response contains an access token.\", function () {",
													"    pm.expect(parsedResponse.hasOwnProperty('access_token')).to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"description": "... represents the content-type of the request",
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{authTokenUrl}}/services/oauth2/token?grant_type=password&client_id={{sfscConsumerKey}}&client_secret={{sfscConsumerSecret}}&username={{sfscUsername}}&password={{sfscPassword}}{{sfscSecurityToken}}",
											"protocol": "https",
											"host": [
												"{{authTokenUrl}}"
											],
											"path": [
												"services",
												"oauth2",
												"token"
											],
											"query": [
												{
													"key": "grant_type",
													"value": "password",
													"description": "... represents the grant-type to be performed"
												},
												{
													"key": "client_id",
													"value": "{{sfscConsumerKey}}",
													"description": "... identifies the clientId associated to the SCC Integration User account"
												},
												{
													"key": "client_secret",
													"value": "{{sfscConsumerSecret}}",
													"description": "... identifies the clientSecret associated to the SCC Integration User account"
												},
												{
													"key": "username",
													"value": "{{sfscUsername}}",
													"description": "... identifies the username associated to the SCC Integration User account"
												},
												{
													"key": "password",
													"value": "{{sfscPassword}}{{sfscSecurityToken}}",
													"description": "... represents the password + securityToken associated to the SCC Integration User account"
												}
											]
										},
										"description": "... this request is used to confirm that a REST access token can be retrieve using the credentials and security token associated to the SCC Integration User.  This request leverages the Salesforce grant-type of \"password\".  A successful request will generate an access token of token_type \"Bearer\" that must be attached to all subsequent REST interactions (ex. creating cases, accounts, and orders).\n- For details on this request-type, please visit https://help.salesforce.com/articleView?id=remoteaccess_oauth_username_password_flow.htm&type=5.\n- Once the bearer token has been generated, please update the Authorization tab in the parent project folder to include the generated Bearer token."
									},
									"response": []
								},
								{
									"name": "01. Retrieve Commerce Cloud AuthToken",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "86c21dc4-46c9-4da9-8a77-bb21288a428e",
												"exec": [
													"// Audit the pre-execution test script",
													"console.log(' ----------------------------------------------------------');",
													"console.log(' - START: Executing SFCC RetrieveAuthToken Pre-Execution Script')",
													"console.log(' ----------------------------------------------------------');",
													"",
													"// Build the credential string by concatenating the username, password, and clientSecret",
													"credentialString = pm.environment.get(\"sfccUsername\") + ':' + pm.environment.get(\"sfccPassword\") + ':' + pm.environment.get(\"sfccClientSecret\");",
													"",
													"// Encrypt the credential string to base64",
													"rawCredential = CryptoJS.enc.Utf8.parse(credentialString);",
													"encodedCredential = CryptoJS.enc.Base64.stringify(rawCredential);",
													"",
													"// Set the environment variable representing the credential",
													"pm.environment.set(\"sfccUserCredential\", encodedCredential);",
													"",
													"console.log(' ----------------------------------------------------------');",
													"console.log(' -   END: Executing SFCC RetrieveAuthToken Pre-Execution Script')",
													"console.log(' ----------------------------------------------------------');",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "0dc132c9-2c32-41b5-b224-9fb1f872cdc3",
												"exec": [
													"",
													"// Parse the response data",
													"var parsedResponse = JSON.parse(responseBody);",
													"",
													"// Execute a test to validate that the access-token exists",
													"pm.test(\"StatusCode is 200.\", function () {",
													"    pm.expect(responseCode.code === 200).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that we've received a response",
													"pm.test(\"Response is not empty.\", function () {",
													"    pm.expect(responseBody.length > 0).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that the response provided is JSON",
													"pm.test(\"Response is JSON.\", function () {",
													"    pm.expect(parsedResponse !== null).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that the response contains the properties expected.",
													"pm.test(\"Response is well-formed and contains the access_token property.\", function () {",
													"    pm.expect(parsedResponse.hasOwnProperty('access_token')).to.be.true;",
													"    pm.expect(parsedResponse.hasOwnProperty('expires_in')).to.be.true;",
													"    pm.expect(parsedResponse.hasOwnProperty('token_type')).to.be.true;",
													"});",
													"",
													"// Check if the parsedResponse has an access-token key",
													"if (parsedResponse.hasOwnProperty('access_token')) {",
													"    ",
													"    // If an access-token exists, then set it as part of the environment",
													"    postman.setEnvironmentVariable('sfccAuthToken', parsedResponse.access_token);",
													"",
													"} "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Basic {{sfccUserCredential}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "grant_type=urn:demandware:params:oauth:grant-type:client-id:dwsid:dwsecuretoken"
										},
										"url": {
											"raw": "{{sfccOAuth2Url}}?client_id={{sfccClientId}}",
											"host": [
												"{{sfccOAuth2Url}}"
											],
											"query": [
												{
													"key": "client_id",
													"value": "{{sfccClientId}}"
												}
											]
										},
										"description": "... retrieves an authToken for a Salesforce B2C Commerce Business Manager user.  The request will encode the username:password:clientSecret via Base64 and seed the encoded string via the sfccUserCredential environment property.  This encoded string is then used to request the authToken."
									},
									"response": []
								},
								{
									"name": "02. Verify Customer Account Exists in B2C Commerce",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6509dc87-d8cb-4c46-8bfa-b053da2d1364",
												"exec": [
													"// Parse the JSON response",
													"var parsedResponse = JSON.parse(responseBody);",
													"",
													"// Execute a test to validate that the access-token exists",
													"pm.test(\"StatusCode is 200.\", function () {",
													"    pm.expect(responseCode.code === 200).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that we've received a response",
													"pm.test(\"Response is not empty.\", function () {",
													"    pm.expect(responseBody.length > 0).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that the response provided is JSON",
													"pm.test(\"Response is JSON.\", function () {",
													"    pm.expect(parsedResponse !== null).to.be.true;",
													"});",
													"",
													"pm.test(\"Response is of type 'customer_search_result'.\", function() {",
													"    pm.expect(parsedResponse._type).to.be.equal('customer_search_result');    ",
													"});",
													"",
													"pm.test(\"Response returned at least one search result.\", function() {",
													"    pm.expect(parsedResponse.hits.length).to.be.at.least(1);    ",
													"});",
													"",
													"// Only evaluate the search hits if we have at least one (1) result",
													"if (parsedResponse.hits.length > 0) {",
													"    ",
													"    // Default the customer-found flag",
													"    var customerFound = false;",
													"    ",
													"    // Loop over the collection fo search hits returned by the response",
													"    for (var hitIndex = 0; hitIndex < parsedResponse.hits.length; hitIndex++) {",
													"        ",
													"        // Create a reference to the current search hit",
													"        var thisSearchHit = parsedResponse.hits[hitIndex];",
													"        ",
													"        // Check if we've found the customer number in the search results",
													"        if (thisSearchHit.data.customer_no === pm.environment.get('sfccCustomerNo')) {",
													"            customerFound = true;",
													"        }",
													"",
													"    }",
													"    ",
													"    pm.test(\"Verified that the customer number was found in the Salesforce B2C Commerce environment.\", function() {",
													"        pm.expect(customerFound).to.be.at.true;    ",
													"    });",
													"    ",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{sfccAuthToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n     \"query\" : \n     {\n        \"text_query\": { \"fields\": [\"credentials.login\"], \"search_phrase\":\"{{sfccCustomerEmail}}\" }\n     }\n}"
										},
										"url": {
											"raw": "{{sfccDataUrl}}/customer_lists/{{sfccCustomerListId}}/customer_search",
											"host": [
												"{{sfccDataUrl}}"
											],
											"path": [
												"customer_lists",
												"{{sfccCustomerListId}}",
												"customer_search"
											]
										},
										"description": "... this request attempts to verify that the test-customer exists in Salesforce B2C Commerce prior to working with that customer."
									},
									"response": []
								},
								{
									"name": "03. Create 1st Anonymous Customer Service Case",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "fe9dec86-faa2-4da0-8a84-3e441742c616",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "4f7c33dc-bcdd-4084-8720-bd6f497f523d",
												"exec": [
													"// Parse the JSON response",
													"var parsedResponse = JSON.parse(responseBody);",
													"",
													"// Execute a test to validate that the access-token exists",
													"pm.test(\"StatusCode is 200.\", function () {",
													"    pm.expect(responseCode.code === 200).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that we've received a response",
													"pm.test(\"Response is not empty.\", function () {",
													"    pm.expect(responseBody.length > 0).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that the response provided is JSON",
													"pm.test(\"Response is JSON.\", function () {",
													"    pm.expect(parsedResponse !== null).to.be.true;",
													"});",
													"",
													"pm.test(\"Service Cloud returned a valid case object response.\", function () {",
													"    pm.expect(parsedResponse.hasOwnProperty('objectType')).to.be.true;",
													"    pm.expect(parsedResponse.hasOwnProperty('recordId')).to.be.true;",
													"    pm.expect(parsedResponse.hasOwnProperty('errors')).to.be.true;",
													"});",
													"",
													"pm.test(\"The response object was of type 'Case'.\", function () {",
													"    pm.expect(parsedResponse.objectType).to.not.equal(null);    ",
													"    pm.expect(parsedResponse.objectType).to.equal('Case');",
													"});",
													"",
													"pm.test(\"The response object contains a valid recordId.\", function () {",
													"    pm.expect(parsedResponse.recordId).to.not.equal(null);",
													"});",
													"",
													"pm.test(\"The response object does not contain any errors.\", function () {",
													"    pm.expect(parsedResponse.errors).to.equal(null);",
													"});",
													"",
													"// Record the recordId for the last case that was processed",
													"if (parsedResponse.hasOwnProperty('recordId') && parsedResponse.recordId !== null) {",
													"    ",
													"    // Initialize the header object",
													"    var Header = require('postman-collection').Header;",
													"    ",
													"    // Initialize the request options",
													"    var options = { ",
													"        method: 'GET',",
													"        header: [] ",
													"    };",
													"    ",
													"    // Build out the environment url for this request",
													"    options.url = pm.environment.get('serviceCloudUrl') + '/services/apexrest/Case/' + parsedResponse.recordId;",
													"    ",
													"    // Add the headers to the request definition",
													"    options.header.push(new Header({key: 'Content-Type', value: 'application/json'}));",
													"    options.header.push({key: 'Authorization', value: 'Bearer ' + pm.environment.get('sfscAuthToken')});",
													"",
													"    // Invoke the request",
													"    pm.sendRequest(options, function (error, response) {",
													"    ",
													"        // Throw an error if one is caught",
													"        if (error) throw new Error(error);",
													"",
													"        // Convert the response to JSON",
													"        responseJSON = response.json();",
													"",
													"        pm.test(\"Verify the case is created in Service Cloud.\", function () {",
													"            pm.expect(responseJSON.length).to.equal(1);",
													"            pm.expect(responseJSON[0]['Id']).to.equal(parsedResponse.recordId);",
													"        });    ",
													"        ",
													"        // Capture and maintain a list of caseIds that were created",
													"        var caseIds = [];",
													"        caseIds.push(parsedResponse.recordId)",
													"        pm.environment.set('tmpCaseIds', caseIds);        ",
													"",
													"    });",
													"",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{sfscAuthToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"description": "... represents the content-type of the request.",
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"first_name\":\"{{sfccCustomerFirstName}}\",\n\t\"last_name\":\"{{sfccCustomerLastName}}\",\n\t\"email\":\"{{sfccCustomerEmail}}\",\n\t\"phone\":\"555.555.1212\",\n\t\"case_type\":\"ContactUs\",\t\n\t\"case_sub_type\":\"General Information\",\n\t\"subject\":\"First test case of case creation.\",\n\t\"description\":\"Testing case creation via an anonymous customer in Salesforce B2C Commerce.  This should create the case, a new PersonAccount representing the anonymous customer, and associate the case to the newly created PersonAccount.\"\n}"
										},
										"url": {
											"raw": "{{serviceCloudUrl}}/services/apexrest/Case",
											"host": [
												"{{serviceCloudUrl}}"
											],
											"path": [
												"services",
												"apexrest",
												"Case"
											]
										},
										"description": "... this request will attempt to create a case within Service Cloud for an anonymous user (ie - a user that isn't registered in Salesforce B2C Commerce).  The request should result in:\n- the case is created in Service Cloud\n- a new PersonAccount representing the anonymous user\n- the case associated to the newly created PersonAccount"
									},
									"response": []
								},
								{
									"name": "04. Register Customer Account",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b9f857af-a97d-41aa-b191-7813e04b92cd",
												"exec": [
													"// Parse the JSON response",
													"var parsedResponse = JSON.parse(responseBody);",
													"",
													"// Execute a test to validate that the access-token exists",
													"pm.test(\"StatusCode is 200.\", function () {",
													"    pm.expect(responseCode.code === 200).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that we've received a response",
													"pm.test(\"Response is not empty.\", function () {",
													"    pm.expect(responseBody.length > 0).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that the response provided is JSON",
													"pm.test(\"Response is JSON.\", function () {",
													"    pm.expect(parsedResponse !== null).to.be.true;",
													"});",
													"",
													"pm.test(\"Service Cloud returned a valid account object response.\", function () {",
													"    pm.expect(parsedResponse.hasOwnProperty('objectType')).to.be.true;",
													"    pm.expect(parsedResponse.hasOwnProperty('recordId')).to.be.true;",
													"    pm.expect(parsedResponse.hasOwnProperty('errors')).to.be.true;",
													"});",
													"",
													"pm.test(\"The response object was of type 'Account'.\", function () {",
													"    pm.expect(parsedResponse.objectType).to.not.equal(null);    ",
													"    pm.expect(parsedResponse.objectType).to.equal('Account');",
													"});",
													"",
													"pm.test(\"The response object contains a valid recordId.\", function () {",
													"    pm.expect(parsedResponse.recordId).to.not.equal(null);",
													"});",
													"",
													"pm.test(\"The response object does not contain any errors.\", function () {",
													"    pm.expect(parsedResponse.errors).to.equal(null);",
													"});",
													"",
													"// Validate that the Account was successfully created",
													"if (parsedResponse.hasOwnProperty('recordId') && parsedResponse.recordId !== null) {",
													"    ",
													"    // Initialize the header object",
													"    var Header = require('postman-collection').Header;",
													"    ",
													"    // Initialize the request options",
													"    var options = { ",
													"        method: 'GET',",
													"        header: [] ",
													"    };",
													"    ",
													"    // Build out the environment url for this request",
													"    options.url = pm.environment.get('serviceCloudUrl') + '/services/apexrest/Contact/Registration/' + parsedResponse.recordId;",
													"    ",
													"    // Add the headers to the request definition",
													"    options.header.push(new Header({key: 'Content-Type', value: 'application/json'}));",
													"    options.header.push({key: 'Authorization', value: 'Bearer ' + pm.environment.get('sfscAuthToken')});",
													"",
													"    // Invoke the request",
													"    pm.sendRequest(options, function (error, response) {",
													"    ",
													"        // Throw an error if one is caught",
													"        if (error) throw new Error(error);",
													"",
													"        // Convert the response to JSON",
													"        responseJSON = response.json();",
													"",
													"        pm.test(\"Verify the customer is created in Service Cloud.\", function () {",
													"            pm.expect(responseJSON.length).to.equal(1);",
													"            pm.expect(responseJSON[0]['Id']).to.equal(parsedResponse.recordId);",
													"        });    ",
													"",
													"        // Record the AccountId for the registered user",
													"        pm.environment.set('tmpAccountId', parsedResponse.recordId);",
													"",
													"    });",
													"",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{sfscAuthToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"description": "... represents the content-type of the request.",
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"first_name\":\"{{sfccCustomerFirstName}}\",\n\t\"last_name\":\"{{sfccCustomerLastName}}\",\n\t\"email\":\"{{sfccCustomerEmail}}\",\n\t\"customer_id\":\"{{sfccCustomerId}}\",\n\t\"customer_no\":\"{{sfccCustomerNo}}\"\n}"
										},
										"url": {
											"raw": "{{serviceCloudUrl}}/services/apexrest/Contact/Registration",
											"host": [
												"{{serviceCloudUrl}}"
											],
											"path": [
												"services",
												"apexrest",
												"Contact",
												"Registration"
											]
										},
										"description": "... this request will create a customer as a Person Account in the specified Service Cloud Instance.  As a pre-requisite, please ensure that this user has been created and exists in your Salesforce B2C Commerce instance prior to attempting to create the account record in Service Cloud."
									},
									"response": []
								},
								{
									"name": "05. Create 2nd Registered Customer Service Case",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "fe9dec86-faa2-4da0-8a84-3e441742c616",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a590a2ce-8e47-4fd4-b0b9-2025a07ad1b6",
												"exec": [
													"// Parse the JSON response",
													"var parsedResponse = JSON.parse(responseBody);",
													"",
													"// Execute a test to validate that the access-token exists",
													"pm.test(\"StatusCode is 200.\", function () {",
													"    pm.expect(responseCode.code === 200).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that we've received a response",
													"pm.test(\"Response is not empty.\", function () {",
													"    pm.expect(responseBody.length > 0).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that the response provided is JSON",
													"pm.test(\"Response is JSON.\", function () {",
													"    pm.expect(parsedResponse !== null).to.be.true;",
													"});",
													"",
													"pm.test(\"Service Cloud returned a valid case object response.\", function () {",
													"    pm.expect(parsedResponse.hasOwnProperty('objectType')).to.be.true;",
													"    pm.expect(parsedResponse.hasOwnProperty('recordId')).to.be.true;",
													"    pm.expect(parsedResponse.hasOwnProperty('errors')).to.be.true;",
													"});",
													"",
													"pm.test(\"The response object was of type 'Case'.\", function () {",
													"    pm.expect(parsedResponse.objectType).to.not.equal(null);    ",
													"    pm.expect(parsedResponse.objectType).to.equal('Case');",
													"});",
													"",
													"pm.test(\"The response object contains a valid recordId.\", function () {",
													"    pm.expect(parsedResponse.recordId).to.not.equal(null);",
													"});",
													"",
													"pm.test(\"The response object does not contain any errors.\", function () {",
													"    pm.expect(parsedResponse.errors).to.equal(null);",
													"});",
													"",
													"// Record the recordId for the last case that was processed",
													"if (parsedResponse.hasOwnProperty('recordId') && parsedResponse.recordId !== null) {",
													"    ",
													"    // Initialize the header object",
													"    var Header = require('postman-collection').Header;",
													"    ",
													"    // Initialize the request options",
													"    var options = { ",
													"        method: 'GET',",
													"        header: [] ",
													"    };",
													"    ",
													"    // Build out the environment url for this request",
													"    options.url = pm.environment.get('serviceCloudUrl') + '/services/apexrest/Case/' + parsedResponse.recordId;",
													"    ",
													"    // Add the headers to the request definition",
													"    options.header.push(new Header({key: 'Content-Type', value: 'application/json'}));",
													"    options.header.push({key: 'Authorization', value: 'Bearer ' + pm.environment.get('sfscAuthToken')});",
													"",
													"    // Invoke the request",
													"    pm.sendRequest(options, function (error, response) {",
													"    ",
													"        // Throw an error if one is caught",
													"        if (error) throw new Error(error);",
													"",
													"        // Convert the response to JSON",
													"        responseJSON = response.json();",
													"",
													"        pm.test(\"Verify the case is created in Service Cloud.\", function () {",
													"            pm.expect(responseJSON.length).to.equal(1);",
													"            pm.expect(responseJSON[0]['Id']).to.equal(parsedResponse.recordId);",
													"        });    ",
													"",
													"        // Capture and maintain a list of caseIds that were created",
													"        var caseIds = pm.environment.get('tmpCaseIds');",
													"        caseIds.push(parsedResponse.recordId);",
													"        pm.environment.set('tmpCaseIds', caseIds);",
													"",
													"    });",
													"",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{sfscAuthToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"description": "... represents the content-type of the request.",
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"first_name\":\"{{sfccCustomerFirstName}}\",\n\t\"last_name\":\"{{sfccCustomerLastName}}\",\n\t\"email\":\"{{sfccCustomerEmail}}\",\n\t\"phone\":\"555-555-1212\",\n\t\"case_type\":\"ContactUs\",\n\t\"order_no\":\"0000101\",\n\t\"case_sub_type\":\"General Information\",\n\t\"subject\":\"General Information\",\n\t\"description\":\"Testing case creation via the storefront for a registered customer.  This should result in a PersonAccount being created, a case being created, and the case being mapped to the newly created PersonAccount.\",\n\t\"customer_id\":\"{{sfccCustomerId}}\"\n}"
										},
										"url": {
											"raw": "{{serviceCloudUrl}}/services/apexrest/Case",
											"host": [
												"{{serviceCloudUrl}}"
											],
											"path": [
												"services",
												"apexrest",
												"Case"
											]
										},
										"description": "... this request will attempt to create a case within Service Cloud for a registered user (ie - a user that is registered in Salesforce B2C Commerce) that already has a corresponding Service Cloud PersonAccount.  The request should result in:\n- the case is created in Service Cloud\n- the case is associated to the existing PersonAccount"
									},
									"response": []
								},
								{
									"name": "06. Verify Account Cases",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "fe9dec86-faa2-4da0-8a84-3e441742c616",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "fbe76d9f-a2da-44a8-8584-b6d68e9cb6d1",
												"exec": [
													"// Parse the JSON response",
													"var parsedResponse = JSON.parse(responseBody);",
													"",
													"// Retrieve the collection of recorded caseIds",
													"var caseIds = pm.environment.get('tmpCaseIds');",
													"var caseObjects = {};",
													"",
													"// Execute a test to validate that the access-token exists",
													"pm.test(\"StatusCode is 200.\", function () {",
													"    pm.expect(responseCode.code === 200).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that we've received a response",
													"pm.test(\"Response is not empty.\", function () {",
													"    pm.expect(responseBody.length > 0).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that the response provided is JSON",
													"pm.test(\"Response is JSON.\", function () {",
													"    pm.expect(parsedResponse !== null).to.be.true;",
													"});",
													"",
													"pm.test(\"Service Cloud returned at least two cases.\", function () {",
													"    pm.expect(parsedResponse.length).of.at.least(2);",
													"});",
													"",
													"// Convert the collection of cases into an object",
													"if (parsedResponse.length > 0) {",
													"    ",
													"    // Loop over the collection of cases and capture the ID for each",
													"    for (var caseIndex = 0; caseIndex < parsedResponse.length; caseIndex++) {",
													"        ",
													"        // Create a reference to the current case",
													"        var thisCase = parsedResponse[caseIndex];",
													"        ",
													"        // Capy the case to the objects collection",
													"        caseObjects[thisCase.Id] = thisCase;",
													"        ",
													"    }",
													"    ",
													"    // Check if we've found the cases that were created",
													"    for (var caseIndex = 0; caseIndex < caseIds.length; caseIndex++) {",
													"        ",
													"        // Create a reference to the current caseId",
													"        var thisCase = caseIds[caseIndex];",
													"        ",
													"        // Verity that the case(s) we're tracking were created in Service Cloud",
													"        pm.test(\"Verify that case [\" + thisCase + \"] is created in Service Cloud.\", function () {",
													"            pm.expect(caseObjects.hasOwnProperty(thisCase)).to.be.true;",
													"        }); ",
													"        ",
													"    }",
													"    ",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{sfscAuthToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"description": "... represents the content-type of the request.",
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"first_name\":\"{{sfccCustomerFirstName}}\",\n\t\"last_name\":\"{{sfccCustomerLastName}}\",\n\t\"email\":\"{{sfccCustomerEmail}}\",\n\t\"phone\":\"555-555-1212\",\n\t\"case_type\":\"ContactUs\",\n\t\"order_no\": \"00000100\",\n\t\"case_sub_type\":\"General Information\",\n\t\"subject\":\"General Information\",\n\t\"description\":\"Testing case creation via the storefront for a registered customer.  This should result in a PersonAccount being created, a case being created, and the case being mapped to the newly created PersonAccount.\",\n\t\"customer_id\":\"{{sfccCustomerId}}\"\n}"
										},
										"url": {
											"raw": "{{serviceCloudUrl}}/services/apexrest/Case/{{tmpAccountId}}",
											"host": [
												"{{serviceCloudUrl}}"
											],
											"path": [
												"services",
												"apexrest",
												"Case",
												"{{tmpAccountId}}"
											]
										},
										"description": "... this request will attempt to validate the total number of cases created for a given Service Cloud Person Account."
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Customer Management",
					"item": [
						{
							"name": "Create Registered Customer Account",
							"item": [
								{
									"name": "00. Retrieve Service Cloud AuthToken",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "12f5cbc7-330d-4cb0-91aa-8b6f5044172b",
												"exec": [
													"",
													"// Clear the contents of the Service Cloud last-case processed environment variable",
													"pm.environment.unset(\"sfscLastCaseRecordId\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a5010dd8-7f42-47b3-bb6c-cac62d262b98",
												"exec": [
													"// Parse the JSON response",
													"var parsedResponse = JSON.parse(responseBody);",
													"",
													"// Check if the parsedResponse has an access-token key",
													"if (parsedResponse.hasOwnProperty('access_token')) {",
													"    ",
													"    // If an access-token exists, then set it as part of the environment",
													"    postman.setEnvironmentVariable('sfscAuthToken', parsedResponse.access_token);",
													"    ",
													"    // Write the serviceCloud Url based on the instance_url in the response",
													"    postman.setEnvironmentVariable('serviceCloudUrl', parsedResponse.instance_url);",
													"    ",
													"}",
													"",
													"// Execute a test to validate that the access-token exists",
													"pm.test(\"StatusCode is 200.\", function () {",
													"    pm.expect(responseCode.code === 200).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that we've received a response",
													"pm.test(\"Response is not empty.\", function () {",
													"    pm.expect(responseBody.length > 0).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that the response provided is JSON",
													"pm.test(\"Response is JSON.\", function () {",
													"    pm.expect(parsedResponse !== null).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that the access-token exists",
													"pm.test(\"Service Cloud AuthToken response contains an access token.\", function () {",
													"    pm.expect(parsedResponse.hasOwnProperty('access_token')).to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"description": "... represents the content-type of the request",
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{authTokenUrl}}/services/oauth2/token?grant_type=password&client_id={{sfscConsumerKey}}&client_secret={{sfscConsumerSecret}}&username={{sfscUsername}}&password={{sfscPassword}}{{sfscSecurityToken}}",
											"protocol": "https",
											"host": [
												"{{authTokenUrl}}"
											],
											"path": [
												"services",
												"oauth2",
												"token"
											],
											"query": [
												{
													"key": "grant_type",
													"value": "password",
													"description": "... represents the grant-type to be performed"
												},
												{
													"key": "client_id",
													"value": "{{sfscConsumerKey}}",
													"description": "... identifies the clientId associated to the SCC Integration User account"
												},
												{
													"key": "client_secret",
													"value": "{{sfscConsumerSecret}}",
													"description": "... identifies the clientSecret associated to the SCC Integration User account"
												},
												{
													"key": "username",
													"value": "{{sfscUsername}}",
													"description": "... identifies the username associated to the SCC Integration User account"
												},
												{
													"key": "password",
													"value": "{{sfscPassword}}{{sfscSecurityToken}}",
													"description": "... represents the password + securityToken associated to the SCC Integration User account"
												}
											]
										},
										"description": "... this request is used to confirm that a REST access token can be retrieve using the credentials and security token associated to the SCC Integration User.  This request leverages the Salesforce grant-type of \"password\".  A successful request will generate an access token of token_type \"Bearer\" that must be attached to all subsequent REST interactions (ex. creating cases, accounts, and orders).\n- For details on this request-type, please visit https://help.salesforce.com/articleView?id=remoteaccess_oauth_username_password_flow.htm&type=5.\n- Once the bearer token has been generated, please update the Authorization tab in the parent project folder to include the generated Bearer token."
									},
									"response": []
								},
								{
									"name": "01. Retrieve Commerce Cloud AuthToken",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "86c21dc4-46c9-4da9-8a77-bb21288a428e",
												"exec": [
													"// Audit the pre-execution test script",
													"console.log(' ----------------------------------------------------------');",
													"console.log(' - START: Executing SFCC RetrieveAuthToken Pre-Execution Script')",
													"console.log(' ----------------------------------------------------------');",
													"",
													"// Build the credential string by concatenating the username, password, and clientSecret",
													"credentialString = pm.environment.get(\"sfccUsername\") + ':' + pm.environment.get(\"sfccPassword\") + ':' + pm.environment.get(\"sfccClientSecret\");",
													"",
													"// Encrypt the credential string to base64",
													"rawCredential = CryptoJS.enc.Utf8.parse(credentialString);",
													"encodedCredential = CryptoJS.enc.Base64.stringify(rawCredential);",
													"",
													"// Set the environment variable representing the credential",
													"pm.environment.set(\"sfccUserCredential\", encodedCredential);",
													"",
													"console.log(' ----------------------------------------------------------');",
													"console.log(' -   END: Executing SFCC RetrieveAuthToken Pre-Execution Script')",
													"console.log(' ----------------------------------------------------------');",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "0dc132c9-2c32-41b5-b224-9fb1f872cdc3",
												"exec": [
													"",
													"// Parse the response data",
													"var parsedResponse = JSON.parse(responseBody);",
													"",
													"// Execute a test to validate that the access-token exists",
													"pm.test(\"StatusCode is 200.\", function () {",
													"    pm.expect(responseCode.code === 200).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that we've received a response",
													"pm.test(\"Response is not empty.\", function () {",
													"    pm.expect(responseBody.length > 0).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that the response provided is JSON",
													"pm.test(\"Response is JSON.\", function () {",
													"    pm.expect(parsedResponse !== null).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that the response contains the properties expected.",
													"pm.test(\"Response is well-formed and contains the access_token property.\", function () {",
													"    pm.expect(parsedResponse.hasOwnProperty('access_token')).to.be.true;",
													"    pm.expect(parsedResponse.hasOwnProperty('expires_in')).to.be.true;",
													"    pm.expect(parsedResponse.hasOwnProperty('token_type')).to.be.true;",
													"});",
													"",
													"// Check if the parsedResponse has an access-token key",
													"if (parsedResponse.hasOwnProperty('access_token')) {",
													"    ",
													"    // If an access-token exists, then set it as part of the environment",
													"    postman.setEnvironmentVariable('sfccAuthToken', parsedResponse.access_token);",
													"",
													"} "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Basic {{sfccUserCredential}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "grant_type=urn:demandware:params:oauth:grant-type:client-id:dwsid:dwsecuretoken"
										},
										"url": {
											"raw": "{{sfccOAuth2Url}}?client_id={{sfccClientId}}",
											"host": [
												"{{sfccOAuth2Url}}"
											],
											"query": [
												{
													"key": "client_id",
													"value": "{{sfccClientId}}"
												}
											]
										},
										"description": "... retrieves an authToken for a Salesforce B2C Commerce Business Manager user.  The request will encode the username:password:clientSecret via Base64 and seed the encoded string via the sfccUserCredential environment property.  This encoded string is then used to request the authToken."
									},
									"response": []
								},
								{
									"name": "02. Verify Customer Account Exists in B2C Commerce",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6509dc87-d8cb-4c46-8bfa-b053da2d1364",
												"exec": [
													"// Parse the JSON response",
													"var parsedResponse = JSON.parse(responseBody);",
													"",
													"// Execute a test to validate that the access-token exists",
													"pm.test(\"StatusCode is 200.\", function () {",
													"    pm.expect(responseCode.code === 200).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that we've received a response",
													"pm.test(\"Response is not empty.\", function () {",
													"    pm.expect(responseBody.length > 0).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that the response provided is JSON",
													"pm.test(\"Response is JSON.\", function () {",
													"    pm.expect(parsedResponse !== null).to.be.true;",
													"});",
													"",
													"pm.test(\"Response is of type 'customer_search_result'.\", function() {",
													"    pm.expect(parsedResponse._type).to.be.equal('customer_search_result');    ",
													"});",
													"",
													"pm.test(\"Response returned at least one search result.\", function() {",
													"    pm.expect(parsedResponse.hits.length).to.be.at.least(1);    ",
													"});",
													"",
													"// Only evaluate the search hits if we have at least one (1) result",
													"if (parsedResponse.hits.length > 0) {",
													"    ",
													"    // Default the customer-found flag",
													"    var customerFound = false;",
													"    ",
													"    // Loop over the collection fo search hits returned by the response",
													"    for (var hitIndex = 0; hitIndex < parsedResponse.hits.length; hitIndex++) {",
													"        ",
													"        // Create a reference to the current search hit",
													"        var thisSearchHit = parsedResponse.hits[hitIndex];",
													"        ",
													"        // Check if we've found the customer number in the search results",
													"        if (thisSearchHit.data.customer_no === pm.environment.get('sfccCustomerNo')) {",
													"            customerFound = true;",
													"        }",
													"",
													"    }",
													"    ",
													"    pm.test(\"Verified that the customer number was found in the Salesforce B2C Commerce environment.\", function() {",
													"        pm.expect(customerFound).to.be.at.true;    ",
													"    });",
													"    ",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{sfccAuthToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n     \"query\" : \n     {\n        \"text_query\": { \"fields\": [\"credentials.login\"], \"search_phrase\":\"{{sfccCustomerEmail}}\" }\n     }\n}"
										},
										"url": {
											"raw": "{{sfccDataUrl}}/customer_lists/{{sfccCustomerListId}}/customer_search",
											"host": [
												"{{sfccDataUrl}}"
											],
											"path": [
												"customer_lists",
												"{{sfccCustomerListId}}",
												"customer_search"
											]
										},
										"description": "... this request attempts to verify that the test-customer exists in Salesforce B2C Commerce prior to working with that customer."
									},
									"response": []
								},
								{
									"name": "03. Create Registered Customer Account",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fcf74074-63d5-42d8-8eda-78aba4283728",
												"exec": [
													"// Parse the JSON response",
													"var parsedResponse = JSON.parse(responseBody);",
													"",
													"// Execute a test to validate that the access-token exists",
													"pm.test(\"StatusCode is 200.\", function () {",
													"    pm.expect(responseCode.code === 200).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that we've received a response",
													"pm.test(\"Response is not empty.\", function () {",
													"    pm.expect(responseBody.length > 0).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that the response provided is JSON",
													"pm.test(\"Response is JSON.\", function () {",
													"    pm.expect(parsedResponse !== null).to.be.true;",
													"});",
													"",
													"pm.test(\"Service Cloud returned a valid account object response.\", function () {",
													"    pm.expect(parsedResponse.hasOwnProperty('objectType')).to.be.true;",
													"    pm.expect(parsedResponse.hasOwnProperty('recordId')).to.be.true;",
													"    pm.expect(parsedResponse.hasOwnProperty('errors')).to.be.true;",
													"});",
													"",
													"pm.test(\"The response object was of type 'Account'.\", function () {",
													"    pm.expect(parsedResponse.objectType).to.not.equal(null);    ",
													"    pm.expect(parsedResponse.objectType).to.equal('Account');",
													"});",
													"",
													"pm.test(\"The response object contains a valid recordId.\", function () {",
													"    pm.expect(parsedResponse.recordId).to.not.equal(null);",
													"});",
													"",
													"pm.test(\"The response object does not contain any errors.\", function () {",
													"    pm.expect(parsedResponse.errors).to.equal(null);",
													"});",
													"",
													"// Validate that the Account was successfully created",
													"if (parsedResponse.hasOwnProperty('recordId') && parsedResponse.recordId !== null) {",
													"   ",
													"    // Give the future-request time to operate",
													"    setTimeout(function() {",
													"",
													"        // Initialize the header object",
													"        var Header = require('postman-collection').Header;",
													"        ",
													"        // Initialize the request options",
													"        var options = { ",
													"            method: 'GET',",
													"            header: [] ",
													"        };",
													"        ",
													"        // Build out the environment url for this request",
													"        options.url = pm.environment.get('serviceCloudUrl') + '/services/apexrest/Contact/Registration/' + parsedResponse.recordId;",
													"        ",
													"        // Add the headers to the request definition",
													"        options.header.push(new Header({key: 'Content-Type', value: 'application/json'}));",
													"        options.header.push({key: 'Authorization', value: 'Bearer ' + pm.environment.get('sfscAuthToken')});",
													"",
													"        // Invoke the request",
													"        pm.sendRequest(options, function (error, response) {",
													"        ",
													"            // Throw an error if one is caught",
													"            if (error) throw new Error(error);",
													"    ",
													"            // Convert the response to JSON",
													"            responseJSON = response.json();",
													"    ",
													"            pm.test(\"Verify the customer is created in Service Cloud.\", function () {",
													"                pm.expect(responseJSON.length).to.equal(1);",
													"                pm.expect(responseJSON[0]['Id']).to.equal(parsedResponse.recordId);",
													"            });    ",
													"    ",
													"            // Record the AccountId for the registered user",
													"            pm.environment.set('tmpAccountId', parsedResponse.recordId);",
													"    ",
													"        });",
													"",
													"    }, pm.environment.get('postRequestDelay'));    ",
													"",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{sfscAuthToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"description": "... represents the content-type of the request.",
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"first_name\":\"{{sfccCustomerFirstName}}\",\n\t\"last_name\":\"{{sfccCustomerLastName}}\",\n\t\"email\":\"{{sfccCustomerEmail}}\",\n\t\"customer_id\":\"{{sfccCustomerId}}\",\n\t\"customer_no\":\"{{sfccCustomerNo}}\"\n}"
										},
										"url": {
											"raw": "{{serviceCloudUrl}}/services/apexrest/Contact/Registration",
											"host": [
												"{{serviceCloudUrl}}"
											],
											"path": [
												"services",
												"apexrest",
												"Contact",
												"Registration"
											]
										},
										"description": "... this request will create a customer as a Person Account in the specified Service Cloud Instance.  As a pre-requisite, please ensure that this user has been created and exists in your Salesforce B2C Commerce instance prior to attempting to create the account record in Service Cloud."
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Update Registered Customer Account",
							"item": [
								{
									"name": "00. Retrieve Service Cloud AuthToken",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "12f5cbc7-330d-4cb0-91aa-8b6f5044172b",
												"exec": [
													"",
													"// Clear the contents of the Service Cloud last-case processed environment variable",
													"pm.environment.unset(\"sfscLastCaseRecordId\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a5010dd8-7f42-47b3-bb6c-cac62d262b98",
												"exec": [
													"// Parse the JSON response",
													"var parsedResponse = JSON.parse(responseBody);",
													"",
													"// Check if the parsedResponse has an access-token key",
													"if (parsedResponse.hasOwnProperty('access_token')) {",
													"    ",
													"    // If an access-token exists, then set it as part of the environment",
													"    postman.setEnvironmentVariable('sfscAuthToken', parsedResponse.access_token);",
													"    ",
													"    // Write the serviceCloud Url based on the instance_url in the response",
													"    postman.setEnvironmentVariable('serviceCloudUrl', parsedResponse.instance_url);",
													"    ",
													"}",
													"",
													"// Execute a test to validate that the access-token exists",
													"pm.test(\"StatusCode is 200.\", function () {",
													"    pm.expect(responseCode.code === 200).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that we've received a response",
													"pm.test(\"Response is not empty.\", function () {",
													"    pm.expect(responseBody.length > 0).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that the response provided is JSON",
													"pm.test(\"Response is JSON.\", function () {",
													"    pm.expect(parsedResponse !== null).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that the access-token exists",
													"pm.test(\"Service Cloud AuthToken response contains an access token.\", function () {",
													"    pm.expect(parsedResponse.hasOwnProperty('access_token')).to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"description": "... represents the content-type of the request",
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{authTokenUrl}}/services/oauth2/token?grant_type=password&client_id={{sfscConsumerKey}}&client_secret={{sfscConsumerSecret}}&username={{sfscUsername}}&password={{sfscPassword}}{{sfscSecurityToken}}",
											"protocol": "https",
											"host": [
												"{{authTokenUrl}}"
											],
											"path": [
												"services",
												"oauth2",
												"token"
											],
											"query": [
												{
													"key": "grant_type",
													"value": "password",
													"description": "... represents the grant-type to be performed"
												},
												{
													"key": "client_id",
													"value": "{{sfscConsumerKey}}",
													"description": "... identifies the clientId associated to the SCC Integration User account"
												},
												{
													"key": "client_secret",
													"value": "{{sfscConsumerSecret}}",
													"description": "... identifies the clientSecret associated to the SCC Integration User account"
												},
												{
													"key": "username",
													"value": "{{sfscUsername}}",
													"description": "... identifies the username associated to the SCC Integration User account"
												},
												{
													"key": "password",
													"value": "{{sfscPassword}}{{sfscSecurityToken}}",
													"description": "... represents the password + securityToken associated to the SCC Integration User account"
												}
											]
										},
										"description": "... this request is used to confirm that a REST access token can be retrieve using the credentials and security token associated to the SCC Integration User.  This request leverages the Salesforce grant-type of \"password\".  A successful request will generate an access token of token_type \"Bearer\" that must be attached to all subsequent REST interactions (ex. creating cases, accounts, and orders).\n- For details on this request-type, please visit https://help.salesforce.com/articleView?id=remoteaccess_oauth_username_password_flow.htm&type=5.\n- Once the bearer token has been generated, please update the Authorization tab in the parent project folder to include the generated Bearer token."
									},
									"response": []
								},
								{
									"name": "01. Retrieve Commerce Cloud AuthToken",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "86c21dc4-46c9-4da9-8a77-bb21288a428e",
												"exec": [
													"// Audit the pre-execution test script",
													"console.log(' ----------------------------------------------------------');",
													"console.log(' - START: Executing SFCC RetrieveAuthToken Pre-Execution Script')",
													"console.log(' ----------------------------------------------------------');",
													"",
													"// Build the credential string by concatenating the username, password, and clientSecret",
													"credentialString = pm.environment.get(\"sfccUsername\") + ':' + pm.environment.get(\"sfccPassword\") + ':' + pm.environment.get(\"sfccClientSecret\");",
													"",
													"// Encrypt the credential string to base64",
													"rawCredential = CryptoJS.enc.Utf8.parse(credentialString);",
													"encodedCredential = CryptoJS.enc.Base64.stringify(rawCredential);",
													"",
													"// Set the environment variable representing the credential",
													"pm.environment.set(\"sfccUserCredential\", encodedCredential);",
													"",
													"console.log(' ----------------------------------------------------------');",
													"console.log(' -   END: Executing SFCC RetrieveAuthToken Pre-Execution Script')",
													"console.log(' ----------------------------------------------------------');",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "0dc132c9-2c32-41b5-b224-9fb1f872cdc3",
												"exec": [
													"",
													"// Parse the response data",
													"var parsedResponse = JSON.parse(responseBody);",
													"",
													"// Execute a test to validate that the access-token exists",
													"pm.test(\"StatusCode is 200.\", function () {",
													"    pm.expect(responseCode.code === 200).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that we've received a response",
													"pm.test(\"Response is not empty.\", function () {",
													"    pm.expect(responseBody.length > 0).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that the response provided is JSON",
													"pm.test(\"Response is JSON.\", function () {",
													"    pm.expect(parsedResponse !== null).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that the response contains the properties expected.",
													"pm.test(\"Response is well-formed and contains the access_token property.\", function () {",
													"    pm.expect(parsedResponse.hasOwnProperty('access_token')).to.be.true;",
													"    pm.expect(parsedResponse.hasOwnProperty('expires_in')).to.be.true;",
													"    pm.expect(parsedResponse.hasOwnProperty('token_type')).to.be.true;",
													"});",
													"",
													"// Check if the parsedResponse has an access-token key",
													"if (parsedResponse.hasOwnProperty('access_token')) {",
													"    ",
													"    // If an access-token exists, then set it as part of the environment",
													"    postman.setEnvironmentVariable('sfccAuthToken', parsedResponse.access_token);",
													"",
													"} "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Basic {{sfccUserCredential}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "grant_type=urn:demandware:params:oauth:grant-type:client-id:dwsid:dwsecuretoken"
										},
										"url": {
											"raw": "{{sfccOAuth2Url}}?client_id={{sfccClientId}}",
											"host": [
												"{{sfccOAuth2Url}}"
											],
											"query": [
												{
													"key": "client_id",
													"value": "{{sfccClientId}}"
												}
											]
										},
										"description": "... retrieves an authToken for a Salesforce B2C Commerce Business Manager user.  The request will encode the username:password:clientSecret via Base64 and seed the encoded string via the sfccUserCredential environment property.  This encoded string is then used to request the authToken."
									},
									"response": []
								},
								{
									"name": "02. Verify Customer Account Exists in B2C Commerce",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6509dc87-d8cb-4c46-8bfa-b053da2d1364",
												"exec": [
													"// Parse the JSON response",
													"var parsedResponse = JSON.parse(responseBody);",
													"",
													"// Execute a test to validate that the access-token exists",
													"pm.test(\"StatusCode is 200.\", function () {",
													"    pm.expect(responseCode.code === 200).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that we've received a response",
													"pm.test(\"Response is not empty.\", function () {",
													"    pm.expect(responseBody.length > 0).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that the response provided is JSON",
													"pm.test(\"Response is JSON.\", function () {",
													"    pm.expect(parsedResponse !== null).to.be.true;",
													"});",
													"",
													"pm.test(\"Response is of type 'customer_search_result'.\", function() {",
													"    pm.expect(parsedResponse._type).to.be.equal('customer_search_result');    ",
													"});",
													"",
													"pm.test(\"Response returned at least one search result.\", function() {",
													"    pm.expect(parsedResponse.hits.length).to.be.at.least(1);    ",
													"});",
													"",
													"// Only evaluate the search hits if we have at least one (1) result",
													"if (parsedResponse.hits.length > 0) {",
													"    ",
													"    // Default the customer-found flag",
													"    var customerFound = false;",
													"    ",
													"    // Loop over the collection fo search hits returned by the response",
													"    for (var hitIndex = 0; hitIndex < parsedResponse.hits.length; hitIndex++) {",
													"        ",
													"        // Create a reference to the current search hit",
													"        var thisSearchHit = parsedResponse.hits[hitIndex];",
													"        ",
													"        // Check if we've found the customer number in the search results",
													"        if (thisSearchHit.data.customer_no === pm.environment.get('sfccCustomerNo')) {",
													"            customerFound = true;",
													"        }",
													"",
													"    }",
													"    ",
													"    pm.test(\"Verified that the customer number was found in the Salesforce B2C Commerce environment.\", function() {",
													"        pm.expect(customerFound).to.be.at.true;    ",
													"    });",
													"    ",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{sfccAuthToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n     \"query\" : \n     {\n        \"text_query\": { \"fields\": [\"credentials.login\"], \"search_phrase\":\"{{sfccCustomerEmail}}\" }\n     }\n}"
										},
										"url": {
											"raw": "{{sfccDataUrl}}/customer_lists/{{sfccCustomerListId}}/customer_search",
											"host": [
												"{{sfccDataUrl}}"
											],
											"path": [
												"customer_lists",
												"{{sfccCustomerListId}}",
												"customer_search"
											]
										},
										"description": "... this request attempts to verify that the test-customer exists in Salesforce B2C Commerce prior to working with that customer."
									},
									"response": []
								},
								{
									"name": "03. Create Registered Customer Account",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fcf74074-63d5-42d8-8eda-78aba4283728",
												"exec": [
													"// Parse the JSON response",
													"var parsedResponse = JSON.parse(responseBody);",
													"",
													"// Execute a test to validate that the access-token exists",
													"pm.test(\"StatusCode is 200.\", function () {",
													"    pm.expect(responseCode.code === 200).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that we've received a response",
													"pm.test(\"Response is not empty.\", function () {",
													"    pm.expect(responseBody.length > 0).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that the response provided is JSON",
													"pm.test(\"Response is JSON.\", function () {",
													"    pm.expect(parsedResponse !== null).to.be.true;",
													"});",
													"",
													"pm.test(\"Service Cloud returned a valid account object response.\", function () {",
													"    pm.expect(parsedResponse.hasOwnProperty('objectType')).to.be.true;",
													"    pm.expect(parsedResponse.hasOwnProperty('recordId')).to.be.true;",
													"    pm.expect(parsedResponse.hasOwnProperty('errors')).to.be.true;",
													"});",
													"",
													"pm.test(\"The response object was of type 'Account'.\", function () {",
													"    pm.expect(parsedResponse.objectType).to.not.equal(null);    ",
													"    pm.expect(parsedResponse.objectType).to.equal('Account');",
													"});",
													"",
													"pm.test(\"The response object contains a valid recordId.\", function () {",
													"    pm.expect(parsedResponse.recordId).to.not.equal(null);",
													"});",
													"",
													"pm.test(\"The response object does not contain any errors.\", function () {",
													"    pm.expect(parsedResponse.errors).to.equal(null);",
													"});",
													"",
													"// Validate that the Account was successfully created",
													"if (parsedResponse.hasOwnProperty('recordId') && parsedResponse.recordId !== null) {",
													"    ",
													"    // Give the future-request time to operate",
													"    setTimeout(function() {",
													"",
													"        // Initialize the header object",
													"        var Header = require('postman-collection').Header;",
													"        ",
													"        // Initialize the request options",
													"        var options = { ",
													"            method: 'GET',",
													"            header: [] ",
													"        };",
													"        ",
													"        // Build out the environment url for this request",
													"        options.url = pm.environment.get('serviceCloudUrl') + '/services/apexrest/Contact/Registration/' + parsedResponse.recordId;",
													"        ",
													"        // Add the headers to the request definition",
													"        options.header.push(new Header({key: 'Content-Type', value: 'application/json'}));",
													"        options.header.push({key: 'Authorization', value: 'Bearer ' + pm.environment.get('sfscAuthToken')});",
													"    ",
													"        // Invoke the request",
													"        pm.sendRequest(options, function (error, response) {",
													"        ",
													"            // Throw an error if one is caught",
													"            if (error) throw new Error(error);",
													"    ",
													"            // Convert the response to JSON",
													"            responseJSON = response.json();",
													"    ",
													"            pm.test(\"Verify the customer is created in Service Cloud.\", function () {",
													"                pm.expect(responseJSON.length).to.equal(1);",
													"                pm.expect(responseJSON[0]['Id']).to.equal(parsedResponse.recordId);",
													"            });    ",
													"    ",
													"            // Record the AccountId for the registered user",
													"            pm.environment.set('tmpAccountId', parsedResponse.recordId);",
													"    ",
													"        });",
													"    ",
													"    }, pm.environment.get('postRequestDelay'));       ",
													"    ",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{sfscAuthToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"description": "... represents the content-type of the request.",
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"first_name\":\"{{sfccCustomerFirstName}}\",\n\t\"last_name\":\"{{sfccCustomerLastName}}\",\n\t\"email\":\"{{sfccCustomerEmail}}\",\n\t\"customer_id\":\"{{sfccCustomerId}}\",\n\t\"customer_no\":\"{{sfccCustomerNo}}\"\n}"
										},
										"url": {
											"raw": "{{serviceCloudUrl}}/services/apexrest/Contact/Registration",
											"host": [
												"{{serviceCloudUrl}}"
											],
											"path": [
												"services",
												"apexrest",
												"Contact",
												"Registration"
											]
										},
										"description": "... this request will create a customer as a Person Account in the specified Service Cloud Instance.  As a pre-requisite, please ensure that this user has been created and exists in your Salesforce B2C Commerce instance prior to attempting to create the account record in Service Cloud."
									},
									"response": []
								},
								{
									"name": "04. Update Customer in B2C Commerce",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{sfccAuthToken}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [
											{
												"key": "x-dw-client-id",
												"value": "{{sfccClientId}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"first_name\": \"{{tmpCustomerFirstName}}\",\n\t\"last_name\": \"{{tmpCustomerLastName}}\"\n}"
										},
										"url": {
											"raw": "{{sfccShopUrl}}/customers/{{sfccCustomerId}}",
											"host": [
												"{{sfccShopUrl}}"
											],
											"path": [
												"customers",
												"{{sfccCustomerId}}"
											]
										},
										"description": "... updates the properties for a given customer.  Prior to modifying the customer, please retrieve an authToken by executing request 00a. Retrieve Commerce Cloud AuthToken."
									},
									"response": []
								},
								{
									"name": "05. Update Registered Customer Account",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "4015febb-3393-4041-9226-743d210569a4",
												"exec": [
													"",
													"// Default the first / last name we'll use to update the customer account",
													"pm.environment.set('tmpCustomerFirstName', 'George');",
													"pm.environment.set('tmpCustomerLastName', 'Costanza');",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f542a683-7d1c-4cef-a10c-7e8f0a645d04",
												"exec": [
													"// Parse the JSON response",
													"var parsedResponse = JSON.parse(responseBody);",
													"",
													"// Execute a test to validate that the access-token exists",
													"pm.test(\"StatusCode is 200.\", function () {",
													"    pm.expect(responseCode.code === 200).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that we've received a response",
													"pm.test(\"Response is not empty.\", function () {",
													"    pm.expect(responseBody.length > 0).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that the response provided is JSON",
													"pm.test(\"Response is JSON.\", function () {",
													"    pm.expect(parsedResponse !== null).to.be.true;",
													"});",
													"",
													"pm.test(\"Service Cloud returned a valid account object response.\", function () {",
													"    pm.expect(parsedResponse.hasOwnProperty('objectType')).to.be.true;",
													"    pm.expect(parsedResponse.hasOwnProperty('recordId')).to.be.true;",
													"    pm.expect(parsedResponse.hasOwnProperty('errors')).to.be.true;",
													"});",
													"",
													"pm.test(\"The response object was of type 'Account'.\", function () {",
													"    pm.expect(parsedResponse.objectType).to.not.equal(null);    ",
													"    pm.expect(parsedResponse.objectType).to.equal('Account');",
													"});",
													"",
													"pm.test(\"The response object contains a valid recordId.\", function () {",
													"    pm.expect(parsedResponse.recordId).to.not.equal(null);",
													"});",
													"",
													"pm.test(\"The response object does not contain any errors.\", function () {",
													"    pm.expect(parsedResponse.errors).to.equal(null);",
													"});",
													"",
													"// Validate that the Account was successfully created",
													"if (parsedResponse.hasOwnProperty('recordId') && parsedResponse.recordId !== null) {",
													"    ",
													"    // Give the future-request time to operate",
													"    setTimeout(function() {    ",
													"    ",
													"        // Initialize the header object",
													"        var Header = require('postman-collection').Header;",
													"        ",
													"        // Initialize the request options",
													"        var options = { ",
													"            method: 'GET',",
													"            header: [] ",
													"        };",
													"        ",
													"        // Build out the environment url for this request",
													"        options.url = pm.environment.get('serviceCloudUrl') + '/services/apexrest/Contact/Registration/' + parsedResponse.recordId;",
													"        ",
													"        // Add the headers to the request definition",
													"        options.header.push(new Header({key: 'Content-Type', value: 'application/json'}));",
													"        options.header.push({key: 'Authorization', value: 'Bearer ' + pm.environment.get('sfscAuthToken')});",
													"    ",
													"        // Invoke the request",
													"        pm.sendRequest(options, function (error, response) {",
													"        ",
													"            // Throw an error if one is caught",
													"            if (error) throw new Error(error);",
													"    ",
													"            // Convert the response to JSON",
													"            responseJSON = response.json();",
													"    ",
													"            pm.test(\"Verify the customer is found in Service Cloud.\", function () {",
													"                pm.expect(responseJSON.length).to.equal(1);",
													"                pm.expect(responseJSON[0]['Id']).to.equal(parsedResponse.recordId);",
													"            });    ",
													"    ",
													"            pm.test(\"Verify the customer's firstName has been updated.\", function () {",
													"                pm.expect(responseJSON[0]['FirstName']).to.equal(pm.environment.get('tmpCustomerFirstName'));",
													"            });    ",
													"    ",
													"            pm.test(\"Verify the customer's lastName has been updated.\", function () {",
													"                pm.expect(responseJSON[0]['LastName']).to.equal(pm.environment.get('tmpCustomerLastName'));",
													"            });",
													"    ",
													"            // Record the AccountId for the registered user",
													"            pm.environment.set('tmpAccountId', parsedResponse.recordId);",
													"    ",
													"        });",
													"",
													"    }, pm.environment.get('postRequestDelay'));      ",
													"",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{sfscAuthToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"description": "... represents the content-type of the request.",
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"first_name\":\"{{tmpCustomerFirstName}}\",\n\t\"last_name\":\"{{tmpCustomerLastName}}\",\n\t\"email\":\"{{sfccCustomerEmail}}\",\n\t\"customer_id\":\"{{sfccCustomerId}}\",\n\t\"customer_no\":\"{{sfccCustomerNo}}\"\n}"
										},
										"url": {
											"raw": "{{serviceCloudUrl}}/services/apexrest/Contact/Registration",
											"host": [
												"{{serviceCloudUrl}}"
											],
											"path": [
												"services",
												"apexrest",
												"Contact",
												"Registration"
											]
										},
										"description": "... this request will attempt to update the properties of a registered customer account by changing the firstname and lastname of the customer via the request."
									},
									"response": []
								},
								{
									"name": "06. Reset Customer in B2C Commerce",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{sfccAuthToken}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [
											{
												"key": "x-dw-client-id",
												"value": "{{sfccClientId}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"first_name\": \"{{sfccCustomerFirstName}}\",\n\t\"last_name\": \"{{sfccCustomerLastName}}\"\n}"
										},
										"url": {
											"raw": "{{sfccShopUrl}}/customers/{{sfccCustomerId}}",
											"host": [
												"{{sfccShopUrl}}"
											],
											"path": [
												"customers",
												"{{sfccCustomerId}}"
											]
										},
										"description": "... updates the properties for a given customer.  Prior to modifying the customer, please retrieve an authToken by executing request 00a. Retrieve Commerce Cloud AuthToken."
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Add Address to Customer Account",
							"item": [
								{
									"name": "00. Retrieve Service Cloud AuthToken",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "12f5cbc7-330d-4cb0-91aa-8b6f5044172b",
												"exec": [
													"",
													"// Clear the contents of the Service Cloud last-case processed environment variable",
													"pm.environment.unset(\"sfscLastCaseRecordId\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a5010dd8-7f42-47b3-bb6c-cac62d262b98",
												"exec": [
													"// Parse the JSON response",
													"var parsedResponse = JSON.parse(responseBody);",
													"",
													"// Check if the parsedResponse has an access-token key",
													"if (parsedResponse.hasOwnProperty('access_token')) {",
													"    ",
													"    // If an access-token exists, then set it as part of the environment",
													"    postman.setEnvironmentVariable('sfscAuthToken', parsedResponse.access_token);",
													"    ",
													"    // Write the serviceCloud Url based on the instance_url in the response",
													"    postman.setEnvironmentVariable('serviceCloudUrl', parsedResponse.instance_url);",
													"    ",
													"}",
													"",
													"// Execute a test to validate that the access-token exists",
													"pm.test(\"StatusCode is 200.\", function () {",
													"    pm.expect(responseCode.code === 200).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that we've received a response",
													"pm.test(\"Response is not empty.\", function () {",
													"    pm.expect(responseBody.length > 0).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that the response provided is JSON",
													"pm.test(\"Response is JSON.\", function () {",
													"    pm.expect(parsedResponse !== null).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that the access-token exists",
													"pm.test(\"Service Cloud AuthToken response contains an access token.\", function () {",
													"    pm.expect(parsedResponse.hasOwnProperty('access_token')).to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"description": "... represents the content-type of the request",
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{authTokenUrl}}/services/oauth2/token?grant_type=password&client_id={{sfscConsumerKey}}&client_secret={{sfscConsumerSecret}}&username={{sfscUsername}}&password={{sfscPassword}}{{sfscSecurityToken}}",
											"protocol": "https",
											"host": [
												"{{authTokenUrl}}"
											],
											"path": [
												"services",
												"oauth2",
												"token"
											],
											"query": [
												{
													"key": "grant_type",
													"value": "password",
													"description": "... represents the grant-type to be performed"
												},
												{
													"key": "client_id",
													"value": "{{sfscConsumerKey}}",
													"description": "... identifies the clientId associated to the SCC Integration User account"
												},
												{
													"key": "client_secret",
													"value": "{{sfscConsumerSecret}}",
													"description": "... identifies the clientSecret associated to the SCC Integration User account"
												},
												{
													"key": "username",
													"value": "{{sfscUsername}}",
													"description": "... identifies the username associated to the SCC Integration User account"
												},
												{
													"key": "password",
													"value": "{{sfscPassword}}{{sfscSecurityToken}}",
													"description": "... represents the password + securityToken associated to the SCC Integration User account"
												}
											]
										},
										"description": "... this request is used to confirm that a REST access token can be retrieve using the credentials and security token associated to the SCC Integration User.  This request leverages the Salesforce grant-type of \"password\".  A successful request will generate an access token of token_type \"Bearer\" that must be attached to all subsequent REST interactions (ex. creating cases, accounts, and orders).\n- For details on this request-type, please visit https://help.salesforce.com/articleView?id=remoteaccess_oauth_username_password_flow.htm&type=5.\n- Once the bearer token has been generated, please update the Authorization tab in the parent project folder to include the generated Bearer token."
									},
									"response": []
								},
								{
									"name": "01. Retrieve Commerce Cloud AuthToken",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "86c21dc4-46c9-4da9-8a77-bb21288a428e",
												"exec": [
													"",
													"// Build the credential string by concatenating the username, password, and clientSecret",
													"credentialString = pm.environment.get(\"sfccUsername\") + ':' + pm.environment.get(\"sfccPassword\") + ':' + pm.environment.get(\"sfccClientSecret\");",
													"",
													"// Encrypt the credential string to base64",
													"rawCredential = CryptoJS.enc.Utf8.parse(credentialString);",
													"encodedCredential = CryptoJS.enc.Base64.stringify(rawCredential);",
													"",
													"// Set the environment variable representing the credential",
													"pm.environment.set(\"sfccUserCredential\", encodedCredential);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "0dc132c9-2c32-41b5-b224-9fb1f872cdc3",
												"exec": [
													"",
													"// Parse the response data",
													"var parsedResponse = JSON.parse(responseBody);",
													"",
													"// Execute a test to validate that the access-token exists",
													"pm.test(\"StatusCode is 200.\", function () {",
													"    pm.expect(responseCode.code === 200).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that we've received a response",
													"pm.test(\"Response is not empty.\", function () {",
													"    pm.expect(responseBody.length > 0).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that the response provided is JSON",
													"pm.test(\"Response is JSON.\", function () {",
													"    pm.expect(parsedResponse !== null).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that the response contains the properties expected.",
													"pm.test(\"Response is well-formed and contains the access_token property.\", function () {",
													"    pm.expect(parsedResponse.hasOwnProperty('access_token')).to.be.true;",
													"    pm.expect(parsedResponse.hasOwnProperty('expires_in')).to.be.true;",
													"    pm.expect(parsedResponse.hasOwnProperty('token_type')).to.be.true;",
													"});",
													"",
													"// Check if the parsedResponse has an access-token key",
													"if (parsedResponse.hasOwnProperty('access_token')) {",
													"    ",
													"    // If an access-token exists, then set it as part of the environment",
													"    postman.setEnvironmentVariable('sfccAuthToken', parsedResponse.access_token);",
													"",
													"} "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Basic {{sfccUserCredential}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "grant_type=urn:demandware:params:oauth:grant-type:client-id:dwsid:dwsecuretoken"
										},
										"url": {
											"raw": "{{sfccOAuth2Url}}?client_id={{sfccClientId}}",
											"host": [
												"{{sfccOAuth2Url}}"
											],
											"query": [
												{
													"key": "client_id",
													"value": "{{sfccClientId}}"
												}
											]
										},
										"description": "... retrieves an authToken for a Salesforce B2C Commerce Business Manager user.  The request will encode the username:password:clientSecret via Base64 and seed the encoded string via the sfccUserCredential environment property.  This encoded string is then used to request the authToken."
									},
									"response": []
								},
								{
									"name": "02. Verify Customer Account Exists in B2C Commerce",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6509dc87-d8cb-4c46-8bfa-b053da2d1364",
												"exec": [
													"// Parse the JSON response",
													"var parsedResponse = JSON.parse(responseBody);",
													"",
													"// Execute a test to validate that the access-token exists",
													"pm.test(\"StatusCode is 200.\", function () {",
													"    pm.expect(responseCode.code === 200).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that we've received a response",
													"pm.test(\"Response is not empty.\", function () {",
													"    pm.expect(responseBody.length > 0).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that the response provided is JSON",
													"pm.test(\"Response is JSON.\", function () {",
													"    pm.expect(parsedResponse !== null).to.be.true;",
													"});",
													"",
													"pm.test(\"Response is of type 'customer_search_result'.\", function() {",
													"    pm.expect(parsedResponse._type).to.be.equal('customer_search_result');    ",
													"});",
													"",
													"pm.test(\"Response returned at least one search result.\", function() {",
													"    pm.expect(parsedResponse.hits.length).to.be.at.least(1);    ",
													"});",
													"",
													"// Only evaluate the search hits if we have at least one (1) result",
													"if (parsedResponse.hits.length > 0) {",
													"    ",
													"    // Default the customer-found flag",
													"    var customerFound = false;",
													"    ",
													"    // Loop over the collection fo search hits returned by the response",
													"    for (var hitIndex = 0; hitIndex < parsedResponse.hits.length; hitIndex++) {",
													"        ",
													"        // Create a reference to the current search hit",
													"        var thisSearchHit = parsedResponse.hits[hitIndex];",
													"        ",
													"        // Check if we've found the customer number in the search results",
													"        if (thisSearchHit.data.customer_no === pm.environment.get('sfccCustomerNo')) {",
													"            customerFound = true;",
													"        }",
													"",
													"    }",
													"    ",
													"    pm.test(\"Verified that the customer number was found in the Salesforce B2C Commerce environment.\", function() {",
													"        pm.expect(customerFound).to.be.at.true;    ",
													"    });",
													"    ",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{sfccAuthToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n     \"query\" : \n     {\n        \"text_query\": { \"fields\": [\"credentials.login\"], \"search_phrase\":\"{{sfccCustomerEmail}}\" }\n     }\n}"
										},
										"url": {
											"raw": "{{sfccDataUrl}}/customer_lists/{{sfccCustomerListId}}/customer_search",
											"host": [
												"{{sfccDataUrl}}"
											],
											"path": [
												"customer_lists",
												"{{sfccCustomerListId}}",
												"customer_search"
											]
										},
										"description": "... this request attempts to verify that the test-customer exists in Salesforce B2C Commerce prior to working with that customer."
									},
									"response": []
								},
								{
									"name": "03. Register Customer Account",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fcf74074-63d5-42d8-8eda-78aba4283728",
												"exec": [
													"// Parse the JSON response",
													"var parsedResponse = JSON.parse(responseBody);",
													"",
													"// Execute a test to validate that the access-token exists",
													"pm.test(\"StatusCode is 200.\", function () {",
													"    pm.expect(responseCode.code === 200).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that we've received a response",
													"pm.test(\"Response is not empty.\", function () {",
													"    pm.expect(responseBody.length > 0).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that the response provided is JSON",
													"pm.test(\"Response is JSON.\", function () {",
													"    pm.expect(parsedResponse !== null).to.be.true;",
													"});",
													"",
													"pm.test(\"Service Cloud returned a valid account object response.\", function () {",
													"    pm.expect(parsedResponse.hasOwnProperty('objectType')).to.be.true;",
													"    pm.expect(parsedResponse.hasOwnProperty('recordId')).to.be.true;",
													"    pm.expect(parsedResponse.hasOwnProperty('errors')).to.be.true;",
													"});",
													"",
													"pm.test(\"The response object was of type 'Account'.\", function () {",
													"    pm.expect(parsedResponse.objectType).to.not.equal(null);    ",
													"    pm.expect(parsedResponse.objectType).to.equal('Account');",
													"});",
													"",
													"pm.test(\"The response object contains a valid recordId.\", function () {",
													"    pm.expect(parsedResponse.recordId).to.not.equal(null);",
													"});",
													"",
													"pm.test(\"The response object does not contain any errors.\", function () {",
													"    pm.expect(parsedResponse.errors).to.equal(null);",
													"});",
													"",
													"// Validate that the Account was successfully created",
													"if (parsedResponse.hasOwnProperty('recordId') && parsedResponse.recordId !== null) {",
													"    ",
													"    // Initialize the header object",
													"    var Header = require('postman-collection').Header;",
													"    ",
													"    // Initialize the request options",
													"    var options = { ",
													"        method: 'GET',",
													"        header: [] ",
													"    };",
													"    ",
													"    // Build out the environment url for this request",
													"    options.url = pm.environment.get('serviceCloudUrl') + '/services/apexrest/Contact/Registration/' + parsedResponse.recordId;",
													"    ",
													"    // Add the headers to the request definition",
													"    options.header.push(new Header({key: 'Content-Type', value: 'application/json'}));",
													"    options.header.push({key: 'Authorization', value: 'Bearer ' + pm.environment.get('sfscAuthToken')});",
													"",
													"    // Invoke the request",
													"    pm.sendRequest(options, function (error, response) {",
													"    ",
													"        // Throw an error if one is caught",
													"        if (error) throw new Error(error);",
													"",
													"        // Convert the response to JSON",
													"        responseJSON = response.json();",
													"",
													"        pm.test(\"Verify the customer is created in Service Cloud.\", function () {",
													"            pm.expect(responseJSON.length).to.equal(1);",
													"            pm.expect(responseJSON[0]['Id']).to.equal(parsedResponse.recordId);",
													"        });    ",
													"",
													"        // Record the AccountId for the registered user",
													"        pm.environment.set('tmpAccountId', parsedResponse.recordId);",
													"",
													"    });",
													"",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{sfscAuthToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"description": "... represents the content-type of the request.",
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"first_name\":\"{{sfccCustomerFirstName}}\",\n\t\"last_name\":\"{{sfccCustomerLastName}}\",\n\t\"email\":\"{{sfccCustomerEmail}}\",\n\t\"customer_id\":\"{{sfccCustomerId}}\",\n\t\"customer_no\":\"{{sfccCustomerNo}}\"\n}"
										},
										"url": {
											"raw": "{{serviceCloudUrl}}/services/apexrest/Contact/Registration",
											"host": [
												"{{serviceCloudUrl}}"
											],
											"path": [
												"services",
												"apexrest",
												"Contact",
												"Registration"
											]
										},
										"description": "... this request will create a customer as a Person Account in the specified Service Cloud Instance.  As a pre-requisite, please ensure that this user has been created and exists in your Salesforce B2C Commerce instance prior to attempting to create the account record in Service Cloud."
									},
									"response": []
								},
								{
									"name": "04. Delete a Customer Address",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f25e99dd-f1ca-4c51-a04e-35681f538642",
												"exec": [
													"// Execute a test to validate that the access-token exists",
													"pm.test(\"StatusCode is 204.\", function () {",
													"    pm.expect(responseCode.code).to.equal(204);",
													"});",
													"",
													"// Execute a test to validate that we've received a response",
													"pm.test(\"Response is empty.\", function () {",
													"    pm.expect(responseBody.length === 0).to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{sfccAuthToken}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "x-dw-client-id",
												"value": "{{clientid}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{sfccShopUrl}}/customers/{{sfccCustomerId}}/addresses/{{sfccCustomerAddressName}}",
											"host": [
												"{{sfccShopUrl}}"
											],
											"path": [
												"customers",
												"{{sfccCustomerId}}",
												"addresses",
												"{{sfccCustomerAddressName}}"
											]
										},
										"description": "... removes an address from an existing custom.  Please update the sfccCustomerAddressName environment variable with the identifier representing the customer address that will be deleted."
									},
									"response": []
								},
								{
									"name": "05. Create a New Customer Address",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f25e99dd-f1ca-4c51-a04e-35681f538642",
												"exec": [
													"",
													"// Parse the response data",
													"var parsedResponse = JSON.parse(responseBody);",
													"",
													"// Execute a test to validate that the access-token exists",
													"pm.test(\"StatusCode is 200.\", function () {",
													"    pm.expect(responseCode.code === 200).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that we've received a response",
													"pm.test(\"Response is not empty.\", function () {",
													"    pm.expect(responseBody.length > 0).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that the response provided is JSON",
													"pm.test(\"Response is JSON.\", function () {",
													"    pm.expect(parsedResponse !== null).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that the response-type is correct",
													"pm.test(\"Response type is 'customer_address_result.\", function () {",
													"    pm.expect(parsedResponse['_type']).to.equal('customer_address');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{sfccAuthToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "x-dw-client-id",
												"value": "{{clientid}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"address_id\": \"{{sfccCustomerAddressName}}\",\n  \"address1\" : \"555 Costanza Lane\",\n  \"address2\" : \"Apt. 902\",\n  \"city\" : \"New York\",\n  \"company_name\" : \"Vandelay Industries\",\n  \"country_code\" : \"US\",\n  \"first_name\": \"Jerry\",\n  \"job_title\" : \"Actor / Comedian\",\n  \"last_name\" : \"Seinfeld\",\n  \"phone\" : \"555-555-1212\",\n  \"postal_code\" : \"55555\",\n  \"preferred\" : false,\n  \"salutation\" : \"Mr.\",\n  \"state_code\": \"NY\"\n}"
										},
										"url": {
											"raw": "{{sfccShopUrl}}/customers/{{sfccCustomerId}}/addresses",
											"host": [
												"{{sfccShopUrl}}"
											],
											"path": [
												"customers",
												"{{sfccCustomerId}}",
												"addresses"
											]
										},
										"description": "... creates a new address for a given customer.  Please update the sfccCustomerId environment variable with with identifier representing the customer whose details are to be retrieved."
									},
									"response": []
								},
								{
									"name": "06. Update Customer Account",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "4015febb-3393-4041-9226-743d210569a4",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f542a683-7d1c-4cef-a10c-7e8f0a645d04",
												"exec": [
													"// Parse the JSON response",
													"var parsedResponse = JSON.parse(responseBody);",
													"",
													"// Execute a test to validate that the access-token exists",
													"pm.test(\"StatusCode is 200.\", function () {",
													"    pm.expect(responseCode.code === 200).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that we've received a response",
													"pm.test(\"Response is not empty.\", function () {",
													"    pm.expect(responseBody.length > 0).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that the response provided is JSON",
													"pm.test(\"Response is JSON.\", function () {",
													"    pm.expect(parsedResponse !== null).to.be.true;",
													"});",
													"",
													"pm.test(\"Service Cloud returned a valid account object response.\", function () {",
													"    pm.expect(parsedResponse.hasOwnProperty('objectType')).to.be.true;",
													"    pm.expect(parsedResponse.hasOwnProperty('recordId')).to.be.true;",
													"    pm.expect(parsedResponse.hasOwnProperty('errors')).to.be.true;",
													"});",
													"",
													"pm.test(\"The response object was of type 'Account'.\", function () {",
													"    pm.expect(parsedResponse.objectType).to.not.equal(null);    ",
													"    pm.expect(parsedResponse.objectType).to.equal('Account');",
													"});",
													"",
													"pm.test(\"The response object contains a valid recordId.\", function () {",
													"    pm.expect(parsedResponse.recordId).to.not.equal(null);",
													"});",
													"",
													"pm.test(\"The response object does not contain any errors.\", function () {",
													"    pm.expect(parsedResponse.errors).to.equal(null);",
													"});",
													"",
													"// Validate that the Account was successfully created",
													"if (parsedResponse.hasOwnProperty('recordId') && parsedResponse.recordId !== null) {",
													"    ",
													"    // Give the future-handler time to process",
													"    setTimeout(function(){    ",
													"    ",
													"        // Initialize the header object",
													"        var Header = require('postman-collection').Header;",
													"        ",
													"        // Initialize the request options",
													"        var options = { ",
													"            method: 'GET',",
													"            header: [] ",
													"        };",
													"        ",
													"        // Build out the environment url for this request",
													"        options.url = pm.environment.get('serviceCloudUrl') + '/services/apexrest/Contact/Registration/' + parsedResponse.recordId;",
													"        ",
													"        // Add the headers to the request definition",
													"        options.header.push(new Header({key: 'Content-Type', value: 'application/json'}));",
													"        options.header.push({key: 'Authorization', value: 'Bearer ' + pm.environment.get('sfscAuthToken')});",
													"    ",
													"        // Invoke the request",
													"        pm.sendRequest(options, function (error, response) {",
													"        ",
													"            // Throw an error if one is caught",
													"            if (error) throw new Error(error);",
													"    ",
													"            // Convert the response to JSON",
													"            responseJSON = response.json();",
													"    ",
													"            pm.test(\"Verify the customer is found in Service Cloud.\", function () {",
													"                pm.expect(responseJSON.length).to.equal(1);",
													"                pm.expect(responseJSON[0]['Id']).to.equal(parsedResponse.recordId);",
													"            });    ",
													"    ",
													"        });",
													"",
													"    }, pm.environment.get('postRequestDelay'));",
													"",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{sfscAuthToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"description": "... represents the content-type of the request.",
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"first_name\":\"{{tmpCustomerFirstName}}\",\n\t\"last_name\":\"{{tmpCustomerLastName}}\",\n\t\"email\":\"{{sfccCustomerEmail}}\",\n\t\"customer_id\":\"{{sfccCustomerId}}\",\n\t\"customer_no\":\"{{sfccCustomerNo}}\"\n}"
										},
										"url": {
											"raw": "{{serviceCloudUrl}}/services/apexrest/Contact/Registration",
											"host": [
												"{{serviceCloudUrl}}"
											],
											"path": [
												"services",
												"apexrest",
												"Contact",
												"Registration"
											]
										},
										"description": "... this request will attempt to update the properties of a registered customer account by changing the firstname and lastname of the customer via the request."
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b933bbb0-c6a1-472c-b7f5-592d4896d09c",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "7ccc3c90-cb97-4c83-b283-65bee2beb853",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Update Address on Customer Account",
							"item": [
								{
									"name": "00. Retrieve Service Cloud AuthToken",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "12f5cbc7-330d-4cb0-91aa-8b6f5044172b",
												"exec": [
													"",
													"// Clear the contents of the Service Cloud last-case processed environment variable",
													"pm.environment.unset(\"sfscLastCaseRecordId\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a5010dd8-7f42-47b3-bb6c-cac62d262b98",
												"exec": [
													"// Parse the JSON response",
													"var parsedResponse = JSON.parse(responseBody);",
													"",
													"// Check if the parsedResponse has an access-token key",
													"if (parsedResponse.hasOwnProperty('access_token')) {",
													"    ",
													"    // If an access-token exists, then set it as part of the environment",
													"    postman.setEnvironmentVariable('sfscAuthToken', parsedResponse.access_token);",
													"    ",
													"    // Write the serviceCloud Url based on the instance_url in the response",
													"    postman.setEnvironmentVariable('serviceCloudUrl', parsedResponse.instance_url);",
													"    ",
													"}",
													"",
													"// Execute a test to validate that the access-token exists",
													"pm.test(\"StatusCode is 200.\", function () {",
													"    pm.expect(responseCode.code === 200).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that we've received a response",
													"pm.test(\"Response is not empty.\", function () {",
													"    pm.expect(responseBody.length > 0).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that the response provided is JSON",
													"pm.test(\"Response is JSON.\", function () {",
													"    pm.expect(parsedResponse !== null).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that the access-token exists",
													"pm.test(\"Service Cloud AuthToken response contains an access token.\", function () {",
													"    pm.expect(parsedResponse.hasOwnProperty('access_token')).to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"description": "... represents the content-type of the request",
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{authTokenUrl}}/services/oauth2/token?grant_type=password&client_id={{sfscConsumerKey}}&client_secret={{sfscConsumerSecret}}&username={{sfscUsername}}&password={{sfscPassword}}{{sfscSecurityToken}}",
											"protocol": "https",
											"host": [
												"{{authTokenUrl}}"
											],
											"path": [
												"services",
												"oauth2",
												"token"
											],
											"query": [
												{
													"key": "grant_type",
													"value": "password",
													"description": "... represents the grant-type to be performed"
												},
												{
													"key": "client_id",
													"value": "{{sfscConsumerKey}}",
													"description": "... identifies the clientId associated to the SCC Integration User account"
												},
												{
													"key": "client_secret",
													"value": "{{sfscConsumerSecret}}",
													"description": "... identifies the clientSecret associated to the SCC Integration User account"
												},
												{
													"key": "username",
													"value": "{{sfscUsername}}",
													"description": "... identifies the username associated to the SCC Integration User account"
												},
												{
													"key": "password",
													"value": "{{sfscPassword}}{{sfscSecurityToken}}",
													"description": "... represents the password + securityToken associated to the SCC Integration User account"
												}
											]
										},
										"description": "... this request is used to confirm that a REST access token can be retrieve using the credentials and security token associated to the SCC Integration User.  This request leverages the Salesforce grant-type of \"password\".  A successful request will generate an access token of token_type \"Bearer\" that must be attached to all subsequent REST interactions (ex. creating cases, accounts, and orders).\n- For details on this request-type, please visit https://help.salesforce.com/articleView?id=remoteaccess_oauth_username_password_flow.htm&type=5.\n- Once the bearer token has been generated, please update the Authorization tab in the parent project folder to include the generated Bearer token."
									},
									"response": []
								},
								{
									"name": "01. Retrieve Commerce Cloud AuthToken",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "86c21dc4-46c9-4da9-8a77-bb21288a428e",
												"exec": [
													"",
													"// Build the credential string by concatenating the username, password, and clientSecret",
													"credentialString = pm.environment.get(\"sfccUsername\") + ':' + pm.environment.get(\"sfccPassword\") + ':' + pm.environment.get(\"sfccClientSecret\");",
													"",
													"// Encrypt the credential string to base64",
													"rawCredential = CryptoJS.enc.Utf8.parse(credentialString);",
													"encodedCredential = CryptoJS.enc.Base64.stringify(rawCredential);",
													"",
													"// Set the environment variable representing the credential",
													"pm.environment.set(\"sfccUserCredential\", encodedCredential);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "0dc132c9-2c32-41b5-b224-9fb1f872cdc3",
												"exec": [
													"",
													"// Parse the response data",
													"var parsedResponse = JSON.parse(responseBody);",
													"",
													"// Execute a test to validate that the access-token exists",
													"pm.test(\"StatusCode is 200.\", function () {",
													"    pm.expect(responseCode.code === 200).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that we've received a response",
													"pm.test(\"Response is not empty.\", function () {",
													"    pm.expect(responseBody.length > 0).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that the response provided is JSON",
													"pm.test(\"Response is JSON.\", function () {",
													"    pm.expect(parsedResponse !== null).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that the response contains the properties expected.",
													"pm.test(\"Response is well-formed and contains the access_token property.\", function () {",
													"    pm.expect(parsedResponse.hasOwnProperty('access_token')).to.be.true;",
													"    pm.expect(parsedResponse.hasOwnProperty('expires_in')).to.be.true;",
													"    pm.expect(parsedResponse.hasOwnProperty('token_type')).to.be.true;",
													"});",
													"",
													"// Check if the parsedResponse has an access-token key",
													"if (parsedResponse.hasOwnProperty('access_token')) {",
													"    ",
													"    // If an access-token exists, then set it as part of the environment",
													"    postman.setEnvironmentVariable('sfccAuthToken', parsedResponse.access_token);",
													"",
													"} "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Basic {{sfccUserCredential}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "grant_type=urn:demandware:params:oauth:grant-type:client-id:dwsid:dwsecuretoken"
										},
										"url": {
											"raw": "{{sfccOAuth2Url}}?client_id={{sfccClientId}}",
											"host": [
												"{{sfccOAuth2Url}}"
											],
											"query": [
												{
													"key": "client_id",
													"value": "{{sfccClientId}}"
												}
											]
										},
										"description": "... retrieves an authToken for a Salesforce B2C Commerce Business Manager user.  The request will encode the username:password:clientSecret via Base64 and seed the encoded string via the sfccUserCredential environment property.  This encoded string is then used to request the authToken."
									},
									"response": []
								},
								{
									"name": "02. Verify Customer Account Exists in B2C Commerce",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6509dc87-d8cb-4c46-8bfa-b053da2d1364",
												"exec": [
													"// Parse the JSON response",
													"var parsedResponse = JSON.parse(responseBody);",
													"",
													"// Execute a test to validate that the access-token exists",
													"pm.test(\"StatusCode is 200.\", function () {",
													"    pm.expect(responseCode.code === 200).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that we've received a response",
													"pm.test(\"Response is not empty.\", function () {",
													"    pm.expect(responseBody.length > 0).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that the response provided is JSON",
													"pm.test(\"Response is JSON.\", function () {",
													"    pm.expect(parsedResponse !== null).to.be.true;",
													"});",
													"",
													"pm.test(\"Response is of type 'customer_search_result'.\", function() {",
													"    pm.expect(parsedResponse._type).to.be.equal('customer_search_result');    ",
													"});",
													"",
													"pm.test(\"Response returned at least one search result.\", function() {",
													"    pm.expect(parsedResponse.hits.length).to.be.at.least(1);    ",
													"});",
													"",
													"// Only evaluate the search hits if we have at least one (1) result",
													"if (parsedResponse.hits.length > 0) {",
													"    ",
													"    // Default the customer-found flag",
													"    var customerFound = false;",
													"    ",
													"    // Loop over the collection fo search hits returned by the response",
													"    for (var hitIndex = 0; hitIndex < parsedResponse.hits.length; hitIndex++) {",
													"        ",
													"        // Create a reference to the current search hit",
													"        var thisSearchHit = parsedResponse.hits[hitIndex];",
													"        ",
													"        // Check if we've found the customer number in the search results",
													"        if (thisSearchHit.data.customer_no === pm.environment.get('sfccCustomerNo')) {",
													"            customerFound = true;",
													"        }",
													"",
													"    }",
													"    ",
													"    pm.test(\"Verified that the customer number was found in the Salesforce B2C Commerce environment.\", function() {",
													"        pm.expect(customerFound).to.be.at.true;    ",
													"    });",
													"    ",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{sfccAuthToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n     \"query\" : \n     {\n        \"text_query\": { \"fields\": [\"credentials.login\"], \"search_phrase\":\"{{sfccCustomerEmail}}\" }\n     }\n}"
										},
										"url": {
											"raw": "{{sfccDataUrl}}/customer_lists/{{sfccCustomerListId}}/customer_search",
											"host": [
												"{{sfccDataUrl}}"
											],
											"path": [
												"customer_lists",
												"{{sfccCustomerListId}}",
												"customer_search"
											]
										},
										"description": "... this request attempts to verify that the test-customer exists in Salesforce B2C Commerce prior to working with that customer."
									},
									"response": []
								},
								{
									"name": "02. Delete a Customer Address",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f25e99dd-f1ca-4c51-a04e-35681f538642",
												"exec": [
													"// Execute a test to validate that the access-token exists",
													"pm.test(\"StatusCode is 204.\", function () {",
													"    pm.expect(responseCode.code).to.equal(204);",
													"});",
													"",
													"// Execute a test to validate that we've received a response",
													"pm.test(\"Response is empty.\", function () {",
													"    pm.expect(responseBody.length === 0).to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{sfccAuthToken}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "x-dw-client-id",
												"value": "{{clientid}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{sfccShopUrl}}/customers/{{sfccCustomerId}}/addresses/{{sfccCustomerAddressName}}",
											"host": [
												"{{sfccShopUrl}}"
											],
											"path": [
												"customers",
												"{{sfccCustomerId}}",
												"addresses",
												"{{sfccCustomerAddressName}}"
											]
										},
										"description": "... removes an address from an existing custom.  Please update the sfccCustomerAddressName environment variable with the identifier representing the customer address that will be deleted."
									},
									"response": []
								},
								{
									"name": "03. Create a New Customer Address",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f25e99dd-f1ca-4c51-a04e-35681f538642",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{sfccAuthToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "x-dw-client-id",
												"value": "{{clientid}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"address_id\": \"{{sfccCustomerAddressName}}\",\n  \"address1\" : \"555 Costanza Lane\",\n  \"address2\" : \"Apt. 902\",\n  \"city\" : \"New York\",\n  \"company_name\" : \"Vandelay Industries\",\n  \"country_code\" : \"US\",\n  \"first_name\": \"Jerry\",\n  \"job_title\" : \"Actor / Comedian\",\n  \"last_name\" : \"Seinfeld\",\n  \"phone\" : \"555-555-1212\",\n  \"postal_code\" : \"55555\",\n  \"preferred\" : false,\n  \"salutation\" : \"Mr.\",\n  \"state_code\": \"NY\"\n}"
										},
										"url": {
											"raw": "{{sfccShopUrl}}/customers/{{sfccCustomerId}}/addresses",
											"host": [
												"{{sfccShopUrl}}"
											],
											"path": [
												"customers",
												"{{sfccCustomerId}}",
												"addresses"
											]
										},
										"description": "... creates a new address for a given customer.  Please update the sfccCustomerId environment variable with the identifier describing the Salesforce B2C Commerce customer whose address will be created."
									},
									"response": []
								},
								{
									"name": "04. Register Customer Account",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fcf74074-63d5-42d8-8eda-78aba4283728",
												"exec": [
													"// Parse the JSON response",
													"var parsedResponse = JSON.parse(responseBody);",
													"",
													"// Execute a test to validate that the access-token exists",
													"pm.test(\"StatusCode is 200.\", function () {",
													"    pm.expect(responseCode.code === 200).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that we've received a response",
													"pm.test(\"Response is not empty.\", function () {",
													"    pm.expect(responseBody.length > 0).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that the response provided is JSON",
													"pm.test(\"Response is JSON.\", function () {",
													"    pm.expect(parsedResponse !== null).to.be.true;",
													"});",
													"",
													"pm.test(\"Service Cloud returned a valid account object response.\", function () {",
													"    pm.expect(parsedResponse.hasOwnProperty('objectType')).to.be.true;",
													"    pm.expect(parsedResponse.hasOwnProperty('recordId')).to.be.true;",
													"    pm.expect(parsedResponse.hasOwnProperty('errors')).to.be.true;",
													"});",
													"",
													"pm.test(\"The response object was of type 'Account'.\", function () {",
													"    pm.expect(parsedResponse.objectType).to.not.equal(null);    ",
													"    pm.expect(parsedResponse.objectType).to.equal('Account');",
													"});",
													"",
													"pm.test(\"The response object contains a valid recordId.\", function () {",
													"    pm.expect(parsedResponse.recordId).to.not.equal(null);",
													"});",
													"",
													"pm.test(\"The response object does not contain any errors.\", function () {",
													"    pm.expect(parsedResponse.errors).to.equal(null);",
													"});",
													"",
													"// Validate that the Account was successfully created",
													"if (parsedResponse.hasOwnProperty('recordId') && parsedResponse.recordId !== null) {",
													"    ",
													"    // Give the future-handler time to process",
													"    setTimeout(function(){    ",
													"    ",
													"        // Initialize the header object",
													"        var Header = require('postman-collection').Header;",
													"        ",
													"        // Initialize the request options",
													"        var options = { ",
													"            method: 'GET',",
													"            header: [] ",
													"        };",
													"        ",
													"        // Build out the environment url for this request",
													"        options.url = pm.environment.get('serviceCloudUrl') + '/services/apexrest/Contact/Registration/' + parsedResponse.recordId;",
													"        ",
													"        // Add the headers to the request definition",
													"        options.header.push(new Header({key: 'Content-Type', value: 'application/json'}));",
													"        options.header.push({key: 'Authorization', value: 'Bearer ' + pm.environment.get('sfscAuthToken')});",
													"    ",
													"        // Invoke the request",
													"        pm.sendRequest(options, function (error, response) {",
													"        ",
													"            // Throw an error if one is caught",
													"            if (error) throw new Error(error);",
													"    ",
													"            // Convert the response to JSON",
													"            responseJSON = response.json();",
													"    ",
													"            pm.test(\"Verify the customer is created in Service Cloud.\", function () {",
													"                pm.expect(responseJSON.length).to.equal(1);",
													"                pm.expect(responseJSON[0]['Id']).to.equal(parsedResponse.recordId);",
													"            });    ",
													"    ",
													"            // Record the AccountId for the registered user",
													"            pm.environment.set('tmpAccountId', parsedResponse.recordId);",
													"    ",
													"        });",
													"",
													"    }, pm.environment.get('postRequestDelay'));",
													"",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{sfscAuthToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"description": "... represents the content-type of the request.",
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"first_name\":\"{{sfccCustomerFirstName}}\",\n\t\"last_name\":\"{{sfccCustomerLastName}}\",\n\t\"email\":\"{{sfccCustomerEmail}}\",\n\t\"customer_id\":\"{{sfccCustomerId}}\",\n\t\"customer_no\":\"{{sfccCustomerNo}}\"\n}"
										},
										"url": {
											"raw": "{{serviceCloudUrl}}/services/apexrest/Contact/Registration",
											"host": [
												"{{serviceCloudUrl}}"
											],
											"path": [
												"services",
												"apexrest",
												"Contact",
												"Registration"
											]
										},
										"description": "... this request will create a customer as a Person Account in the specified Service Cloud Instance.  As a pre-requisite, please ensure that this user has been created and exists in your Salesforce B2C Commerce instance prior to attempting to create the account record in Service Cloud."
									},
									"response": []
								},
								{
									"name": "05. Update the Newly Created Address",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f25e99dd-f1ca-4c51-a04e-35681f538642",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{sfccAuthToken}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [
											{
												"key": "x-dw-client-id",
												"value": "{{clientid}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"address_id\": \"{{sfccCustomerAddressName}}\",\n  \"address1\" : \"555 Costanza Lane\",\n  \"address2\" : \"Apt. 555\",\n  \"city\" : \"New York\",\n  \"company_name\" : \"Vandelay Industries\",\n  \"country_code\" : \"US\",\n  \"first_name\": \"Jerry\",\n  \"job_title\" : \"Actor / Comedian\",\n  \"last_name\" : \"Seinfeld\",\n  \"phone\" : \"555-555-1212\",\n  \"postal_code\" : \"55555\",\n  \"preferred\" : false,\n  \"salutation\" : \"Mr.\",\n  \"state_code\": \"NY\"\n}"
										},
										"url": {
											"raw": "{{sfccShopUrl}}/customers/{{sfccCustomerId}}/addresses/{{sfccCustomerAddressName}}",
											"host": [
												"{{sfccShopUrl}}"
											],
											"path": [
												"customers",
												"{{sfccCustomerId}}",
												"addresses",
												"{{sfccCustomerAddressName}}"
											]
										},
										"description": "... modifies an existing address for a given customer.  Please update the sfccCustomerId environment variable with with identifier representing the customer owning the address book where the existing address will be modified.  Additionally, update the sfccCustomerAddressName with the name of the address being modified."
									},
									"response": []
								},
								{
									"name": "06. Update Customer Account",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "4015febb-3393-4041-9226-743d210569a4",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f542a683-7d1c-4cef-a10c-7e8f0a645d04",
												"exec": [
													"// Parse the JSON response",
													"var parsedResponse = JSON.parse(responseBody);",
													"",
													"// Execute a test to validate that the access-token exists",
													"pm.test(\"StatusCode is 200.\", function () {",
													"    pm.expect(responseCode.code === 200).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that we've received a response",
													"pm.test(\"Response is not empty.\", function () {",
													"    pm.expect(responseBody.length > 0).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that the response provided is JSON",
													"pm.test(\"Response is JSON.\", function () {",
													"    pm.expect(parsedResponse !== null).to.be.true;",
													"});",
													"",
													"pm.test(\"Service Cloud returned a valid account object response.\", function () {",
													"    pm.expect(parsedResponse.hasOwnProperty('objectType')).to.be.true;",
													"    pm.expect(parsedResponse.hasOwnProperty('recordId')).to.be.true;",
													"    pm.expect(parsedResponse.hasOwnProperty('errors')).to.be.true;",
													"});",
													"",
													"pm.test(\"The response object was of type 'Account'.\", function () {",
													"    pm.expect(parsedResponse.objectType).to.not.equal(null);    ",
													"    pm.expect(parsedResponse.objectType).to.equal('Account');",
													"});",
													"",
													"pm.test(\"The response object contains a valid recordId.\", function () {",
													"    pm.expect(parsedResponse.recordId).to.not.equal(null);",
													"});",
													"",
													"pm.test(\"The response object does not contain any errors.\", function () {",
													"    pm.expect(parsedResponse.errors).to.equal(null);",
													"});",
													"",
													"// Validate that the Account was successfully created",
													"if (parsedResponse.hasOwnProperty('recordId') && parsedResponse.recordId !== null) {",
													"    ",
													"    // Give the future-handler time to process",
													"    setTimeout(function(){      ",
													"    ",
													"        // Initialize the header object",
													"        var Header = require('postman-collection').Header;",
													"        ",
													"        // Initialize the request options",
													"        var options = { ",
													"            method: 'GET',",
													"            header: [] ",
													"        };",
													"        ",
													"        // Build out the environment url for this request",
													"        options.url = pm.environment.get('serviceCloudUrl') + '/services/apexrest/Contact/Registration/' + parsedResponse.recordId;",
													"        ",
													"        // Add the headers to the request definition",
													"        options.header.push(new Header({key: 'Content-Type', value: 'application/json'}));",
													"        options.header.push({key: 'Authorization', value: 'Bearer ' + pm.environment.get('sfscAuthToken')});",
													"    ",
													"        // Invoke the request",
													"        pm.sendRequest(options, function (error, response) {",
													"        ",
													"            // Throw an error if one is caught",
													"            if (error) throw new Error(error);",
													"    ",
													"            // Convert the response to JSON",
													"            responseJSON = response.json();",
													"    ",
													"            pm.test(\"Verify the customer is found in Service Cloud.\", function () {",
													"                pm.expect(responseJSON.length).to.equal(1);",
													"                pm.expect(responseJSON[0]['Id']).to.equal(parsedResponse.recordId);",
													"            });    ",
													"    ",
													"        });",
													"    ",
													"    }, pm.environment.get('postRequestDelay'));",
													"",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{sfscAuthToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"description": "... represents the content-type of the request.",
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"first_name\":\"{{tmpCustomerFirstName}}\",\n\t\"last_name\":\"{{tmpCustomerLastName}}\",\n\t\"email\":\"{{sfccCustomerEmail}}\",\n\t\"customer_id\":\"{{sfccCustomerId}}\",\n\t\"customer_no\":\"{{sfccCustomerNo}}\"\n}"
										},
										"url": {
											"raw": "{{serviceCloudUrl}}/services/apexrest/Contact/Registration",
											"host": [
												"{{serviceCloudUrl}}"
											],
											"path": [
												"services",
												"apexrest",
												"Contact",
												"Registration"
											]
										},
										"description": "... this request will attempt to update the properties of a registered customer account and trigger the retrieval of updated address information in Service Cloud."
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b933bbb0-c6a1-472c-b7f5-592d4896d09c",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "7ccc3c90-cb97-4c83-b283-65bee2beb853",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Batch Customer Processing",
							"item": [
								{
									"name": "00. Retrieve Service Cloud AuthToken",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "12f5cbc7-330d-4cb0-91aa-8b6f5044172b",
												"exec": [
													"",
													"// Clear the contents of the Service Cloud last-case processed environment variable",
													"pm.environment.unset(\"sfscLastCaseRecordId\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a5010dd8-7f42-47b3-bb6c-cac62d262b98",
												"exec": [
													"// Parse the JSON response",
													"var parsedResponse = JSON.parse(responseBody);",
													"",
													"// Check if the parsedResponse has an access-token key",
													"if (parsedResponse.hasOwnProperty('access_token')) {",
													"    ",
													"    // If an access-token exists, then set it as part of the environment",
													"    postman.setEnvironmentVariable('sfscAuthToken', parsedResponse.access_token);",
													"    ",
													"    // Write the serviceCloud Url based on the instance_url in the response",
													"    postman.setEnvironmentVariable('serviceCloudUrl', parsedResponse.instance_url);",
													"    ",
													"}",
													"",
													"// Execute a test to validate that the access-token exists",
													"pm.test(\"StatusCode is 200.\", function () {",
													"    pm.expect(responseCode.code === 200).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that we've received a response",
													"pm.test(\"Response is not empty.\", function () {",
													"    pm.expect(responseBody.length > 0).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that the response provided is JSON",
													"pm.test(\"Response is JSON.\", function () {",
													"    pm.expect(parsedResponse !== null).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that the access-token exists",
													"pm.test(\"Service Cloud AuthToken response contains an access token.\", function () {",
													"    pm.expect(parsedResponse.hasOwnProperty('access_token')).to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"description": "... represents the content-type of the request",
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{authTokenUrl}}/services/oauth2/token?grant_type=password&client_id={{sfscConsumerKey}}&client_secret={{sfscConsumerSecret}}&username={{sfscUsername}}&password={{sfscPassword}}{{sfscSecurityToken}}",
											"protocol": "https",
											"host": [
												"{{authTokenUrl}}"
											],
											"path": [
												"services",
												"oauth2",
												"token"
											],
											"query": [
												{
													"key": "grant_type",
													"value": "password",
													"description": "... represents the grant-type to be performed"
												},
												{
													"key": "client_id",
													"value": "{{sfscConsumerKey}}",
													"description": "... identifies the clientId associated to the SCC Integration User account"
												},
												{
													"key": "client_secret",
													"value": "{{sfscConsumerSecret}}",
													"description": "... identifies the clientSecret associated to the SCC Integration User account"
												},
												{
													"key": "username",
													"value": "{{sfscUsername}}",
													"description": "... identifies the username associated to the SCC Integration User account"
												},
												{
													"key": "password",
													"value": "{{sfscPassword}}{{sfscSecurityToken}}",
													"description": "... represents the password + securityToken associated to the SCC Integration User account"
												}
											]
										},
										"description": "... this request is used to confirm that a REST access token can be retrieve using the credentials and security token associated to the SCC Integration User.  This request leverages the Salesforce grant-type of \"password\".  A successful request will generate an access token of token_type \"Bearer\" that must be attached to all subsequent REST interactions (ex. creating cases, accounts, and orders).\n- For details on this request-type, please visit https://help.salesforce.com/articleView?id=remoteaccess_oauth_username_password_flow.htm&type=5.\n- Once the bearer token has been generated, please update the Authorization tab in the parent project folder to include the generated Bearer token."
									},
									"response": []
								},
								{
									"name": "01. Retrieve Commerce Cloud AuthToken",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "86c21dc4-46c9-4da9-8a77-bb21288a428e",
												"exec": [
													"",
													"// Build the credential string by concatenating the username, password, and clientSecret",
													"credentialString = pm.environment.get(\"sfccUsername\") + ':' + pm.environment.get(\"sfccPassword\") + ':' + pm.environment.get(\"sfccClientSecret\");",
													"",
													"// Encrypt the credential string to base64",
													"rawCredential = CryptoJS.enc.Utf8.parse(credentialString);",
													"encodedCredential = CryptoJS.enc.Base64.stringify(rawCredential);",
													"",
													"// Set the environment variable representing the credential",
													"pm.environment.set(\"sfccUserCredential\", encodedCredential);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "0dc132c9-2c32-41b5-b224-9fb1f872cdc3",
												"exec": [
													"",
													"// Parse the response data",
													"var parsedResponse = JSON.parse(responseBody);",
													"",
													"// Execute a test to validate that the access-token exists",
													"pm.test(\"StatusCode is 200.\", function () {",
													"    pm.expect(responseCode.code === 200).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that we've received a response",
													"pm.test(\"Response is not empty.\", function () {",
													"    pm.expect(responseBody.length > 0).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that the response provided is JSON",
													"pm.test(\"Response is JSON.\", function () {",
													"    pm.expect(parsedResponse !== null).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that the response contains the properties expected.",
													"pm.test(\"Response is well-formed and contains the access_token property.\", function () {",
													"    pm.expect(parsedResponse.hasOwnProperty('access_token')).to.be.true;",
													"    pm.expect(parsedResponse.hasOwnProperty('expires_in')).to.be.true;",
													"    pm.expect(parsedResponse.hasOwnProperty('token_type')).to.be.true;",
													"});",
													"",
													"// Check if the parsedResponse has an access-token key",
													"if (parsedResponse.hasOwnProperty('access_token')) {",
													"    ",
													"    // If an access-token exists, then set it as part of the environment",
													"    postman.setEnvironmentVariable('sfccAuthToken', parsedResponse.access_token);",
													"",
													"} "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Basic {{sfccUserCredential}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "grant_type=urn:demandware:params:oauth:grant-type:client-id:dwsid:dwsecuretoken"
										},
										"url": {
											"raw": "{{sfccOAuth2Url}}?client_id={{sfccClientId}}",
											"host": [
												"{{sfccOAuth2Url}}"
											],
											"query": [
												{
													"key": "client_id",
													"value": "{{sfccClientId}}"
												}
											]
										},
										"description": "... retrieves an authToken for a Salesforce B2C Commerce Business Manager user.  The request will encode the username:password:clientSecret via Base64 and seed the encoded string via the sfccUserCredential environment property.  This encoded string is then used to request the authToken."
									},
									"response": []
								},
								{
									"name": "02. Verify Customer Account Exists in Salesforce B2C Commerce",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6509dc87-d8cb-4c46-8bfa-b053da2d1364",
												"exec": [
													"// Parse the JSON response",
													"var parsedResponse = JSON.parse(responseBody);",
													"",
													"// Execute a test to validate that the access-token exists",
													"pm.test(\"StatusCode is 200.\", function () {",
													"    pm.expect(responseCode.code === 200).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that we've received a response",
													"pm.test(\"Response is not empty.\", function () {",
													"    pm.expect(responseBody.length > 0).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that the response provided is JSON",
													"pm.test(\"Response is JSON.\", function () {",
													"    pm.expect(parsedResponse !== null).to.be.true;",
													"});",
													"",
													"pm.test(\"Response is of type 'customer_search_result'.\", function() {",
													"    pm.expect(parsedResponse._type).to.be.equal('customer_search_result');    ",
													"});",
													"",
													"pm.test(\"Response returned at least one search result.\", function() {",
													"    pm.expect(parsedResponse.hits.length).to.be.at.least(1);    ",
													"});",
													"",
													"// Only evaluate the search hits if we have at least one (1) result",
													"if (parsedResponse.hits.length > 0) {",
													"    ",
													"    // Default the customer-found flag",
													"    var customerFound = false;",
													"    ",
													"    // Loop over the collection fo search hits returned by the response",
													"    for (var hitIndex = 0; hitIndex < parsedResponse.hits.length; hitIndex++) {",
													"        ",
													"        // Create a reference to the current search hit",
													"        var thisSearchHit = parsedResponse.hits[hitIndex];",
													"        ",
													"        // Check if we've found the customer number in the search results",
													"        if (thisSearchHit.data.customer_no === pm.environment.get('sfccCustomerNo')) {",
													"            customerFound = true;",
													"        }",
													"",
													"    }",
													"    ",
													"    pm.test(\"Verified that the customer number was found in the Salesforce B2C Commerce environment.\", function() {",
													"        pm.expect(customerFound).to.be.at.true;    ",
													"    });",
													"    ",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{sfccAuthToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n     \"query\" : \n     {\n        \"text_query\": { \"fields\": [\"credentials.login\"], \"search_phrase\":\"{{sfccCustomerEmail}}\" }\n     }\n}"
										},
										"url": {
											"raw": "{{sfccDataUrl}}/customer_lists/{{sfccCustomerListId}}/customer_search",
											"host": [
												"{{sfccDataUrl}}"
											],
											"path": [
												"customer_lists",
												"{{sfccCustomerListId}}",
												"customer_search"
											]
										},
										"description": "... this request attempts to verify that the test-customer exists in Salesforce B2C Commerce prior to working with that customer."
									},
									"response": []
								},
								{
									"name": "03. Register Customer Account via Batch",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a7fd9c00-7b3e-4d01-8e95-228f5d6c8961",
												"exec": [
													"// Parse the JSON response",
													"var parsedResponse = JSON.parse(responseBody);",
													"",
													"// Create a function to validate an Account was created in Service Cloud",
													"function validateAccountInServiceCloud(accountObject) {",
													"    ",
													"    // Initialize the header object",
													"    var Header = require('postman-collection').Header;",
													"    ",
													"    // Initialize the request options",
													"    var options = { ",
													"        method: 'GET',",
													"        header: [] ",
													"    };",
													"    ",
													"    // Build out the environment url for this request",
													"    options.url = pm.environment.get('serviceCloudUrl') + '/services/apexrest/Contact/Registration/' + accountObject.recordId;",
													"    ",
													"    // Add the headers to the request definition",
													"    options.header.push(new Header({key: 'Content-Type', value: 'application/json'}));",
													"    options.header.push({key: 'Authorization', value: 'Bearer ' + pm.environment.get('sfscAuthToken')});",
													"",
													"    // Invoke the request",
													"    pm.sendRequest(options, function (error, response) {",
													"    ",
													"        // Throw an error if one is caught",
													"        if (error) throw new Error(error);",
													"",
													"        // Convert the response to JSON",
													"        var responseJSON = response.json();",
													"        ",
													"        pm.test(\"Verify the order response for \" + accountObject.recordId + \" contains at least (1) item.\", function () {",
													"            pm.expect(responseJSON.length).to.equal(1);",
													"        });                     ",
													"        ",
													"        // Create a reference to the current account",
													"        var thisTestAccount = responseJSON[0];",
													"",
													"        pm.test(\"Verify the customer [\" + accountObject.recordId + \"] is created in Service Cloud.\", function () {",
													"            pm.expect(thisTestAccount.Id).to.equal(accountObject.recordId);",
													"        });    ",
													"",
													"    });",
													"    ",
													"    ",
													"}",
													"",
													"// Execute a test to validate that the access-token exists",
													"pm.test(\"StatusCode is 200.\", function () {",
													"    pm.expect(responseCode.code === 200).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that we've received a response",
													"pm.test(\"Response is not empty.\", function () {",
													"    pm.expect(responseBody.length > 0).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that the response provided is JSON",
													"pm.test(\"Response is JSON.\", function () {",
													"    pm.expect(parsedResponse !== null).to.be.true;",
													"});",
													"",
													"pm.test(\"Service Cloud returned at least one account.\", function () {",
													"    pm.expect(parsedResponse.length).of.at.least(1);",
													"});",
													"",
													"// Only process the validation results if at least one account was returned",
													"if (parsedResponse.length > 0) {",
													"",
													"    // Enable a deplay before attempting to validate each account",
													"    setTimeout( function() {",
													"    ",
													"        // Loop over the collection of parsed accounts",
													"        for (var accountIndex = 0; accountIndex < parsedResponse.length; accountIndex++) {",
													"            ",
													"            // Create a reference to the current account object",
													"            var thisAccount = parsedResponse[accountIndex];",
													"            ",
													"            pm.test(\"The response object was of type 'Account'.\", function () {",
													"                pm.expect(thisAccount.objectType).to.not.equal(null);    ",
													"                pm.expect(thisAccount.objectType).to.equal('Account');",
													"            });",
													"            ",
													"            pm.test(\"The response object contains a valid recordId.\", function () {",
													"                pm.expect(thisAccount.recordId).to.not.equal(null);",
													"            });",
													"            ",
													"            pm.test(\"The response object does not contain any errors.\", function () {",
													"                pm.expect(thisAccount.errors).to.equal(null);",
													"            }); ",
													"        ",
													"            // Validate that the Account was successfully created",
													"            if (thisAccount.hasOwnProperty('recordId') && thisAccount.recordId !== null) {",
													"                ",
													"                // Validate the Account exists in Service Cloud",
													"                validateAccountInServiceCloud(thisAccount)                ",
													"            ",
													"            }",
													"            ",
													"        }",
													"        ",
													"    }, pm.environment.get('postRequestDelay'));",
													"    ",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{sfscAuthToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"description": "... represents the content-type of the request.",
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n\t{\n\t\t\"first_name\":\"{{sfccCustomerFirstName}}\",\n\t\t\"last_name\":\"{{sfccCustomerLastName}}\",\n\t\t\"email\":\"{{sfccCustomerEmail}}\",\n\t\t\"customer_id\":\"{{sfccCustomerId}}\",\n\t\t\"customer_no\":\"{{sfccCustomerNo}}\"\n\t}\n]"
										},
										"url": {
											"raw": "{{serviceCloudUrl}}/services/apexrest/Contact/Registration/Batch",
											"host": [
												"{{serviceCloudUrl}}"
											],
											"path": [
												"services",
												"apexrest",
												"Contact",
												"Registration",
												"Batch"
											]
										},
										"description": "... this request can be used to register multiple customer accounts via the batch registration service (user definitions should exist in an array and leverage the same format as the singular Contact/Registration service).  As a pre-requisite, please ensure that these users have been created and exit in your Salesforce B2C Commerce instance prior to attempting to create the account records in Service Cloud."
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Order Processing",
					"item": [
						{
							"name": "Create Order for Anonymous Customer",
							"item": [
								{
									"name": "00. Retrieve Service Cloud AuthToken",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "12f5cbc7-330d-4cb0-91aa-8b6f5044172b",
												"exec": [
													"",
													"// Clear the contents of the Service Cloud last-case processed environment variable",
													"pm.environment.unset(\"sfscLastCaseRecordId\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a5010dd8-7f42-47b3-bb6c-cac62d262b98",
												"exec": [
													"// Parse the JSON response",
													"var parsedResponse = JSON.parse(responseBody);",
													"",
													"// Check if the parsedResponse has an access-token key",
													"if (parsedResponse.hasOwnProperty('access_token')) {",
													"    ",
													"    // If an access-token exists, then set it as part of the environment",
													"    postman.setEnvironmentVariable('sfscAuthToken', parsedResponse.access_token);",
													"    ",
													"    // Write the serviceCloud Url based on the instance_url in the response",
													"    postman.setEnvironmentVariable('serviceCloudUrl', parsedResponse.instance_url);",
													"    ",
													"}",
													"",
													"// Execute a test to validate that the access-token exists",
													"pm.test(\"StatusCode is 200.\", function () {",
													"    pm.expect(responseCode.code === 200).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that we've received a response",
													"pm.test(\"Response is not empty.\", function () {",
													"    pm.expect(responseBody.length > 0).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that the response provided is JSON",
													"pm.test(\"Response is JSON.\", function () {",
													"    pm.expect(parsedResponse !== null).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that the access-token exists",
													"pm.test(\"Service Cloud AuthToken response contains an access token.\", function () {",
													"    pm.expect(parsedResponse.hasOwnProperty('access_token')).to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"description": "... represents the content-type of the request",
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{authTokenUrl}}/services/oauth2/token?grant_type=password&client_id={{sfscConsumerKey}}&client_secret={{sfscConsumerSecret}}&username={{sfscUsername}}&password={{sfscPassword}}{{sfscSecurityToken}}",
											"protocol": "https",
											"host": [
												"{{authTokenUrl}}"
											],
											"path": [
												"services",
												"oauth2",
												"token"
											],
											"query": [
												{
													"key": "grant_type",
													"value": "password",
													"description": "... represents the grant-type to be performed"
												},
												{
													"key": "client_id",
													"value": "{{sfscConsumerKey}}",
													"description": "... identifies the clientId associated to the SCC Integration User account"
												},
												{
													"key": "client_secret",
													"value": "{{sfscConsumerSecret}}",
													"description": "... identifies the clientSecret associated to the SCC Integration User account"
												},
												{
													"key": "username",
													"value": "{{sfscUsername}}",
													"description": "... identifies the username associated to the SCC Integration User account"
												},
												{
													"key": "password",
													"value": "{{sfscPassword}}{{sfscSecurityToken}}",
													"description": "... represents the password + securityToken associated to the SCC Integration User account"
												}
											]
										},
										"description": "... this request is used to confirm that a REST access token can be retrieve using the credentials and security token associated to the SCC Integration User.  This request leverages the Salesforce grant-type of \"password\".  A successful request will generate an access token of token_type \"Bearer\" that must be attached to all subsequent REST interactions (ex. creating cases, accounts, and orders).\n- For details on this request-type, please visit https://help.salesforce.com/articleView?id=remoteaccess_oauth_username_password_flow.htm&type=5.\n- Once the bearer token has been generated, please update the Authorization tab in the parent project folder to include the generated Bearer token."
									},
									"response": []
								},
								{
									"name": "01. Retrieve Commerce Cloud AuthToken",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "86c21dc4-46c9-4da9-8a77-bb21288a428e",
												"exec": [
													"",
													"// Build the credential string by concatenating the username, password, and clientSecret",
													"credentialString = pm.environment.get(\"sfccUsername\") + ':' + pm.environment.get(\"sfccPassword\") + ':' + pm.environment.get(\"sfccClientSecret\");",
													"",
													"// Encrypt the credential string to base64",
													"rawCredential = CryptoJS.enc.Utf8.parse(credentialString);",
													"encodedCredential = CryptoJS.enc.Base64.stringify(rawCredential);",
													"",
													"// Set the environment variable representing the credential",
													"pm.environment.set(\"sfccUserCredential\", encodedCredential);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "0dc132c9-2c32-41b5-b224-9fb1f872cdc3",
												"exec": [
													"",
													"// Parse the response data",
													"var parsedResponse = JSON.parse(responseBody);",
													"",
													"// Execute a test to validate that the access-token exists",
													"pm.test(\"StatusCode is 200.\", function () {",
													"    pm.expect(responseCode.code === 200).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that we've received a response",
													"pm.test(\"Response is not empty.\", function () {",
													"    pm.expect(responseBody.length > 0).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that the response provided is JSON",
													"pm.test(\"Response is JSON.\", function () {",
													"    pm.expect(parsedResponse !== null).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that the response contains the properties expected.",
													"pm.test(\"Response is well-formed and contains the access_token property.\", function () {",
													"    pm.expect(parsedResponse.hasOwnProperty('access_token')).to.be.true;",
													"    pm.expect(parsedResponse.hasOwnProperty('expires_in')).to.be.true;",
													"    pm.expect(parsedResponse.hasOwnProperty('token_type')).to.be.true;",
													"});",
													"",
													"// Check if the parsedResponse has an access-token key",
													"if (parsedResponse.hasOwnProperty('access_token')) {",
													"    ",
													"    // If an access-token exists, then set it as part of the environment",
													"    postman.setEnvironmentVariable('sfccAuthToken', parsedResponse.access_token);",
													"",
													"} "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Basic {{sfccUserCredential}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "grant_type=urn:demandware:params:oauth:grant-type:client-id:dwsid:dwsecuretoken"
										},
										"url": {
											"raw": "{{sfccOAuth2Url}}?client_id={{sfccClientId}}",
											"host": [
												"{{sfccOAuth2Url}}"
											],
											"query": [
												{
													"key": "client_id",
													"value": "{{sfccClientId}}"
												}
											]
										},
										"description": "... retrieves an authToken for a Salesforce B2C Commerce Business Manager user.  The request will encode the username:password:clientSecret via Base64 and seed the encoded string via the sfccUserCredential environment property.  This encoded string is then used to request the authToken."
									},
									"response": []
								},
								{
									"name": "02. Verify the B2C Commerce Order is Anonymous",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6509dc87-d8cb-4c46-8bfa-b053da2d1364",
												"exec": [
													"// Parse the JSON response",
													"var parsedResponse = JSON.parse(responseBody);",
													"",
													"// Execute a test to validate that the access-token exists",
													"pm.test(\"StatusCode is 200.\", function () {",
													"    pm.expect(responseCode.code === 200).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that we've received a response",
													"pm.test(\"Response is not empty.\", function () {",
													"    pm.expect(responseBody.length > 0).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that the response provided is JSON",
													"pm.test(\"Response is JSON.\", function () {",
													"    pm.expect(parsedResponse !== null).to.be.true;",
													"});",
													"",
													"pm.test(\"Response is of type 'order'.\", function() {",
													"    pm.expect(parsedResponse._type).to.be.equal('order');    ",
													"});",
													"",
													"pm.test(\"Customer information for this order does not have a 'customer_no' property.\", function() {",
													"    pm.expect(parsedResponse.customer_info.hasOwnProperty('customer_no')).to.be.false;",
													"});",
													"",
													"// Write the order total and e-mail address that we'll use in the next step",
													"pm.environment.set('sfccAnonymousOrderTotal', parsedResponse.order_total);",
													"pm.environment.set('tmpAnonymousOrderEmail', parsedResponse.customer_info.email);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{sfccAuthToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n     \"query\" : \n     {\n        \"text_query\": { \"fields\": [\"credentials.login\"], \"search_phrase\":\"{{sfccCustomerEmail}}\" }\n     }\n}"
										},
										"url": {
											"raw": "{{sfccShopUrl}}/orders/{{sfccAnonymousOrderNo}}",
											"host": [
												"{{sfccShopUrl}}"
											],
											"path": [
												"orders",
												"{{sfccAnonymousOrderNo}}"
											]
										},
										"description": "... this request attempts to verify that the test-order exists in Salesforce B2C Commerce and is anonymous prior to working with the test order."
									},
									"response": []
								},
								{
									"name": "03. Create Anonymous Customer Order",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3de4b97e-e1a6-4996-80d3-3d0c678de887",
												"exec": [
													"// Parse the JSON response",
													"var parsedResponse = JSON.parse(responseBody);",
													"",
													"// Execute a test to validate that the access-token exists",
													"pm.test(\"StatusCode is 200.\", function () {",
													"    pm.expect(responseCode.code === 200).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that we've received a response",
													"pm.test(\"Response is not empty.\", function () {",
													"    pm.expect(responseBody.length > 0).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that the response provided is JSON",
													"pm.test(\"Response is JSON.\", function () {",
													"    pm.expect(parsedResponse !== null).to.be.true;",
													"});",
													"",
													"pm.test(\"Service Cloud returned a valid order object response.\", function () {",
													"    pm.expect(parsedResponse.hasOwnProperty('objectType')).to.be.true;",
													"    pm.expect(parsedResponse.hasOwnProperty('recordId')).to.be.true;",
													"    pm.expect(parsedResponse.hasOwnProperty('errors')).to.be.true;",
													"});",
													"",
													"pm.test(\"The response object was of type 'Order'.\", function () {",
													"    pm.expect(parsedResponse.objectType).to.not.equal(null);    ",
													"    pm.expect(parsedResponse.objectType).to.equal('Order');",
													"});",
													"",
													"pm.test(\"The response object contains a valid recordId.\", function () {",
													"    pm.expect(parsedResponse.recordId).to.not.equal(null);",
													"});",
													"",
													"pm.test(\"The response object does not contain any errors.\", function () {",
													"    pm.expect(parsedResponse.errors).to.equal(null);",
													"});",
													"",
													"// Validate that the order was successfully created",
													"if (parsedResponse.hasOwnProperty('recordId') && parsedResponse.recordId !== null) {",
													"",
													"    // Enable a delay  before validating the order details",
													"    setTimeout(function() {",
													"        ",
													"        // Initialize the header object",
													"        var Header = require('postman-collection').Header;",
													"        ",
													"        // Initialize the request options",
													"        var options = { ",
													"            method: 'GET',",
													"            header: [] ",
													"        };",
													"        ",
													"        // Build out the environment url for this request",
													"        options.url = pm.environment.get('serviceCloudUrl') + '/services/apexrest/Order/Placement/' + parsedResponse.recordId;",
													"        ",
													"        // Add the headers to the request definition",
													"        options.header.push(new Header({key: 'Content-Type', value: 'application/json'}));",
													"        options.header.push({key: 'Authorization', value: 'Bearer ' + pm.environment.get('sfscAuthToken')});",
													"    ",
													"        // Invoke the request",
													"        pm.sendRequest(options, function (error, response) {",
													"        ",
													"            // Throw an error if one is caught",
													"            if (error) throw new Error(error);",
													"    ",
													"            // Convert the response to JSON",
													"            var responseJSON = response.json();",
													"            var thisOrder = responseJSON[0];",
													"    ",
													"            pm.test(\"Verify the order is found in Service Cloud.\", function () {",
													"                pm.expect(thisOrder['Id']).to.equal(parsedResponse.recordId);",
													"            });    ",
													"    ",
													"            pm.test(\"Verify the order's SFCC orderId matches the anonymous order number.\", function () {",
													"                pm.expect(thisOrder['SFCC_Order_Number__c']).to.equal(pm.environment.get('sfccAnonymousOrderNo'));",
													"            });    ",
													"    ",
													"            pm.test(\"Verify the order's Service Cloud total matches the submitted value.\", function () {",
													"                pm.expect(thisOrder['SFCC_Order_Total__c']).to.equal(pm.environment.get('sfccAnonymousOrderTotal'));",
													"            })",
													"",
													"            // Only process the account validation if the order has an acountId    ",
													"            if (thisOrder.hasOwnProperty('AccountId')) {",
													"                ",
													"                // Initialize the header object",
													"                var Header = require('postman-collection').Header;",
													"                ",
													"                // Initialize the request options",
													"                var options = { ",
													"                    method: 'GET',",
													"                    header: [] ",
													"                };",
													"                ",
													"                // Build out the environment url for this request",
													"                options.url = pm.environment.get('serviceCloudUrl') + '/services/apexrest/Contact/Registration/' + thisOrder.AccountId;",
													"                ",
													"                // Add the headers to the request definition",
													"                options.header.push(new Header({key: 'Content-Type', value: 'application/json'}));",
													"                options.header.push({key: 'Authorization', value: 'Bearer ' + pm.environment.get('sfscAuthToken')});",
													"            ",
													"                // Invoke the request",
													"                pm.sendRequest(options, function (error, response) {",
													"                ",
													"                    // Throw an error if one is caught",
													"                    if (error) throw new Error(error);",
													"            ",
													"                    // Convert the response to JSON",
													"                    var responseJSON = response.json();",
													"                    var thisAccount = responseJSON[0];",
													"            ",
													"                    pm.test(\"Verify the customer is created in Service Cloud.\", function () {",
													"                        pm.expect(responseJSON.length).to.equal(1);",
													"                        pm.expect(thisAccount['Id']).to.equal(thisOrder.AccountId);",
													"                    });    ",
													"",
													"                    pm.test(\"Verify the account is mapped to the anonymous order's email address.\", function () {",
													"                        pm.expect(thisAccount['PersonEmail']).to.equal(pm.environment.get('tmpAnonymousOrderEmail'));",
													"                    }); ",
													"",
													"                });",
													"    ",
													"            }",
													"",
													"        });",
													"        ",
													"    }, pm.environment.get('postRequestDelay'));",
													"    ",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{sfscAuthToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"description": "... represents the content-type of the request.",
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"order_no\":\"{{sfccAnonymousOrderNo}}\",\n\t\"status\":\"Draft\",\n\t\"order_total\":{{sfccAnonymousOrderTotal}},\n\t\"scc_sync_status\":\"Created\",\n\t\"billing_street\":\"{{sfccBillingStreet}}\",\n\t\"billing_city\":\"{{sfccBillingCity}}\",\n\t\"billing_state\":\"{{sfccBillingState}}\",\n\t\"billing_country\":\"{{sfccBillingCountry}}\",\n\t\"billing_postal_code\":\"{{sfccBillingPostalCode}}\",\n\t\"shipping_street\":\"{{sfccShippingStreet}}\",\n\t\"shipping_city\":\"{{sfccShippingCity}}\",\n\t\"shipping_state\":\"{{sfccShippingState}}\",\n\t\"shipping_country\":\"{{sfccShippingCountry}}\",\n\t\"shipping_postal_code\":\"{{sfccShippingPostalCode}}\"\n}\n\n"
										},
										"url": {
											"raw": "{{serviceCloudUrl}}/services/apexrest/Order/Placement/",
											"host": [
												"{{serviceCloudUrl}}"
											],
											"path": [
												"services",
												"apexrest",
												"Order",
												"Placement",
												""
											]
										},
										"description": "... this request can be used to register an anonymous order with Service Cloud.  As a pre-requisite, please ensure that this order have been created and exists in your Salesforce B2C Commerce instance prior to attempting to create the order records in Service Cloud."
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Update Status of an Anonymous Customer Order",
							"item": [
								{
									"name": "00. Retrieve Service Cloud AuthToken",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "12f5cbc7-330d-4cb0-91aa-8b6f5044172b",
												"exec": [
													"",
													"// Clear the contents of the Service Cloud last-case processed environment variable",
													"pm.environment.unset(\"sfscLastCaseRecordId\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a5010dd8-7f42-47b3-bb6c-cac62d262b98",
												"exec": [
													"// Parse the JSON response",
													"var parsedResponse = JSON.parse(responseBody);",
													"",
													"// Check if the parsedResponse has an access-token key",
													"if (parsedResponse.hasOwnProperty('access_token')) {",
													"    ",
													"    // If an access-token exists, then set it as part of the environment",
													"    postman.setEnvironmentVariable('sfscAuthToken', parsedResponse.access_token);",
													"    ",
													"    // Write the serviceCloud Url based on the instance_url in the response",
													"    postman.setEnvironmentVariable('serviceCloudUrl', parsedResponse.instance_url);",
													"    ",
													"}",
													"",
													"// Execute a test to validate that the access-token exists",
													"pm.test(\"StatusCode is 200.\", function () {",
													"    pm.expect(responseCode.code === 200).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that we've received a response",
													"pm.test(\"Response is not empty.\", function () {",
													"    pm.expect(responseBody.length > 0).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that the response provided is JSON",
													"pm.test(\"Response is JSON.\", function () {",
													"    pm.expect(parsedResponse !== null).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that the access-token exists",
													"pm.test(\"Service Cloud AuthToken response contains an access token.\", function () {",
													"    pm.expect(parsedResponse.hasOwnProperty('access_token')).to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"description": "... represents the content-type of the request",
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{authTokenUrl}}/services/oauth2/token?grant_type=password&client_id={{sfscConsumerKey}}&client_secret={{sfscConsumerSecret}}&username={{sfscUsername}}&password={{sfscPassword}}{{sfscSecurityToken}}",
											"protocol": "https",
											"host": [
												"{{authTokenUrl}}"
											],
											"path": [
												"services",
												"oauth2",
												"token"
											],
											"query": [
												{
													"key": "grant_type",
													"value": "password",
													"description": "... represents the grant-type to be performed"
												},
												{
													"key": "client_id",
													"value": "{{sfscConsumerKey}}",
													"description": "... identifies the clientId associated to the SCC Integration User account"
												},
												{
													"key": "client_secret",
													"value": "{{sfscConsumerSecret}}",
													"description": "... identifies the clientSecret associated to the SCC Integration User account"
												},
												{
													"key": "username",
													"value": "{{sfscUsername}}",
													"description": "... identifies the username associated to the SCC Integration User account"
												},
												{
													"key": "password",
													"value": "{{sfscPassword}}{{sfscSecurityToken}}",
													"description": "... represents the password + securityToken associated to the SCC Integration User account"
												}
											]
										},
										"description": "... this request is used to confirm that a REST access token can be retrieve using the credentials and security token associated to the SCC Integration User.  This request leverages the Salesforce grant-type of \"password\".  A successful request will generate an access token of token_type \"Bearer\" that must be attached to all subsequent REST interactions (ex. creating cases, accounts, and orders).\n- For details on this request-type, please visit https://help.salesforce.com/articleView?id=remoteaccess_oauth_username_password_flow.htm&type=5.\n- Once the bearer token has been generated, please update the Authorization tab in the parent project folder to include the generated Bearer token."
									},
									"response": []
								},
								{
									"name": "01. Retrieve Commerce Cloud AuthToken",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "86c21dc4-46c9-4da9-8a77-bb21288a428e",
												"exec": [
													"",
													"// Build the credential string by concatenating the username, password, and clientSecret",
													"credentialString = pm.environment.get(\"sfccUsername\") + ':' + pm.environment.get(\"sfccPassword\") + ':' + pm.environment.get(\"sfccClientSecret\");",
													"",
													"// Encrypt the credential string to base64",
													"rawCredential = CryptoJS.enc.Utf8.parse(credentialString);",
													"encodedCredential = CryptoJS.enc.Base64.stringify(rawCredential);",
													"",
													"// Set the environment variable representing the credential",
													"pm.environment.set(\"sfccUserCredential\", encodedCredential);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "0dc132c9-2c32-41b5-b224-9fb1f872cdc3",
												"exec": [
													"",
													"// Parse the response data",
													"var parsedResponse = JSON.parse(responseBody);",
													"",
													"// Execute a test to validate that the access-token exists",
													"pm.test(\"StatusCode is 200.\", function () {",
													"    pm.expect(responseCode.code === 200).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that we've received a response",
													"pm.test(\"Response is not empty.\", function () {",
													"    pm.expect(responseBody.length > 0).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that the response provided is JSON",
													"pm.test(\"Response is JSON.\", function () {",
													"    pm.expect(parsedResponse !== null).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that the response contains the properties expected.",
													"pm.test(\"Response is well-formed and contains the access_token property.\", function () {",
													"    pm.expect(parsedResponse.hasOwnProperty('access_token')).to.be.true;",
													"    pm.expect(parsedResponse.hasOwnProperty('expires_in')).to.be.true;",
													"    pm.expect(parsedResponse.hasOwnProperty('token_type')).to.be.true;",
													"});",
													"",
													"// Check if the parsedResponse has an access-token key",
													"if (parsedResponse.hasOwnProperty('access_token')) {",
													"    ",
													"    // If an access-token exists, then set it as part of the environment",
													"    postman.setEnvironmentVariable('sfccAuthToken', parsedResponse.access_token);",
													"",
													"} "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Basic {{sfccUserCredential}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "grant_type=urn:demandware:params:oauth:grant-type:client-id:dwsid:dwsecuretoken"
										},
										"url": {
											"raw": "{{sfccOAuth2Url}}?client_id={{sfccClientId}}",
											"host": [
												"{{sfccOAuth2Url}}"
											],
											"query": [
												{
													"key": "client_id",
													"value": "{{sfccClientId}}"
												}
											]
										},
										"description": "... retrieves an authToken for a Salesforce B2C Commerce Business Manager user.  The request will encode the username:password:clientSecret via Base64 and seed the encoded string via the sfccUserCredential environment property.  This encoded string is then used to request the authToken."
									},
									"response": []
								},
								{
									"name": "02. Verify the B2C Commerce Order is Anonymous",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6509dc87-d8cb-4c46-8bfa-b053da2d1364",
												"exec": [
													"// Parse the JSON response",
													"var parsedResponse = JSON.parse(responseBody);",
													"",
													"// Execute a test to validate that the access-token exists",
													"pm.test(\"StatusCode is 200.\", function () {",
													"    pm.expect(responseCode.code === 200).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that we've received a response",
													"pm.test(\"Response is not empty.\", function () {",
													"    pm.expect(responseBody.length > 0).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that the response provided is JSON",
													"pm.test(\"Response is JSON.\", function () {",
													"    pm.expect(parsedResponse !== null).to.be.true;",
													"});",
													"",
													"pm.test(\"Response is of type 'order'.\", function() {",
													"    pm.expect(parsedResponse._type).to.be.equal('order');    ",
													"});",
													"",
													"pm.test(\"Customer information for this order does not have a 'customer_no' property.\", function() {",
													"    pm.expect(parsedResponse.customer_info.hasOwnProperty('customer_no')).to.be.false;",
													"});",
													"",
													"// Write the order total and e-mail address that we'll use in the next step",
													"pm.environment.set('sfccAnonymousOrderTotal', parsedResponse.order_total);",
													"pm.environment.set('tmpAnonymousOrderEmail', parsedResponse.customer_info.email);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{sfccAuthToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n     \"query\" : \n     {\n        \"text_query\": { \"fields\": [\"credentials.login\"], \"search_phrase\":\"{{sfccCustomerEmail}}\" }\n     }\n}"
										},
										"url": {
											"raw": "{{sfccShopUrl}}/orders/{{sfccAnonymousOrderNo}}",
											"host": [
												"{{sfccShopUrl}}"
											],
											"path": [
												"orders",
												"{{sfccAnonymousOrderNo}}"
											]
										},
										"description": "... this request attempts to verify that the test-order exists in Salesforce B2C Commerce and is anonymous prior to working with the test order."
									},
									"response": []
								},
								{
									"name": "03. Reset the Status of the Anonymous B2C Commerce Order",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f25e99dd-f1ca-4c51-a04e-35681f538642",
												"exec": [
													"// Parse the JSON response",
													"var parsedResponse = JSON.parse(responseBody);",
													"",
													"// Execute a test to validate that the access-token exists",
													"pm.test(\"StatusCode is 200.\", function () {",
													"    pm.expect(responseCode.code === 200).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that we've received a response",
													"pm.test(\"Response is not empty.\", function () {",
													"    pm.expect(responseBody.length > 0).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that the response provided is JSON",
													"pm.test(\"Response is JSON.\", function () {",
													"    pm.expect(parsedResponse !== null).to.be.true;",
													"});",
													"",
													"pm.test(\"Response is of type 'order'.\", function() {",
													"    pm.expect(parsedResponse._type).to.be.equal('order');    ",
													"});",
													"",
													"pm.test(\"Response has an orderNo of '\" + pm.environment.get('sfccAnonymousOrderNo') + \"'.\", function() {",
													"    pm.expect(parsedResponse.order_no).to.be.equal(pm.environment.get('sfccAnonymousOrderNo'));    ",
													"});",
													"",
													"pm.test(\"Order status is set to '\" + pm.environment.get('tmpResetOrderStatus') + \"'.\", function() {",
													"    pm.expect(parsedResponse.status).to.be.equal(pm.environment.get('tmpResetOrderStatus'));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0e95a4ee-7038-4afc-b75f-e7a70b3fa17c",
												"exec": [
													"// Reset the status for the order we're testing with",
													"pm.environment.set('tmpResetOrderStatus','open');"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{sfccAuthToken}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [
											{
												"key": "x-dw-client-id",
												"value": "{{clientid}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"status\": \"{{tmpResetOrderStatus}}\"\n}"
										},
										"url": {
											"raw": "{{sfccShopUrl}}/orders/{{sfccAnonymousOrderNo}}",
											"host": [
												"{{sfccShopUrl}}"
											],
											"path": [
												"orders",
												"{{sfccAnonymousOrderNo}}"
											]
										},
										"description": "... modifies an order status (see https://goo.gl/RYjRHp for available statuses).  Please update the sfccOrderId environment variable with with identifier representing the order whose status will be modified.  Prior to retrieving the customer addresses, please retrieve an authToken by executing request 00a. Retrieve Commerce Cloud AuthToken."
									},
									"response": []
								},
								{
									"name": "04. Create Anonymous Customer Order",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3de4b97e-e1a6-4996-80d3-3d0c678de887",
												"exec": [
													"// Parse the JSON response",
													"var parsedResponse = JSON.parse(responseBody);",
													"",
													"// Execute a test to validate that the access-token exists",
													"pm.test(\"StatusCode is 200.\", function () {",
													"    pm.expect(responseCode.code === 200).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that we've received a response",
													"pm.test(\"Response is not empty.\", function () {",
													"    pm.expect(responseBody.length > 0).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that the response provided is JSON",
													"pm.test(\"Response is JSON.\", function () {",
													"    pm.expect(parsedResponse !== null).to.be.true;",
													"});",
													"",
													"pm.test(\"Service Cloud returned a valid order object response.\", function () {",
													"    pm.expect(parsedResponse.hasOwnProperty('objectType')).to.be.true;",
													"    pm.expect(parsedResponse.hasOwnProperty('recordId')).to.be.true;",
													"    pm.expect(parsedResponse.hasOwnProperty('errors')).to.be.true;",
													"});",
													"",
													"pm.test(\"The response object was of type 'Order'.\", function () {",
													"    pm.expect(parsedResponse.objectType).to.not.equal(null);    ",
													"    pm.expect(parsedResponse.objectType).to.equal('Order');",
													"});",
													"",
													"pm.test(\"The response object contains a valid recordId.\", function () {",
													"    pm.expect(parsedResponse.recordId).to.not.equal(null);",
													"});",
													"",
													"pm.test(\"The response object does not contain any errors.\", function () {",
													"    pm.expect(parsedResponse.errors).to.equal(null);",
													"});",
													"",
													"// Validate that the order was successfully created",
													"if (parsedResponse.hasOwnProperty('recordId') && parsedResponse.recordId !== null) {",
													"",
													"    // Enable a delay  before validating the order details",
													"    setTimeout(function() {",
													"        ",
													"        // Initialize the header object",
													"        var Header = require('postman-collection').Header;",
													"        ",
													"        // Initialize the request options",
													"        var options = { ",
													"            method: 'GET',",
													"            header: [] ",
													"        };",
													"        ",
													"        // Build out the environment url for this request",
													"        options.url = pm.environment.get('serviceCloudUrl') + '/services/apexrest/Order/Placement/' + parsedResponse.recordId;",
													"        ",
													"        // Add the headers to the request definition",
													"        options.header.push(new Header({key: 'Content-Type', value: 'application/json'}));",
													"        options.header.push({key: 'Authorization', value: 'Bearer ' + pm.environment.get('sfscAuthToken')});",
													"    ",
													"        // Invoke the request",
													"        pm.sendRequest(options, function (error, response) {",
													"        ",
													"            // Throw an error if one is caught",
													"            if (error) throw new Error(error);",
													"    ",
													"            // Convert the response to JSON",
													"            var responseJSON = response.json();",
													"            var thisOrder = responseJSON[0];",
													"    ",
													"            pm.test(\"Verify the order is found in Service Cloud.\", function () {",
													"                pm.expect(thisOrder['Id']).to.equal(parsedResponse.recordId);",
													"            });    ",
													"    ",
													"            pm.test(\"Verify the order's SFCC orderId matches the anonymous order number.\", function () {",
													"                pm.expect(thisOrder['SFCC_Order_Number__c']).to.equal(pm.environment.get('sfccAnonymousOrderNo'));",
													"            });    ",
													"    ",
													"            pm.test(\"Verify the order's Service Cloud total matches the submitted value.\", function () {",
													"                pm.expect(thisOrder['SFCC_Order_Total__c']).to.equal(pm.environment.get('sfccAnonymousOrderTotal'));",
													"            })",
													"",
													"            // Only process the account validation if the order has an acountId    ",
													"            if (thisOrder.hasOwnProperty('AccountId')) {",
													"                ",
													"                // Initialize the header object",
													"                var Header = require('postman-collection').Header;",
													"                ",
													"                // Initialize the request options",
													"                var options = { ",
													"                    method: 'GET',",
													"                    header: [] ",
													"                };",
													"                ",
													"                // Build out the environment url for this request",
													"                options.url = pm.environment.get('serviceCloudUrl') + '/services/apexrest/Contact/Registration/' + thisOrder.AccountId;",
													"                ",
													"                // Add the headers to the request definition",
													"                options.header.push(new Header({key: 'Content-Type', value: 'application/json'}));",
													"                options.header.push({key: 'Authorization', value: 'Bearer ' + pm.environment.get('sfscAuthToken')});",
													"            ",
													"                // Invoke the request",
													"                pm.sendRequest(options, function (error, response) {",
													"                ",
													"                    // Throw an error if one is caught",
													"                    if (error) throw new Error(error);",
													"            ",
													"                    // Convert the response to JSON",
													"                    var responseJSON = response.json();",
													"                    var thisAccount = responseJSON[0];",
													"            ",
													"                    pm.test(\"Verify the customer is created in Service Cloud.\", function () {",
													"                        pm.expect(responseJSON.length).to.equal(1);",
													"                        pm.expect(thisAccount['Id']).to.equal(thisOrder.AccountId);",
													"                    });    ",
													"",
													"                    pm.test(\"Verify the account is mapped to the anonymous order's email address.\", function () {",
													"                        pm.expect(thisAccount['PersonEmail']).to.equal(pm.environment.get('tmpAnonymousOrderEmail'));",
													"                    }); ",
													"",
													"                });",
													"    ",
													"            }",
													"",
													"        });",
													"        ",
													"    }, pm.environment.get('postRequestDelay'));",
													"    ",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{sfscAuthToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"description": "... represents the content-type of the request.",
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"order_no\":\"{{sfccAnonymousOrderNo}}\",\n\t\"status\":\"Draft\",\n\t\"order_total\":{{sfccAnonymousOrderTotal}},\n\t\"scc_sync_status\":\"Created\"\n}\n\n"
										},
										"url": {
											"raw": "{{serviceCloudUrl}}/services/apexrest/Order/Placement/",
											"host": [
												"{{serviceCloudUrl}}"
											],
											"path": [
												"services",
												"apexrest",
												"Order",
												"Placement",
												""
											]
										},
										"description": "... this request can be used to register an anonymous order with Service Cloud.  As a pre-requisite, please ensure that this order have been created and exists in your Salesforce B2C Commerce instance prior to attempting to create the order records in Service Cloud."
									},
									"response": []
								},
								{
									"name": "05. Update the Status of the B2C Commerce Order",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f25e99dd-f1ca-4c51-a04e-35681f538642",
												"exec": [
													"// Parse the JSON response",
													"var parsedResponse = JSON.parse(responseBody);",
													"",
													"// Execute a test to validate that the access-token exists",
													"pm.test(\"StatusCode is 200.\", function () {",
													"    pm.expect(responseCode.code === 200).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that we've received a response",
													"pm.test(\"Response is not empty.\", function () {",
													"    pm.expect(responseBody.length > 0).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that the response provided is JSON",
													"pm.test(\"Response is JSON.\", function () {",
													"    pm.expect(parsedResponse !== null).to.be.true;",
													"});",
													"",
													"pm.test(\"Response is of type 'order'.\", function() {",
													"    pm.expect(parsedResponse._type).to.be.equal('order');    ",
													"});",
													"",
													"pm.test(\"Response has an orderNo of '\" + pm.environment.get('sfccAnonymousOrderNo') + \"'.\", function() {",
													"    pm.expect(parsedResponse.order_no).to.be.equal(pm.environment.get('sfccAnonymousOrderNo'));    ",
													"});",
													"",
													"pm.test(\"Order status is set to '\" + pm.environment.get('tmpCancelOrderStatus') + \"'.\", function() {",
													"    pm.expect(parsedResponse.status).to.be.equal(pm.environment.get('tmpCancelOrderStatus'));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0e95a4ee-7038-4afc-b75f-e7a70b3fa17c",
												"exec": [
													"// Update the status for the order we're testing with",
													"pm.environment.set('tmpCancelOrderStatus','cancelled');"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{sfccAuthToken}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [
											{
												"key": "x-dw-client-id",
												"value": "{{clientid}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"status\": \"{{tmpCancelOrderStatus}}\"\n}"
										},
										"url": {
											"raw": "{{sfccShopUrl}}/orders/{{sfccAnonymousOrderNo}}",
											"host": [
												"{{sfccShopUrl}}"
											],
											"path": [
												"orders",
												"{{sfccAnonymousOrderNo}}"
											]
										},
										"description": "... modifies an order status (see https://goo.gl/RYjRHp for available statuses).  Please update the sfccAnonymousOrderNo environment variable with with identifier representing the order whose status will be modified.  The order status can be managed by setting the 'tmpCancelOrderStatus' value in the pre-request script."
									},
									"response": []
								},
								{
									"name": "06. Update Anonymous Customer Order Status",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3de4b97e-e1a6-4996-80d3-3d0c678de887",
												"exec": [
													"// Parse the JSON response",
													"var parsedResponse = JSON.parse(responseBody);",
													"",
													"// Execute a test to validate that the access-token exists",
													"pm.test(\"StatusCode is 200.\", function () {",
													"    pm.expect(responseCode.code === 200).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that we've received a response",
													"pm.test(\"Response is not empty.\", function () {",
													"    pm.expect(responseBody.length > 0).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that the response provided is JSON",
													"pm.test(\"Response is JSON.\", function () {",
													"    pm.expect(parsedResponse !== null).to.be.true;",
													"});",
													"",
													"pm.test(\"Service Cloud returned a valid order object response.\", function () {",
													"    pm.expect(parsedResponse.hasOwnProperty('objectType')).to.be.true;",
													"    pm.expect(parsedResponse.hasOwnProperty('recordId')).to.be.true;",
													"    pm.expect(parsedResponse.hasOwnProperty('errors')).to.be.true;",
													"});",
													"",
													"pm.test(\"The response object was of type 'Order'.\", function () {",
													"    pm.expect(parsedResponse.objectType).to.not.equal(null);    ",
													"    pm.expect(parsedResponse.objectType).to.equal('Order');",
													"});",
													"",
													"pm.test(\"The response object contains a valid recordId.\", function () {",
													"    pm.expect(parsedResponse.recordId).to.not.equal(null);",
													"});",
													"",
													"pm.test(\"The response object does not contain any errors.\", function () {",
													"    pm.expect(parsedResponse.errors).to.equal(null);",
													"});",
													"",
													"// Validate that the Account was successfully created",
													"if (parsedResponse.hasOwnProperty('recordId') && parsedResponse.recordId !== null) {",
													"    ",
													"    // Give the future-handler time to process",
													"    setTimeout(function(){",
													"        ",
													"        // Initialize the header object",
													"        var Header = require('postman-collection').Header;",
													"        ",
													"        // Initialize the request options",
													"        var options = { ",
													"            method: 'GET',",
													"            header: [] ",
													"        };",
													"        ",
													"        // Build out the environment url for this request",
													"        options.url = pm.environment.get('serviceCloudUrl') + '/services/apexrest/Order/Placement/' + parsedResponse.recordId;",
													"        ",
													"        // Add the headers to the request definition",
													"        options.header.push(new Header({key: 'Content-Type', value: 'application/json'}));",
													"        options.header.push({key: 'Authorization', value: 'Bearer ' + pm.environment.get('sfscAuthToken')});",
													"    ",
													"        // Invoke the request",
													"        pm.sendRequest(options, function (error, response) {",
													"        ",
													"            // Throw an error if one is caught",
													"            if (error) throw new Error(error);",
													"    ",
													"            // Convert the response to JSON",
													"            responseJSON = response.json();",
													"    ",
													"            pm.test(\"Verify the order is found in Service Cloud.\", function () {",
													"                pm.expect(responseJSON[0]['Id']).to.equal(parsedResponse.recordId);",
													"            });    ",
													"    ",
													"            pm.test(\"Verify the order's SFCC orderId matches the anonymous order number.\", function () {",
													"                pm.expect(responseJSON[0]['SFCC_Order_Number__c']).to.equal(pm.environment.get('sfccAnonymousOrderNo'));",
													"            });    ",
													"            ",
													"            pm.test(\"Verify that the anonymous order's status has been updated to \" + pm.environment.get('tmpOrderStatus') + \".\", function () {",
													"                pm.expect(responseJSON[0]['Status']).to.equal(pm.environment.get('tmpOrderStatus'));",
													"            });",
													"",
													"        });        ",
													"        ",
													"    }, pm.environment.get('postRequestDelay'));    ",
													"",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "18812204-a57e-4775-93e7-9ffc5c5c7607",
												"exec": [
													"// Define the variable used to manage the status update.",
													"pm.environment.set('tmpOrderStatus', 'Cancelled');"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{sfscAuthToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"description": "... represents the content-type of the request.",
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"order_no\":\"{{sfccAnonymousOrderNo}}\",\n\t\"status\":\"{{tmpOrderStatus}}\",\n\t\"scc_sync_status\":\"Updated\"\n}\n\n"
										},
										"url": {
											"raw": "{{serviceCloudUrl}}/services/apexrest/Order/Placement/",
											"host": [
												"{{serviceCloudUrl}}"
											],
											"path": [
												"services",
												"apexrest",
												"Order",
												"Placement",
												""
											]
										},
										"description": "... this request can be used to update the status of an anonymous order within Service Cloud.  As a pre-requisite, please ensure that this order have been created and exists in your Salesforce B2C Commerce instance prior to attempting to create the order records in Service Cloud.  You can update the order status via the Pre-request script (set the tmpOrderStatus variable)."
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "acaa983f-e036-40af-a34b-3516d2bc3844",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3e27b62a-6e94-49aa-aa27-acf4f672b505",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Create Order for Registered Customer",
							"item": [
								{
									"name": "00. Retrieve Service Cloud AuthToken",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "12f5cbc7-330d-4cb0-91aa-8b6f5044172b",
												"exec": [
													"",
													"// Clear the contents of the Service Cloud last-case processed environment variable",
													"pm.environment.unset(\"sfscLastCaseRecordId\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a5010dd8-7f42-47b3-bb6c-cac62d262b98",
												"exec": [
													"// Parse the JSON response",
													"var parsedResponse = JSON.parse(responseBody);",
													"",
													"// Check if the parsedResponse has an access-token key",
													"if (parsedResponse.hasOwnProperty('access_token')) {",
													"    ",
													"    // If an access-token exists, then set it as part of the environment",
													"    postman.setEnvironmentVariable('sfscAuthToken', parsedResponse.access_token);",
													"    ",
													"    // Write the serviceCloud Url based on the instance_url in the response",
													"    postman.setEnvironmentVariable('serviceCloudUrl', parsedResponse.instance_url);",
													"    ",
													"}",
													"",
													"// Execute a test to validate that the access-token exists",
													"pm.test(\"StatusCode is 200.\", function () {",
													"    pm.expect(responseCode.code === 200).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that we've received a response",
													"pm.test(\"Response is not empty.\", function () {",
													"    pm.expect(responseBody.length > 0).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that the response provided is JSON",
													"pm.test(\"Response is JSON.\", function () {",
													"    pm.expect(parsedResponse !== null).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that the access-token exists",
													"pm.test(\"Service Cloud AuthToken response contains an access token.\", function () {",
													"    pm.expect(parsedResponse.hasOwnProperty('access_token')).to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"description": "... represents the content-type of the request",
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{authTokenUrl}}/services/oauth2/token?grant_type=password&client_id={{sfscConsumerKey}}&client_secret={{sfscConsumerSecret}}&username={{sfscUsername}}&password={{sfscPassword}}{{sfscSecurityToken}}",
											"protocol": "https",
											"host": [
												"{{authTokenUrl}}"
											],
											"path": [
												"services",
												"oauth2",
												"token"
											],
											"query": [
												{
													"key": "grant_type",
													"value": "password",
													"description": "... represents the grant-type to be performed"
												},
												{
													"key": "client_id",
													"value": "{{sfscConsumerKey}}",
													"description": "... identifies the clientId associated to the SCC Integration User account"
												},
												{
													"key": "client_secret",
													"value": "{{sfscConsumerSecret}}",
													"description": "... identifies the clientSecret associated to the SCC Integration User account"
												},
												{
													"key": "username",
													"value": "{{sfscUsername}}",
													"description": "... identifies the username associated to the SCC Integration User account"
												},
												{
													"key": "password",
													"value": "{{sfscPassword}}{{sfscSecurityToken}}",
													"description": "... represents the password + securityToken associated to the SCC Integration User account"
												}
											]
										},
										"description": "... this request is used to confirm that a REST access token can be retrieve using the credentials and security token associated to the SCC Integration User.  This request leverages the Salesforce grant-type of \"password\".  A successful request will generate an access token of token_type \"Bearer\" that must be attached to all subsequent REST interactions (ex. creating cases, accounts, and orders).\n- For details on this request-type, please visit https://help.salesforce.com/articleView?id=remoteaccess_oauth_username_password_flow.htm&type=5.\n- Once the bearer token has been generated, please update the Authorization tab in the parent project folder to include the generated Bearer token."
									},
									"response": []
								},
								{
									"name": "01. Retrieve Commerce Cloud AuthToken",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "86c21dc4-46c9-4da9-8a77-bb21288a428e",
												"exec": [
													"",
													"// Build the credential string by concatenating the username, password, and clientSecret",
													"credentialString = pm.environment.get(\"sfccUsername\") + ':' + pm.environment.get(\"sfccPassword\") + ':' + pm.environment.get(\"sfccClientSecret\");",
													"",
													"// Encrypt the credential string to base64",
													"rawCredential = CryptoJS.enc.Utf8.parse(credentialString);",
													"encodedCredential = CryptoJS.enc.Base64.stringify(rawCredential);",
													"",
													"// Set the environment variable representing the credential",
													"pm.environment.set(\"sfccUserCredential\", encodedCredential);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "0dc132c9-2c32-41b5-b224-9fb1f872cdc3",
												"exec": [
													"",
													"// Parse the response data",
													"var parsedResponse = JSON.parse(responseBody);",
													"",
													"// Execute a test to validate that the access-token exists",
													"pm.test(\"StatusCode is 200.\", function () {",
													"    pm.expect(responseCode.code === 200).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that we've received a response",
													"pm.test(\"Response is not empty.\", function () {",
													"    pm.expect(responseBody.length > 0).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that the response provided is JSON",
													"pm.test(\"Response is JSON.\", function () {",
													"    pm.expect(parsedResponse !== null).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that the response contains the properties expected.",
													"pm.test(\"Response is well-formed and contains the access_token property.\", function () {",
													"    pm.expect(parsedResponse.hasOwnProperty('access_token')).to.be.true;",
													"    pm.expect(parsedResponse.hasOwnProperty('expires_in')).to.be.true;",
													"    pm.expect(parsedResponse.hasOwnProperty('token_type')).to.be.true;",
													"});",
													"",
													"// Check if the parsedResponse has an access-token key",
													"if (parsedResponse.hasOwnProperty('access_token')) {",
													"    ",
													"    // If an access-token exists, then set it as part of the environment",
													"    postman.setEnvironmentVariable('sfccAuthToken', parsedResponse.access_token);",
													"",
													"} "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Basic {{sfccUserCredential}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "grant_type=urn:demandware:params:oauth:grant-type:client-id:dwsid:dwsecuretoken"
										},
										"url": {
											"raw": "{{sfccOAuth2Url}}?client_id={{sfccClientId}}",
											"host": [
												"{{sfccOAuth2Url}}"
											],
											"query": [
												{
													"key": "client_id",
													"value": "{{sfccClientId}}"
												}
											]
										},
										"description": "... retrieves an authToken for a Salesforce B2C Commerce Business Manager user.  The request will encode the username:password:clientSecret via Base64 and seed the encoded string via the sfccUserCredential environment property.  This encoded string is then used to request the authToken."
									},
									"response": []
								},
								{
									"name": "02. Verify the B2C Commerce Order is Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6509dc87-d8cb-4c46-8bfa-b053da2d1364",
												"exec": [
													"// Parse the JSON response",
													"var parsedResponse = JSON.parse(responseBody);",
													"",
													"// Execute a test to validate that the access-token exists",
													"pm.test(\"StatusCode is 200.\", function () {",
													"    pm.expect(responseCode.code === 200).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that we've received a response",
													"pm.test(\"Response is not empty.\", function () {",
													"    pm.expect(responseBody.length > 0).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that the response provided is JSON",
													"pm.test(\"Response is JSON.\", function () {",
													"    pm.expect(parsedResponse !== null).to.be.true;",
													"});",
													"",
													"pm.test(\"Response is of type 'order'.\", function() {",
													"    pm.expect(parsedResponse._type).to.be.equal('order');    ",
													"});",
													"",
													"pm.test(\"Customer information for this order has a 'customer_id' property.\", function() {",
													"    pm.expect(parsedResponse.customer_info.hasOwnProperty('customer_id')).to.be.true;",
													"});",
													"",
													"// Write the order total and e-mail address that we'll use in the next step",
													"pm.environment.set('sfccRegisteredOrderTotal', parsedResponse.order_total);",
													"pm.environment.set('tmpRegisteredOrderEmail', parsedResponse.customer_info.email);",
													"pm.environment.set('tmpRegisteredOrderCustomerId', parsedResponse.customer_info.customer_id);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{sfccAuthToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n     \"query\" : \n     {\n        \"text_query\": { \"fields\": [\"credentials.login\"], \"search_phrase\":\"{{sfccCustomerEmail}}\" }\n     }\n}"
										},
										"url": {
											"raw": "{{sfccShopUrl}}/orders/{{sfccRegisteredOrderNo}}",
											"host": [
												"{{sfccShopUrl}}"
											],
											"path": [
												"orders",
												"{{sfccRegisteredOrderNo}}"
											]
										},
										"description": "... this request attempts to verify that the test-order exists in Salesforce B2C Commerce and is anonymous prior to working with the test order."
									},
									"response": []
								},
								{
									"name": "03. Create Registered Customer Order",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3de4b97e-e1a6-4996-80d3-3d0c678de887",
												"exec": [
													"// Parse the JSON response",
													"var parsedResponse = JSON.parse(responseBody);",
													"",
													"// Execute a test to validate that the access-token exists",
													"pm.test(\"StatusCode is 200.\", function () {",
													"    pm.expect(responseCode.code === 200).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that we've received a response",
													"pm.test(\"Response is not empty.\", function () {",
													"    pm.expect(responseBody.length > 0).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that the response provided is JSON",
													"pm.test(\"Response is JSON.\", function () {",
													"    pm.expect(parsedResponse !== null).to.be.true;",
													"});",
													"",
													"pm.test(\"Service Cloud returned a valid order object response.\", function () {",
													"    pm.expect(parsedResponse.hasOwnProperty('objectType')).to.be.true;",
													"    pm.expect(parsedResponse.hasOwnProperty('recordId')).to.be.true;",
													"    pm.expect(parsedResponse.hasOwnProperty('errors')).to.be.true;",
													"});",
													"",
													"pm.test(\"The response object was of type 'Order'.\", function () {",
													"    pm.expect(parsedResponse.objectType).to.not.equal(null);    ",
													"    pm.expect(parsedResponse.objectType).to.equal('Order');",
													"});",
													"",
													"pm.test(\"The response object contains a valid recordId.\", function () {",
													"    pm.expect(parsedResponse.recordId).to.not.equal(null);",
													"});",
													"",
													"pm.test(\"The response object does not contain any errors.\", function () {",
													"    pm.expect(parsedResponse.errors).to.equal(null);",
													"});",
													"",
													"// Validate that the order was successfully created",
													"if (parsedResponse.hasOwnProperty('recordId') && parsedResponse.recordId !== null) {",
													"",
													"    // Enable a delay  before validating the order details",
													"    setTimeout(function() {",
													"        ",
													"        // Initialize the header object",
													"        var Header = require('postman-collection').Header;",
													"        ",
													"        // Initialize the request options",
													"        var options = { ",
													"            method: 'GET',",
													"            header: [] ",
													"        };",
													"        ",
													"        // Build out the environment url for this request",
													"        options.url = pm.environment.get('serviceCloudUrl') + '/services/apexrest/Order/Placement/' + parsedResponse.recordId;",
													"        ",
													"        // Add the headers to the request definition",
													"        options.header.push(new Header({key: 'Content-Type', value: 'application/json'}));",
													"        options.header.push({key: 'Authorization', value: 'Bearer ' + pm.environment.get('sfscAuthToken')});",
													"    ",
													"        // Invoke the request",
													"        pm.sendRequest(options, function (error, response) {",
													"        ",
													"            // Throw an error if one is caught",
													"            if (error) throw new Error(error);",
													"    ",
													"            // Convert the response to JSON",
													"            var responseJSON = response.json();",
													"            var thisOrder = responseJSON[0];",
													"    ",
													"            pm.test(\"Verify the order is found in Service Cloud.\", function () {",
													"                pm.expect(thisOrder['Id']).to.equal(parsedResponse.recordId);",
													"            });    ",
													"    ",
													"            pm.test(\"Verify the order's SFCC orderId matches the registered order number.\", function () {",
													"                pm.expect(thisOrder['SFCC_Order_Number__c']).to.equal(pm.environment.get('sfccRegisteredOrderNo'));",
													"            });    ",
													"    ",
													"            pm.test(\"Verify the order's Service Cloud total matches the submitted value.\", function () {",
													"                pm.expect(thisOrder['SFCC_Order_Total__c']).to.equal(pm.environment.get('sfccRegisteredOrderTotal'));",
													"            })",
													"",
													"            // Only process the account validation if the order has an acountId    ",
													"            if (thisOrder.hasOwnProperty('AccountId')) {",
													"                ",
													"                // Initialize the header object",
													"                var Header = require('postman-collection').Header;",
													"                ",
													"                // Initialize the request options",
													"                var options = { ",
													"                    method: 'GET',",
													"                    header: [] ",
													"                };",
													"                ",
													"                // Build out the environment url for this request",
													"                options.url = pm.environment.get('serviceCloudUrl') + '/services/apexrest/Contact/Registration/' + thisOrder.AccountId;",
													"                ",
													"                // Add the headers to the request definition",
													"                options.header.push(new Header({key: 'Content-Type', value: 'application/json'}));",
													"                options.header.push({key: 'Authorization', value: 'Bearer ' + pm.environment.get('sfscAuthToken')});",
													"            ",
													"                // Invoke the request",
													"                pm.sendRequest(options, function (error, response) {",
													"                ",
													"                    // Throw an error if one is caught",
													"                    if (error) throw new Error(error);",
													"            ",
													"                    // Convert the response to JSON",
													"                    var responseJSON = response.json();",
													"                    var thisAccount = responseJSON[0];",
													"            ",
													"                    pm.test(\"Verify the customer is created in Service Cloud.\", function () {",
													"                        pm.expect(responseJSON.length).to.equal(1);",
													"                        pm.expect(thisAccount['Id']).to.equal(thisOrder.AccountId);",
													"                    });    ",
													"",
													"                    pm.test(\"Verify the account is mapped to the registered order's email address.\", function () {",
													"                        pm.expect(thisAccount['PersonEmail']).to.equal(pm.environment.get('tmpRegisteredOrderEmail'));",
													"                    }); ",
													"",
													"                    pm.test(\"Verify the account has a Commerce Cloud Id mapped to the registered order's customer record.\", function () {",
													"                        pm.expect(thisAccount['SFCC_Customer_Id__pc']).to.equal(pm.environment.get('tmpRegisteredOrderCustomerId'));",
													"                    }); ",
													"",
													"                    console.log(thisAccount['SFCC_Customer_Id__pc'] + ' - ' + pm.environment.get('tmpRegisteredOrderCustomerId'))",
													"",
													"                });",
													"    ",
													"            }",
													"",
													"        });",
													"        ",
													"    }, pm.environment.get('postRequestDelay'));",
													"    ",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{sfscAuthToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"description": "... represents the content-type of the request.",
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"order_no\":\"{{sfccRegisteredOrderNo}}\",\n\t\"status\":\"Draft\",\n\t\"order_total\":{{sfccRegisteredOrderTotal}},\n\t\"scc_sync_status\":\"Created\",\n\t\"billing_street\":\"{{sfccBillingStreet}}\",\n\t\"billing_city\":\"{{sfccBillingCity}}\",\n\t\"billing_state\":\"{{sfccBillingState}}\",\n\t\"billing_country\":\"{{sfccBillingCountry}}\",\n\t\"billing_postal_code\":\"{{sfccBillingPostalCode}}\",\n\t\"shipping_street\":\"{{sfccShippingStreet}}\",\n\t\"shipping_city\":\"{{sfccShippingCity}}\",\n\t\"shipping_state\":\"{{sfccShippingState}}\",\n\t\"shipping_country\":\"{{sfccShippingCountry}}\",\n\t\"shipping_postal_code\":\"{{sfccShippingPostalCode}}\"\n}\n\n"
										},
										"url": {
											"raw": "{{serviceCloudUrl}}/services/apexrest/Order/Placement/",
											"host": [
												"{{serviceCloudUrl}}"
											],
											"path": [
												"services",
												"apexrest",
												"Order",
												"Placement",
												""
											]
										},
										"description": "... this request can be used to create an order for a registered user within Service Cloud.  As a pre-requisite, please ensure that this order have been created and exists in your Salesforce B2C Commerce instance prior to attempting to create the order records in Service Cloud."
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4a258551-786e-42a4-a6c4-4361fde40383",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "7a0955c1-d29b-431f-bd9f-4542e817c9fc",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Update Status of a Registered Customer Order",
							"item": [
								{
									"name": "00. Retrieve Service Cloud AuthToken",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "12f5cbc7-330d-4cb0-91aa-8b6f5044172b",
												"exec": [
													"",
													"// Clear the contents of the Service Cloud last-case processed environment variable",
													"pm.environment.unset(\"sfscLastCaseRecordId\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a5010dd8-7f42-47b3-bb6c-cac62d262b98",
												"exec": [
													"// Parse the JSON response",
													"var parsedResponse = JSON.parse(responseBody);",
													"",
													"// Check if the parsedResponse has an access-token key",
													"if (parsedResponse.hasOwnProperty('access_token')) {",
													"    ",
													"    // If an access-token exists, then set it as part of the environment",
													"    postman.setEnvironmentVariable('sfscAuthToken', parsedResponse.access_token);",
													"    ",
													"    // Write the serviceCloud Url based on the instance_url in the response",
													"    postman.setEnvironmentVariable('serviceCloudUrl', parsedResponse.instance_url);",
													"    ",
													"}",
													"",
													"// Execute a test to validate that the access-token exists",
													"pm.test(\"StatusCode is 200.\", function () {",
													"    pm.expect(responseCode.code === 200).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that we've received a response",
													"pm.test(\"Response is not empty.\", function () {",
													"    pm.expect(responseBody.length > 0).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that the response provided is JSON",
													"pm.test(\"Response is JSON.\", function () {",
													"    pm.expect(parsedResponse !== null).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that the access-token exists",
													"pm.test(\"Service Cloud AuthToken response contains an access token.\", function () {",
													"    pm.expect(parsedResponse.hasOwnProperty('access_token')).to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"description": "... represents the content-type of the request",
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{authTokenUrl}}/services/oauth2/token?grant_type=password&client_id={{sfscConsumerKey}}&client_secret={{sfscConsumerSecret}}&username={{sfscUsername}}&password={{sfscPassword}}{{sfscSecurityToken}}",
											"protocol": "https",
											"host": [
												"{{authTokenUrl}}"
											],
											"path": [
												"services",
												"oauth2",
												"token"
											],
											"query": [
												{
													"key": "grant_type",
													"value": "password",
													"description": "... represents the grant-type to be performed"
												},
												{
													"key": "client_id",
													"value": "{{sfscConsumerKey}}",
													"description": "... identifies the clientId associated to the SCC Integration User account"
												},
												{
													"key": "client_secret",
													"value": "{{sfscConsumerSecret}}",
													"description": "... identifies the clientSecret associated to the SCC Integration User account"
												},
												{
													"key": "username",
													"value": "{{sfscUsername}}",
													"description": "... identifies the username associated to the SCC Integration User account"
												},
												{
													"key": "password",
													"value": "{{sfscPassword}}{{sfscSecurityToken}}",
													"description": "... represents the password + securityToken associated to the SCC Integration User account"
												}
											]
										},
										"description": "... this request is used to confirm that a REST access token can be retrieve using the credentials and security token associated to the SCC Integration User.  This request leverages the Salesforce grant-type of \"password\".  A successful request will generate an access token of token_type \"Bearer\" that must be attached to all subsequent REST interactions (ex. creating cases, accounts, and orders).\n- For details on this request-type, please visit https://help.salesforce.com/articleView?id=remoteaccess_oauth_username_password_flow.htm&type=5.\n- Once the bearer token has been generated, please update the Authorization tab in the parent project folder to include the generated Bearer token."
									},
									"response": []
								},
								{
									"name": "01. Retrieve Commerce Cloud AuthToken",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "86c21dc4-46c9-4da9-8a77-bb21288a428e",
												"exec": [
													"",
													"// Build the credential string by concatenating the username, password, and clientSecret",
													"credentialString = pm.environment.get(\"sfccUsername\") + ':' + pm.environment.get(\"sfccPassword\") + ':' + pm.environment.get(\"sfccClientSecret\");",
													"",
													"// Encrypt the credential string to base64",
													"rawCredential = CryptoJS.enc.Utf8.parse(credentialString);",
													"encodedCredential = CryptoJS.enc.Base64.stringify(rawCredential);",
													"",
													"// Set the environment variable representing the credential",
													"pm.environment.set(\"sfccUserCredential\", encodedCredential);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "0dc132c9-2c32-41b5-b224-9fb1f872cdc3",
												"exec": [
													"",
													"// Parse the response data",
													"var parsedResponse = JSON.parse(responseBody);",
													"",
													"// Execute a test to validate that the access-token exists",
													"pm.test(\"StatusCode is 200.\", function () {",
													"    pm.expect(responseCode.code === 200).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that we've received a response",
													"pm.test(\"Response is not empty.\", function () {",
													"    pm.expect(responseBody.length > 0).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that the response provided is JSON",
													"pm.test(\"Response is JSON.\", function () {",
													"    pm.expect(parsedResponse !== null).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that the response contains the properties expected.",
													"pm.test(\"Response is well-formed and contains the access_token property.\", function () {",
													"    pm.expect(parsedResponse.hasOwnProperty('access_token')).to.be.true;",
													"    pm.expect(parsedResponse.hasOwnProperty('expires_in')).to.be.true;",
													"    pm.expect(parsedResponse.hasOwnProperty('token_type')).to.be.true;",
													"});",
													"",
													"// Check if the parsedResponse has an access-token key",
													"if (parsedResponse.hasOwnProperty('access_token')) {",
													"    ",
													"    // If an access-token exists, then set it as part of the environment",
													"    postman.setEnvironmentVariable('sfccAuthToken', parsedResponse.access_token);",
													"",
													"} "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Basic {{sfccUserCredential}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "grant_type=urn:demandware:params:oauth:grant-type:client-id:dwsid:dwsecuretoken"
										},
										"url": {
											"raw": "{{sfccOAuth2Url}}?client_id={{sfccClientId}}",
											"host": [
												"{{sfccOAuth2Url}}"
											],
											"query": [
												{
													"key": "client_id",
													"value": "{{sfccClientId}}"
												}
											]
										},
										"description": "... retrieves an authToken for a Salesforce B2C Commerce Business Manager user.  The request will encode the username:password:clientSecret via Base64 and seed the encoded string via the sfccUserCredential environment property.  This encoded string is then used to request the authToken."
									},
									"response": []
								},
								{
									"name": "02. Verify the B2C Commerce Order is Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6509dc87-d8cb-4c46-8bfa-b053da2d1364",
												"exec": [
													"// Parse the JSON response",
													"var parsedResponse = JSON.parse(responseBody);",
													"",
													"// Execute a test to validate that the access-token exists",
													"pm.test(\"StatusCode is 200.\", function () {",
													"    pm.expect(responseCode.code === 200).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that we've received a response",
													"pm.test(\"Response is not empty.\", function () {",
													"    pm.expect(responseBody.length > 0).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that the response provided is JSON",
													"pm.test(\"Response is JSON.\", function () {",
													"    pm.expect(parsedResponse !== null).to.be.true;",
													"});",
													"",
													"pm.test(\"Response is of type 'order'.\", function() {",
													"    pm.expect(parsedResponse._type).to.be.equal('order');    ",
													"});",
													"",
													"pm.test(\"Customer information for this order has a 'customer_id' property.\", function() {",
													"    pm.expect(parsedResponse.customer_info.hasOwnProperty('customer_id')).to.be.true;",
													"});",
													"",
													"// Write the order total and e-mail address that we'll use in the next step",
													"pm.environment.set('sfccRegisteredOrderTotal', parsedResponse.order_total);",
													"pm.environment.set('tmpRegisteredOrderEmail', parsedResponse.customer_info.email);",
													"pm.environment.set('tmpRegisteredOrderCustomerId', parsedResponse.customer_info.customer_id);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{sfccAuthToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n     \"query\" : \n     {\n        \"text_query\": { \"fields\": [\"credentials.login\"], \"search_phrase\":\"{{sfccCustomerEmail}}\" }\n     }\n}"
										},
										"url": {
											"raw": "{{sfccShopUrl}}/orders/{{sfccRegisteredOrderNo}}",
											"host": [
												"{{sfccShopUrl}}"
											],
											"path": [
												"orders",
												"{{sfccRegisteredOrderNo}}"
											]
										},
										"description": "... this request attempts to verify that the test-order exists in Salesforce B2C Commerce and is registered prior to working with the test order."
									},
									"response": []
								},
								{
									"name": "03. Reset the Status of the Registered B2C Commerce Order",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f25e99dd-f1ca-4c51-a04e-35681f538642",
												"exec": [
													"// Parse the JSON response",
													"var parsedResponse = JSON.parse(responseBody);",
													"",
													"// Execute a test to validate that the access-token exists",
													"pm.test(\"StatusCode is 200.\", function () {",
													"    pm.expect(responseCode.code === 200).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that we've received a response",
													"pm.test(\"Response is not empty.\", function () {",
													"    pm.expect(responseBody.length > 0).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that the response provided is JSON",
													"pm.test(\"Response is JSON.\", function () {",
													"    pm.expect(parsedResponse !== null).to.be.true;",
													"});",
													"",
													"pm.test(\"Response is of type 'order'.\", function() {",
													"    pm.expect(parsedResponse._type).to.be.equal('order');    ",
													"});",
													"",
													"pm.test(\"Response has an orderNo of '\" + pm.environment.get('sfccRegisteredOrderNo') + \"'.\", function() {",
													"    pm.expect(parsedResponse.order_no).to.be.equal(pm.environment.get('sfccRegisteredOrderNo'));    ",
													"});",
													"",
													"pm.test(\"Order status is set to '\" + pm.environment.get('tmpResetOrderStatus') + \"'.\", function() {",
													"    pm.expect(parsedResponse.status).to.be.equal(pm.environment.get('tmpResetOrderStatus'));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0e95a4ee-7038-4afc-b75f-e7a70b3fa17c",
												"exec": [
													"// Reset the status for the order we're testing with",
													"pm.environment.set('tmpResetOrderStatus','open');"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{sfccAuthToken}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [
											{
												"key": "x-dw-client-id",
												"value": "{{clientid}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"status\": \"{{tmpResetOrderStatus}}\"\n}"
										},
										"url": {
											"raw": "{{sfccShopUrl}}/orders/{{sfccRegisteredOrderNo}}",
											"host": [
												"{{sfccShopUrl}}"
											],
											"path": [
												"orders",
												"{{sfccRegisteredOrderNo}}"
											]
										},
										"description": "... modifies an order status (see https://goo.gl/RYjRHp for available statuses).  Please update the sfccRegisteredOrderNo environment variable with with identifier representing the order whose status will be modified.  The order status can be managed by setting the 'tmpResetOrderStatus' value in the pre-request script."
									},
									"response": []
								},
								{
									"name": "04. Create Registered Customer Order",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3de4b97e-e1a6-4996-80d3-3d0c678de887",
												"exec": [
													"// Parse the JSON response",
													"var parsedResponse = JSON.parse(responseBody);",
													"",
													"// Execute a test to validate that the access-token exists",
													"pm.test(\"StatusCode is 200.\", function () {",
													"    pm.expect(responseCode.code === 200).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that we've received a response",
													"pm.test(\"Response is not empty.\", function () {",
													"    pm.expect(responseBody.length > 0).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that the response provided is JSON",
													"pm.test(\"Response is JSON.\", function () {",
													"    pm.expect(parsedResponse !== null).to.be.true;",
													"});",
													"",
													"pm.test(\"Service Cloud returned a valid order object response.\", function () {",
													"    pm.expect(parsedResponse.hasOwnProperty('objectType')).to.be.true;",
													"    pm.expect(parsedResponse.hasOwnProperty('recordId')).to.be.true;",
													"    pm.expect(parsedResponse.hasOwnProperty('errors')).to.be.true;",
													"});",
													"",
													"pm.test(\"The response object was of type 'Order'.\", function () {",
													"    pm.expect(parsedResponse.objectType).to.not.equal(null);    ",
													"    pm.expect(parsedResponse.objectType).to.equal('Order');",
													"});",
													"",
													"pm.test(\"The response object contains a valid recordId.\", function () {",
													"    pm.expect(parsedResponse.recordId).to.not.equal(null);",
													"});",
													"",
													"pm.test(\"The response object does not contain any errors.\", function () {",
													"    pm.expect(parsedResponse.errors).to.equal(null);",
													"});",
													"",
													"// Validate that the order was successfully created",
													"if (parsedResponse.hasOwnProperty('recordId') && parsedResponse.recordId !== null) {",
													"",
													"    // Enable a delay  before validating the order details",
													"    setTimeout(function() {",
													"        ",
													"        // Initialize the header object",
													"        var Header = require('postman-collection').Header;",
													"        ",
													"        // Initialize the request options",
													"        var options = { ",
													"            method: 'GET',",
													"            header: [] ",
													"        };",
													"        ",
													"        // Build out the environment url for this request",
													"        options.url = pm.environment.get('serviceCloudUrl') + '/services/apexrest/Order/Placement/' + parsedResponse.recordId;",
													"        ",
													"        // Add the headers to the request definition",
													"        options.header.push(new Header({key: 'Content-Type', value: 'application/json'}));",
													"        options.header.push({key: 'Authorization', value: 'Bearer ' + pm.environment.get('sfscAuthToken')});",
													"    ",
													"        // Invoke the request",
													"        pm.sendRequest(options, function (error, response) {",
													"        ",
													"            // Throw an error if one is caught",
													"            if (error) throw new Error(error);",
													"    ",
													"            // Convert the response to JSON",
													"            var responseJSON = response.json();",
													"            var thisOrder = responseJSON[0];",
													"    ",
													"            pm.test(\"Verify the order is found in Service Cloud.\", function () {",
													"                pm.expect(thisOrder['Id']).to.equal(parsedResponse.recordId);",
													"            });    ",
													"    ",
													"            pm.test(\"Verify the order's SFCC orderId matches the registered order number.\", function () {",
													"                pm.expect(thisOrder['SFCC_Order_Number__c']).to.equal(pm.environment.get('sfccRegisteredOrderNo'));",
													"            });    ",
													"    ",
													"            pm.test(\"Verify the order's Service Cloud total matches the submitted value.\", function () {",
													"                pm.expect(thisOrder['SFCC_Order_Total__c']).to.equal(pm.environment.get('sfccRegisteredOrderTotal'));",
													"            })",
													"",
													"            // Only process the account validation if the order has an acountId    ",
													"            if (thisOrder.hasOwnProperty('AccountId')) {",
													"                ",
													"                // Initialize the header object",
													"                var Header = require('postman-collection').Header;",
													"                ",
													"                // Initialize the request options",
													"                var options = { ",
													"                    method: 'GET',",
													"                    header: [] ",
													"                };",
													"                ",
													"                // Build out the environment url for this request",
													"                options.url = pm.environment.get('serviceCloudUrl') + '/services/apexrest/Contact/Registration/' + thisOrder.AccountId;",
													"                ",
													"                // Add the headers to the request definition",
													"                options.header.push(new Header({key: 'Content-Type', value: 'application/json'}));",
													"                options.header.push({key: 'Authorization', value: 'Bearer ' + pm.environment.get('sfscAuthToken')});",
													"            ",
													"                // Invoke the request",
													"                pm.sendRequest(options, function (error, response) {",
													"                ",
													"                    // Throw an error if one is caught",
													"                    if (error) throw new Error(error);",
													"            ",
													"                    // Convert the response to JSON",
													"                    var responseJSON = response.json();",
													"                    var thisAccount = responseJSON[0];",
													"            ",
													"                    pm.test(\"Verify the customer is created in Service Cloud.\", function () {",
													"                        pm.expect(responseJSON.length).to.equal(1);",
													"                        pm.expect(thisAccount['Id']).to.equal(thisOrder.AccountId);",
													"                    });    ",
													"",
													"                    pm.test(\"Verify the account is mapped to the registered order's email address.\", function () {",
													"                        pm.expect(thisAccount['PersonEmail']).to.equal(pm.environment.get('tmpRegisteredOrderEmail'));",
													"                    }); ",
													"",
													"                    pm.test(\"Verify the account has a Commerce Cloud Id mapped to the registered order's customer record.\", function () {",
													"                        pm.expect(thisAccount['SFCC_Customer_Id__pc']).to.equal(pm.environment.get('tmpRegisteredOrderCustomerId'));",
													"                    }); ",
													"",
													"                    console.log(thisAccount['SFCC_Customer_Id__pc'] + ' - ' + pm.environment.get('tmpRegisteredOrderCustomerId'))",
													"",
													"                });",
													"    ",
													"            }",
													"",
													"        });",
													"        ",
													"    }, pm.environment.get('postRequestDelay'));",
													"    ",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{sfscAuthToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"description": "... represents the content-type of the request.",
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"order_no\":\"{{sfccRegisteredOrderNo}}\",\n\t\"status\":\"Draft\",\n\t\"order_total\":{{sfccRegisteredOrderTotal}},\n\t\"scc_sync_status\":\"Created\"\n}\n\n"
										},
										"url": {
											"raw": "{{serviceCloudUrl}}/services/apexrest/Order/Placement/",
											"host": [
												"{{serviceCloudUrl}}"
											],
											"path": [
												"services",
												"apexrest",
												"Order",
												"Placement",
												""
											]
										},
										"description": "... this request can be used to create an order for a registered user within Service Cloud.  As a pre-requisite, please ensure that this order have been created and exists in your Salesforce B2C Commerce instance prior to attempting to create the order records in Service Cloud."
									},
									"response": []
								},
								{
									"name": "05. Update the Status of the B2C Commerce Order",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f25e99dd-f1ca-4c51-a04e-35681f538642",
												"exec": [
													"// Parse the JSON response",
													"var parsedResponse = JSON.parse(responseBody);",
													"",
													"// Execute a test to validate that the access-token exists",
													"pm.test(\"StatusCode is 200.\", function () {",
													"    pm.expect(responseCode.code === 200).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that we've received a response",
													"pm.test(\"Response is not empty.\", function () {",
													"    pm.expect(responseBody.length > 0).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that the response provided is JSON",
													"pm.test(\"Response is JSON.\", function () {",
													"    pm.expect(parsedResponse !== null).to.be.true;",
													"});",
													"",
													"pm.test(\"Response is of type 'order'.\", function() {",
													"    pm.expect(parsedResponse._type).to.be.equal('order');    ",
													"});",
													"",
													"pm.test(\"Response has an orderNo of '\" + pm.environment.get('sfccRegisteredOrderNo') + \"'.\", function() {",
													"    pm.expect(parsedResponse.order_no).to.be.equal(pm.environment.get('sfccRegisteredOrderNo'));    ",
													"});",
													"",
													"pm.test(\"Order status is set to '\" + pm.environment.get('tmpCancelOrderStatus') + \"'.\", function() {",
													"    pm.expect(parsedResponse.status).to.be.equal(pm.environment.get('tmpCancelOrderStatus'));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0e95a4ee-7038-4afc-b75f-e7a70b3fa17c",
												"exec": [
													"// Update the status for the order we're testing with",
													"pm.environment.set('tmpCancelOrderStatus','cancelled');"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{sfccAuthToken}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [
											{
												"key": "x-dw-client-id",
												"value": "{{clientid}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"status\": \"{{tmpCancelOrderStatus}}\"\n}"
										},
										"url": {
											"raw": "{{sfccShopUrl}}/orders/{{sfccRegisteredOrderNo}}",
											"host": [
												"{{sfccShopUrl}}"
											],
											"path": [
												"orders",
												"{{sfccRegisteredOrderNo}}"
											]
										},
										"description": "... modifies an order status (see https://goo.gl/RYjRHp for available statuses).  Please update the sfccRegisteredOrderNo environment variable with with identifier representing the order whose status will be modified.  The order status can be managed by setting the 'tmpCancelOrderStatus' value in the pre-request script."
									},
									"response": []
								},
								{
									"name": "06. Update Registered Customer Order Status",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3de4b97e-e1a6-4996-80d3-3d0c678de887",
												"exec": [
													"// Parse the JSON response",
													"var parsedResponse = JSON.parse(responseBody);",
													"",
													"// Execute a test to validate that the access-token exists",
													"pm.test(\"StatusCode is 200.\", function () {",
													"    pm.expect(responseCode.code === 200).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that we've received a response",
													"pm.test(\"Response is not empty.\", function () {",
													"    pm.expect(responseBody.length > 0).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that the response provided is JSON",
													"pm.test(\"Response is JSON.\", function () {",
													"    pm.expect(parsedResponse !== null).to.be.true;",
													"});",
													"",
													"pm.test(\"Service Cloud returned a valid order object response.\", function () {",
													"    pm.expect(parsedResponse.hasOwnProperty('objectType')).to.be.true;",
													"    pm.expect(parsedResponse.hasOwnProperty('recordId')).to.be.true;",
													"    pm.expect(parsedResponse.hasOwnProperty('errors')).to.be.true;",
													"});",
													"",
													"pm.test(\"The response object was of type 'Order'.\", function () {",
													"    pm.expect(parsedResponse.objectType).to.not.equal(null);    ",
													"    pm.expect(parsedResponse.objectType).to.equal('Order');",
													"});",
													"",
													"pm.test(\"The response object contains a valid recordId.\", function () {",
													"    pm.expect(parsedResponse.recordId).to.not.equal(null);",
													"});",
													"",
													"pm.test(\"The response object does not contain any errors.\", function () {",
													"    pm.expect(parsedResponse.errors).to.equal(null);",
													"});",
													"",
													"// Validate that the Account was successfully created",
													"if (parsedResponse.hasOwnProperty('recordId') && parsedResponse.recordId !== null) {",
													"    ",
													"    // Give the future-handler time to process",
													"    setTimeout(function(){",
													"        ",
													"        // Initialize the header object",
													"        var Header = require('postman-collection').Header;",
													"        ",
													"        // Initialize the request options",
													"        var options = { ",
													"            method: 'GET',",
													"            header: [] ",
													"        };",
													"        ",
													"        // Build out the environment url for this request",
													"        options.url = pm.environment.get('serviceCloudUrl') + '/services/apexrest/Order/Placement/' + parsedResponse.recordId;",
													"        ",
													"        // Add the headers to the request definition",
													"        options.header.push(new Header({key: 'Content-Type', value: 'application/json'}));",
													"        options.header.push({key: 'Authorization', value: 'Bearer ' + pm.environment.get('sfscAuthToken')});",
													"    ",
													"        // Invoke the request",
													"        pm.sendRequest(options, function (error, response) {",
													"        ",
													"            // Throw an error if one is caught",
													"            if (error) throw new Error(error);",
													"    ",
													"            // Convert the response to JSON",
													"            responseJSON = response.json();",
													"    ",
													"            pm.test(\"Verify the order is found in Service Cloud.\", function () {",
													"                pm.expect(responseJSON[0]['Id']).to.equal(parsedResponse.recordId);",
													"            });    ",
													"    ",
													"            pm.test(\"Verify the order's SFCC orderId matches the registered order number.\", function () {",
													"                pm.expect(responseJSON[0]['SFCC_Order_Number__c']).to.equal(pm.environment.get('sfccRegisteredOrderNo'));",
													"            });    ",
													"            ",
													"            pm.test(\"Verify that the registered order's status has been updated to \" + pm.environment.get('tmpOrderStatus') + \".\", function () {",
													"                pm.expect(responseJSON[0]['Status'].toLowerCase()).to.equal(pm.environment.get('tmpOrderStatus').toLowerCase());",
													"            });",
													"    ",
													"        });        ",
													"        ",
													"    }, pm.environment.get('postRequestDelay'));    ",
													"",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "18812204-a57e-4775-93e7-9ffc5c5c7607",
												"exec": [
													"// Define the variable used to manage the status update.",
													"pm.environment.set('tmpOrderStatus', 'cancelled');"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{sfscAuthToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"description": "... represents the content-type of the request.",
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"order_no\":\"{{sfccRegisteredOrderNo}}\",\n\t\"status\":\"{{tmpOrderStatus}}\",\n\t\"scc_sync_status\":\"Updated\"\n}\n\n"
										},
										"url": {
											"raw": "{{serviceCloudUrl}}/services/apexrest/Order/Placement/",
											"host": [
												"{{serviceCloudUrl}}"
											],
											"path": [
												"services",
												"apexrest",
												"Order",
												"Placement",
												""
											]
										},
										"description": "... this request can be used to update the status of an registered order within Service Cloud.  As a pre-requisite, please ensure that this order have been created and exists in your Salesforce B2C Commerce instance prior to attempting to create the order records in Service Cloud.  You can update the order status via the Pre-request script (set the tmpOrderStatus variable)."
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "acaa983f-e036-40af-a34b-3516d2bc3844",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3e27b62a-6e94-49aa-aa27-acf4f672b505",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Batch Order Processing",
							"item": [
								{
									"name": "00. Retrieve Service Cloud AuthToken",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "12f5cbc7-330d-4cb0-91aa-8b6f5044172b",
												"exec": [
													"",
													"// Clear the contents of the Service Cloud last-case processed environment variable",
													"pm.environment.unset(\"sfscLastCaseRecordId\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a5010dd8-7f42-47b3-bb6c-cac62d262b98",
												"exec": [
													"// Parse the JSON response",
													"var parsedResponse = JSON.parse(responseBody);",
													"",
													"// Check if the parsedResponse has an access-token key",
													"if (parsedResponse.hasOwnProperty('access_token')) {",
													"    ",
													"    // If an access-token exists, then set it as part of the environment",
													"    postman.setEnvironmentVariable('sfscAuthToken', parsedResponse.access_token);",
													"    ",
													"    // Write the serviceCloud Url based on the instance_url in the response",
													"    postman.setEnvironmentVariable('serviceCloudUrl', parsedResponse.instance_url);",
													"    ",
													"}",
													"",
													"// Execute a test to validate that the access-token exists",
													"pm.test(\"StatusCode is 200.\", function () {",
													"    pm.expect(responseCode.code === 200).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that we've received a response",
													"pm.test(\"Response is not empty.\", function () {",
													"    pm.expect(responseBody.length > 0).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that the response provided is JSON",
													"pm.test(\"Response is JSON.\", function () {",
													"    pm.expect(parsedResponse !== null).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that the access-token exists",
													"pm.test(\"Service Cloud AuthToken response contains an access token.\", function () {",
													"    pm.expect(parsedResponse.hasOwnProperty('access_token')).to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"description": "... represents the content-type of the request",
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{authTokenUrl}}/services/oauth2/token?grant_type=password&client_id={{sfscConsumerKey}}&client_secret={{sfscConsumerSecret}}&username={{sfscUsername}}&password={{sfscPassword}}{{sfscSecurityToken}}",
											"protocol": "https",
											"host": [
												"{{authTokenUrl}}"
											],
											"path": [
												"services",
												"oauth2",
												"token"
											],
											"query": [
												{
													"key": "grant_type",
													"value": "password",
													"description": "... represents the grant-type to be performed"
												},
												{
													"key": "client_id",
													"value": "{{sfscConsumerKey}}",
													"description": "... identifies the clientId associated to the SCC Integration User account"
												},
												{
													"key": "client_secret",
													"value": "{{sfscConsumerSecret}}",
													"description": "... identifies the clientSecret associated to the SCC Integration User account"
												},
												{
													"key": "username",
													"value": "{{sfscUsername}}",
													"description": "... identifies the username associated to the SCC Integration User account"
												},
												{
													"key": "password",
													"value": "{{sfscPassword}}{{sfscSecurityToken}}",
													"description": "... represents the password + securityToken associated to the SCC Integration User account"
												}
											]
										},
										"description": "... this request is used to confirm that a REST access token can be retrieve using the credentials and security token associated to the SCC Integration User.  This request leverages the Salesforce grant-type of \"password\".  A successful request will generate an access token of token_type \"Bearer\" that must be attached to all subsequent REST interactions (ex. creating cases, accounts, and orders).\n- For details on this request-type, please visit https://help.salesforce.com/articleView?id=remoteaccess_oauth_username_password_flow.htm&type=5.\n- Once the bearer token has been generated, please update the Authorization tab in the parent project folder to include the generated Bearer token."
									},
									"response": []
								},
								{
									"name": "01. Retrieve Commerce Cloud AuthToken",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "86c21dc4-46c9-4da9-8a77-bb21288a428e",
												"exec": [
													"",
													"// Build the credential string by concatenating the username, password, and clientSecret",
													"credentialString = pm.environment.get(\"sfccUsername\") + ':' + pm.environment.get(\"sfccPassword\") + ':' + pm.environment.get(\"sfccClientSecret\");",
													"",
													"// Encrypt the credential string to base64",
													"rawCredential = CryptoJS.enc.Utf8.parse(credentialString);",
													"encodedCredential = CryptoJS.enc.Base64.stringify(rawCredential);",
													"",
													"// Set the environment variable representing the credential",
													"pm.environment.set(\"sfccUserCredential\", encodedCredential);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "0dc132c9-2c32-41b5-b224-9fb1f872cdc3",
												"exec": [
													"",
													"// Parse the response data",
													"var parsedResponse = JSON.parse(responseBody);",
													"",
													"// Execute a test to validate that the access-token exists",
													"pm.test(\"StatusCode is 200.\", function () {",
													"    pm.expect(responseCode.code === 200).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that we've received a response",
													"pm.test(\"Response is not empty.\", function () {",
													"    pm.expect(responseBody.length > 0).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that the response provided is JSON",
													"pm.test(\"Response is JSON.\", function () {",
													"    pm.expect(parsedResponse !== null).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that the response contains the properties expected.",
													"pm.test(\"Response is well-formed and contains the access_token property.\", function () {",
													"    pm.expect(parsedResponse.hasOwnProperty('access_token')).to.be.true;",
													"    pm.expect(parsedResponse.hasOwnProperty('expires_in')).to.be.true;",
													"    pm.expect(parsedResponse.hasOwnProperty('token_type')).to.be.true;",
													"});",
													"",
													"// Check if the parsedResponse has an access-token key",
													"if (parsedResponse.hasOwnProperty('access_token')) {",
													"    ",
													"    // If an access-token exists, then set it as part of the environment",
													"    postman.setEnvironmentVariable('sfccAuthToken', parsedResponse.access_token);",
													"",
													"} "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Basic {{sfccUserCredential}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "grant_type=urn:demandware:params:oauth:grant-type:client-id:dwsid:dwsecuretoken"
										},
										"url": {
											"raw": "{{sfccOAuth2Url}}?client_id={{sfccClientId}}",
											"host": [
												"{{sfccOAuth2Url}}"
											],
											"query": [
												{
													"key": "client_id",
													"value": "{{sfccClientId}}"
												}
											]
										},
										"description": "... retrieves an authToken for a Salesforce B2C Commerce Business Manager user.  The request will encode the username:password:clientSecret via Base64 and seed the encoded string via the sfccUserCredential environment property.  This encoded string is then used to request the authToken."
									},
									"response": []
								},
								{
									"name": "02. Verify the B2C Commerce Order is Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6509dc87-d8cb-4c46-8bfa-b053da2d1364",
												"exec": [
													"// Parse the JSON response",
													"var parsedResponse = JSON.parse(responseBody);",
													"",
													"// Execute a test to validate that the access-token exists",
													"pm.test(\"StatusCode is 200.\", function () {",
													"    pm.expect(responseCode.code === 200).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that we've received a response",
													"pm.test(\"Response is not empty.\", function () {",
													"    pm.expect(responseBody.length > 0).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that the response provided is JSON",
													"pm.test(\"Response is JSON.\", function () {",
													"    pm.expect(parsedResponse !== null).to.be.true;",
													"});",
													"",
													"pm.test(\"Response is of type 'order'.\", function() {",
													"    pm.expect(parsedResponse._type).to.be.equal('order');    ",
													"});",
													"",
													"pm.test(\"Customer information for this order has a 'customer_id' property.\", function() {",
													"    pm.expect(parsedResponse.customer_info.hasOwnProperty('customer_id')).to.be.true;",
													"});",
													"",
													"// Write the order total and e-mail address that we'll use in the next step",
													"pm.environment.set('sfccRegisteredOrderTotal', parsedResponse.order_total);",
													"pm.environment.set('tmpRegisteredOrderEmail', parsedResponse.customer_info.email);",
													"pm.environment.set('tmpRegisteredOrderCustomerId', parsedResponse.customer_info.customer_id);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{sfccAuthToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n     \"query\" : \n     {\n        \"text_query\": { \"fields\": [\"credentials.login\"], \"search_phrase\":\"{{sfccCustomerEmail}}\" }\n     }\n}"
										},
										"url": {
											"raw": "{{sfccShopUrl}}/orders/{{sfccRegisteredOrderNo}}",
											"host": [
												"{{sfccShopUrl}}"
											],
											"path": [
												"orders",
												"{{sfccRegisteredOrderNo}}"
											]
										},
										"description": "... this request attempts to verify that the test-order exists in Salesforce B2C Commerce and is anonymous prior to working with the test order."
									},
									"response": []
								},
								{
									"name": "03. Verify the B2C Commerce Order is Anonymous",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6509dc87-d8cb-4c46-8bfa-b053da2d1364",
												"exec": [
													"// Parse the JSON response",
													"var parsedResponse = JSON.parse(responseBody);",
													"",
													"// Execute a test to validate that the access-token exists",
													"pm.test(\"StatusCode is 200.\", function () {",
													"    pm.expect(responseCode.code === 200).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that we've received a response",
													"pm.test(\"Response is not empty.\", function () {",
													"    pm.expect(responseBody.length > 0).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that the response provided is JSON",
													"pm.test(\"Response is JSON.\", function () {",
													"    pm.expect(parsedResponse !== null).to.be.true;",
													"});",
													"",
													"pm.test(\"Response is of type 'order'.\", function() {",
													"    pm.expect(parsedResponse._type).to.be.equal('order');    ",
													"});",
													"",
													"pm.test(\"Customer information for this order does not have a 'customer_no' property.\", function() {",
													"    pm.expect(parsedResponse.customer_info.hasOwnProperty('customer_no')).to.be.false;",
													"});",
													"",
													"// Write the order total and e-mail address that we'll use in the next step",
													"pm.environment.set('sfccAnonymousOrderTotal', parsedResponse.order_total);",
													"pm.environment.set('tmpAnonymousOrderEmail', parsedResponse.customer_info.email);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{sfccAuthToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n     \"query\" : \n     {\n        \"text_query\": { \"fields\": [\"credentials.login\"], \"search_phrase\":\"{{sfccCustomerEmail}}\" }\n     }\n}"
										},
										"url": {
											"raw": "{{sfccShopUrl}}/orders/{{sfccAnonymousOrderNo}}",
											"host": [
												"{{sfccShopUrl}}"
											],
											"path": [
												"orders",
												"{{sfccAnonymousOrderNo}}"
											]
										},
										"description": "... this request attempts to verify that the test-order exists in Salesforce B2C Commerce and is anonymous prior to working with the test order."
									},
									"response": []
								},
								{
									"name": "04. Reset the Status of the Anonymous B2C Commerce Order",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f25e99dd-f1ca-4c51-a04e-35681f538642",
												"exec": [
													"// Parse the JSON response",
													"var parsedResponse = JSON.parse(responseBody);",
													"",
													"// Execute a test to validate that the access-token exists",
													"pm.test(\"StatusCode is 200.\", function () {",
													"    pm.expect(responseCode.code === 200).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that we've received a response",
													"pm.test(\"Response is not empty.\", function () {",
													"    pm.expect(responseBody.length > 0).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that the response provided is JSON",
													"pm.test(\"Response is JSON.\", function () {",
													"    pm.expect(parsedResponse !== null).to.be.true;",
													"});",
													"",
													"pm.test(\"Response is of type 'order'.\", function() {",
													"    pm.expect(parsedResponse._type).to.be.equal('order');    ",
													"});",
													"",
													"pm.test(\"Response has an orderNo of '\" + pm.environment.get('sfccAnonymousOrderNo') + \"'.\", function() {",
													"    pm.expect(parsedResponse.order_no).to.be.equal(pm.environment.get('sfccAnonymousOrderNo'));    ",
													"});",
													"",
													"pm.test(\"Order status is set to '\" + pm.environment.get('tmpResetOrderStatus') + \"'.\", function() {",
													"    pm.expect(parsedResponse.status).to.be.equal(pm.environment.get('tmpResetOrderStatus'));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0e95a4ee-7038-4afc-b75f-e7a70b3fa17c",
												"exec": [
													"// Reset the status for the order we're testing with",
													"pm.environment.set('tmpResetOrderStatus','open');"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{sfccAuthToken}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [
											{
												"key": "x-dw-client-id",
												"value": "{{clientid}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"status\": \"{{tmpResetOrderStatus}}\"\n}"
										},
										"url": {
											"raw": "{{sfccShopUrl}}/orders/{{sfccAnonymousOrderNo}}",
											"host": [
												"{{sfccShopUrl}}"
											],
											"path": [
												"orders",
												"{{sfccAnonymousOrderNo}}"
											]
										},
										"description": "... modifies an order status (see https://goo.gl/RYjRHp for available statuses).  Please update the sfccAnonymousOrderNo environment variable with with identifier representing the order whose status will be modified.  The order status can be managed by setting the 'tmpResetOrderStatus' value in the pre-request script."
									},
									"response": []
								},
								{
									"name": "05. Reset the Status of the Registered B2C Commerce Order",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f25e99dd-f1ca-4c51-a04e-35681f538642",
												"exec": [
													"// Parse the JSON response",
													"var parsedResponse = JSON.parse(responseBody);",
													"",
													"// Execute a test to validate that the access-token exists",
													"pm.test(\"StatusCode is 200.\", function () {",
													"    pm.expect(responseCode.code === 200).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that we've received a response",
													"pm.test(\"Response is not empty.\", function () {",
													"    pm.expect(responseBody.length > 0).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that the response provided is JSON",
													"pm.test(\"Response is JSON.\", function () {",
													"    pm.expect(parsedResponse !== null).to.be.true;",
													"});",
													"",
													"pm.test(\"Response is of type 'order'.\", function() {",
													"    pm.expect(parsedResponse._type).to.be.equal('order');    ",
													"});",
													"",
													"pm.test(\"Response has an orderNo of '\" + pm.environment.get('sfccRegisteredOrderNo') + \"'.\", function() {",
													"    pm.expect(parsedResponse.order_no).to.be.equal(pm.environment.get('sfccRegisteredOrderNo'));    ",
													"});",
													"",
													"pm.test(\"Order status is set to '\" + pm.environment.get('tmpResetOrderStatus') + \"'.\", function() {",
													"    pm.expect(parsedResponse.status).to.be.equal(pm.environment.get('tmpResetOrderStatus'));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0e95a4ee-7038-4afc-b75f-e7a70b3fa17c",
												"exec": [
													"// Reset the status for the order we're testing with",
													"pm.environment.set('tmpResetOrderStatus','open');"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{sfccAuthToken}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [
											{
												"key": "x-dw-client-id",
												"value": "{{clientid}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"status\": \"{{tmpResetOrderStatus}}\"\n}"
										},
										"url": {
											"raw": "{{sfccShopUrl}}/orders/{{sfccRegisteredOrderNo}}",
											"host": [
												"{{sfccShopUrl}}"
											],
											"path": [
												"orders",
												"{{sfccRegisteredOrderNo}}"
											]
										},
										"description": "... modifies an order status (see https://goo.gl/RYjRHp for available statuses).  Please update the sfccRegisteredOrderNo environment variable with with identifier representing the order whose status will be modified.  The order status can be managed by setting the 'tmpResetOrderStatus' value in the pre-request script."
									},
									"response": []
								},
								{
									"name": "06. Create Registered and Anonymous Customer Orders via Batch",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a7fd9c00-7b3e-4d01-8e95-228f5d6c8961",
												"exec": [
													"// Parse the JSON response",
													"var parsedResponse = JSON.parse(responseBody);",
													"",
													"// Create a re-useable function to validate orders",
													"function validateOrderInServiceCloud(orderObject) {",
													"",
													"    // Initialize the header object",
													"    var Header = require('postman-collection').Header;",
													"    ",
													"    // Initialize the request options",
													"    var options = { ",
													"        method: 'GET',",
													"        header: [] ",
													"    };",
													"    ",
													"    // Build out the environment url for this request",
													"    options.url = pm.environment.get('serviceCloudUrl') + '/services/apexrest/Order/Placement/' + orderObject.recordId;",
													"    ",
													"    // Add the headers to the request definition",
													"    options.header.push(new Header({key: 'Content-Type', value: 'application/json'}));",
													"    options.header.push({key: 'Authorization', value: 'Bearer ' + pm.environment.get('sfscAuthToken')});",
													"",
													"    // Invoke the request",
													"    pm.sendRequest(options, function (error, response) {",
													"    ",
													"        // Throw an error if one is caught",
													"        if (error) throw new Error(error);",
													"",
													"        // Convert the response to JSON",
													"        var responseJSON = response.json();",
													"        ",
													"        pm.test(\"Verify the order response for \" + orderObject.recordId + \" contains at least (1) item.\", function () {",
													"            pm.expect(responseJSON.length).to.equal(1);",
													"        });                     ",
													"        ",
													"        // Create a reference to the current order",
													"        var thisTestOrder = responseJSON[0];",
													"",
													"        pm.test(\"Verify the order for \" + orderObject.recordId + \" is created in Service Cloud.\", function () {",
													"            pm.expect(orderObject.recordId).to.be.equal(thisTestOrder.Id);",
													"        });    ",
													"",
													"    });",
													"    ",
													"}",
													"",
													"// Execute a test to validate that the access-token exists",
													"pm.test(\"StatusCode is 200.\", function () {",
													"    pm.expect(responseCode.code === 200).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that we've received a response",
													"pm.test(\"Response is not empty.\", function () {",
													"    pm.expect(responseBody.length > 0).to.be.true;",
													"});",
													"",
													"// Execute a test to validate that the response provided is JSON",
													"pm.test(\"Response is JSON.\", function () {",
													"    pm.expect(parsedResponse !== null).to.be.true;",
													"});",
													"",
													"pm.test(\"Service Cloud returned two objects.\", function () {",
													"    pm.expect(parsedResponse.length).to.be.equal(2);",
													"});",
													"",
													"// Only process the validation results if at least one order was returned",
													"if (parsedResponse.length > 0) {",
													"",
													"    // Enable a deplay before attempting to validate each account",
													"    setTimeout( function() {",
													"    ",
													"        // Loop over the collection of parsed orders and validate each one",
													"        for (var orderIndex = 0; orderIndex < parsedResponse.length; orderIndex++) {",
													"            ",
													"            // Create a reference to the current order object",
													"            var thisOrder = parsedResponse[orderIndex];",
													"            var orderKey = orderIndex.toString() + \":\" + thisOrder.recordId;",
													"            ",
													"            pm.test(\"The response object for \" + orderKey + \" was of type 'Order'.\", function () {",
													"                pm.expect(thisOrder.objectType).to.not.equal(null);    ",
													"                pm.expect(thisOrder.objectType).to.equal('Order');",
													"            });",
													"            ",
													"            pm.test(\"The response object for \" + orderKey + \" contains a valid recordId.\", function () {",
													"                pm.expect(thisOrder.recordId).to.not.equal(null);",
													"            });",
													"            ",
													"            pm.test(\"The response object for \" + orderKey + \" does not contain any errors.\", function () {",
													"                pm.expect(thisOrder.errors).to.equal(null);",
													"            });",
													"            ",
													"            // Validate the order exists in Service Cloud",
													"            validateOrderInServiceCloud(thisOrder);",
													"        ",
													"        }",
													"        ",
													"    }, pm.environment.get('postRequestDelay'));",
													"    ",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{sfscAuthToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"description": "... represents the content-type of the request.",
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n\t{\n\t\t\"order_no\":\"{{sfccAnonymousOrderNo}}\",\n\t\t\"status\":\"Draft\",\n\t\t\"order_total\":{{sfccAnonymousOrderTotal}},\n\t\t\"scc_sync_status\":\"Created\",\n\t\t\"billing_street\":\"{{sfccBillingStreet}}\",\n\t    \"billing_city\":\"{{sfccBillingCity}}\",\n\t    \"billing_state\":\"{{sfccBillingState}}\",\n     \t\"billing_country\":\"{{sfccBillingCountry}}\",\n    \t\"billing_postal_code\":\"{{sfccBillingPostalCode}},\n\t    \"shipping_street\":\"{{sfccShippingStreet}}\",\n\t    \"shipping_city\":\"{{sfccShippingCity}}\",\n\t    \"shipping_state\":\"{{sfccShippingState}}\",\n\t    \"shipping_country\":\"{{sfccShippingCountry}}\",\n\t    \"shipping_postal_code\":\"{{sfccShippingPostalCode}}\"\n\t},\n\t\n\t{\n\t\t\"order_no\":\"{{sfccRegisteredOrderNo}}\",\n\t\t\"status\":\"Draft\",\n\t\t\"order_total\":{{sfccRegisteredOrderTotal}},\n\t\t\"scc_sync_status\":\"Created\",\n\t\t\"billing_street\":\"{{sfccBillingStreet}}\",\n\t\"billing_city\":\"{{sfccBillingCity}}\",\n\t\"billing_state\":\"{{sfccBillingState}}\",\n\t\"billing_country\":\"{{sfccBillingCountry}}\",\n\t\"billing_postal_code\":\"{{sfccBillingPostalCode}}\",\n\t\"shipping_street\":\"{{sfccShippingStreet}}\",\n\t\"shipping_city\":\"{{sfccShippingCity}}\",\n\t\"shipping_state\":\"{{sfccShippingState}}\",\n\t\"shipping_country\":\"{{sfccShippingCountry}}\",\n\t\"shipping_postal_code\":\"{{sfccShippingPostalCode}}\"\n\t}\n\n]"
										},
										"url": {
											"raw": "{{serviceCloudUrl}}/services/apexrest/Order/Placement/Batch",
											"host": [
												"{{serviceCloudUrl}}"
											],
											"path": [
												"services",
												"apexrest",
												"Order",
												"Placement",
												"Batch"
											]
										},
										"description": "... this request can be used to register multiple placed orders via the order-batch service.  As a pre-requisite, please ensure that these orders have been created and exit in your Salesforce B2C Commerce instance prior to attempting to create the order records in Service Cloud."
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Retrieve Service Cloud AuthToken",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "12f5cbc7-330d-4cb0-91aa-8b6f5044172b",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a5010dd8-7f42-47b3-bb6c-cac62d262b98",
								"exec": [
									"// Audit the post-execution test script",
									"console.log(' ----------------------------------------------------------');",
									"console.log(' - START: Executing SFSC RetrieveAuthToken Post-Execution Script')",
									"console.log(' ----------------------------------------------------------');",
									"",
									"// Parse the response data",
									"var parsedResponse = JSON.parse(responseBody);",
									"",
									"// Check if the parsedResponse has an access-token key",
									"if (parsedResponse.hasOwnProperty('access_token')) {",
									"    ",
									"    // If an access-token exists, then set it as part of the environment",
									"    postman.setEnvironmentVariable('sfscAuthToken', parsedResponse.access_token);",
									"    ",
									"    // Write the serviceCloud Url based on the instance_url in the response",
									"    postman.setEnvironmentVariable('serviceCloudUrl', parsedResponse.instance_url);",
									"    ",
									"    // Audit that the access Token was successfully written",
									"    console.log(' - successfully retrieved and wrote authorization token and instance url');",
									"    console.log(' - ' + parsedResponse.access_token);",
									"    console.log(' - ' + parsedResponse.instance_url);",
									"    ",
									"} else {",
									"    ",
									"    // Audit that no auth-token was found in the parsed response",
									"    console.log(' - please check your credentials and examine the response; no authorization token was found');",
									"    ",
									"}",
									"",
									"console.log(' ----------------------------------------------------------');",
									"console.log(' -   END: Executing SFSC RetrieveAuthToken Post-Execution Script')",
									"console.log(' ----------------------------------------------------------');",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "... represents the content-type of the request",
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{authTokenUrl}}/services/oauth2/token?grant_type=password&client_id={{sfscConsumerKey}}&client_secret={{sfscConsumerSecret}}&username={{sfscUsername}}&password={{sfscPassword}}{{sfscSecurityToken}}",
							"protocol": "https",
							"host": [
								"{{authTokenUrl}}"
							],
							"path": [
								"services",
								"oauth2",
								"token"
							],
							"query": [
								{
									"key": "grant_type",
									"value": "password",
									"description": "... represents the grant-type to be performed"
								},
								{
									"key": "client_id",
									"value": "{{sfscConsumerKey}}",
									"description": "... identifies the clientId associated to the SCC Integration User account"
								},
								{
									"key": "client_secret",
									"value": "{{sfscConsumerSecret}}",
									"description": "... identifies the clientSecret associated to the SCC Integration User account"
								},
								{
									"key": "username",
									"value": "{{sfscUsername}}",
									"description": "... identifies the username associated to the SCC Integration User account"
								},
								{
									"key": "password",
									"value": "{{sfscPassword}}{{sfscSecurityToken}}",
									"description": "... represents the password + securityToken associated to the SCC Integration User account"
								}
							]
						},
						"description": "... this request is used to confirm that a REST access token can be retrieve using the credentials and security token associated to the SCC Integration User.  This request leverages the Salesforce grant-type of \"password\".  A successful request will generate an access token of token_type \"Bearer\" that must be attached to all subsequent REST interactions (ex. creating cases, accounts, and orders).\n- For details on this request-type, please visit https://help.salesforce.com/articleView?id=remoteaccess_oauth_username_password_flow.htm&type=5.\n- Once the bearer token has been generated, please update the Authorization tab in the parent project folder to include the generated Bearer token."
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "00D0b000000D5tR!ARYAQPRVxfWlJmUynO0.8JfiPfRSkUVTfCVXN0yksEY5plUnamyb3J9ANSEHiwgvnGol5UcsHWZNltDeii5r8naz.joOSZLk",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "c42eeacd-495d-48d5-8f79-ee7c56e6be62",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "3615baeb-a096-40e0-920e-461bd7dca8cc",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Service Cloud Requests",
			"item": [
				{
					"name": "Retrieve Service Cloud AuthToken",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "12f5cbc7-330d-4cb0-91aa-8b6f5044172b",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a5010dd8-7f42-47b3-bb6c-cac62d262b98",
								"exec": [
									"// Audit the post-execution test script",
									"console.log(' ----------------------------------------------------------');",
									"console.log(' - START: Executing SFSC RetrieveAuthToken Post-Execution Script')",
									"console.log(' ----------------------------------------------------------');",
									"",
									"// Parse the response data",
									"var parsedResponse = JSON.parse(responseBody);",
									"",
									"// Check if the parsedResponse has an access-token key",
									"if (parsedResponse.hasOwnProperty('access_token')) {",
									"    ",
									"    // If an access-token exists, then set it as part of the environment",
									"    postman.setEnvironmentVariable('sfscAuthToken', parsedResponse.access_token);",
									"    ",
									"    // Write the serviceCloud Url based on the instance_url in the response",
									"    postman.setEnvironmentVariable('serviceCloudUrl', parsedResponse.instance_url);",
									"    ",
									"    // Audit that the access Token was successfully written",
									"    console.log(' - successfully retrieved and wrote authorization token and instance url');",
									"    console.log(' - ' + parsedResponse.access_token);",
									"    console.log(' - ' + parsedResponse.instance_url);",
									"    ",
									"} else {",
									"    ",
									"    // Audit that no auth-token was found in the parsed response",
									"    console.log(' - please check your credentials and examine the response; no authorization token was found');",
									"    ",
									"}",
									"",
									"console.log(' ----------------------------------------------------------');",
									"console.log(' -   END: Executing SFSC RetrieveAuthToken Post-Execution Script')",
									"console.log(' ----------------------------------------------------------');",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "... represents the content-type of the request",
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{authTokenUrl}}/services/oauth2/token?grant_type=password&client_id={{sfscConsumerKey}}&client_secret={{sfscConsumerSecret}}&username={{sfscUsername}}&password={{sfscPassword}}{{sfscSecurityToken}}",
							"protocol": "https",
							"host": [
								"{{authTokenUrl}}"
							],
							"path": [
								"services",
								"oauth2",
								"token"
							],
							"query": [
								{
									"key": "grant_type",
									"value": "password",
									"description": "... represents the grant-type to be performed"
								},
								{
									"key": "client_id",
									"value": "{{sfscConsumerKey}}",
									"description": "... identifies the clientId associated to the SCC Integration User account"
								},
								{
									"key": "client_secret",
									"value": "{{sfscConsumerSecret}}",
									"description": "... identifies the clientSecret associated to the SCC Integration User account"
								},
								{
									"key": "username",
									"value": "{{sfscUsername}}",
									"description": "... identifies the username associated to the SCC Integration User account"
								},
								{
									"key": "password",
									"value": "{{sfscPassword}}{{sfscSecurityToken}}",
									"description": "... represents the password + securityToken associated to the SCC Integration User account"
								}
							]
						},
						"description": "... this request is used to confirm that a REST access token can be retrieve using the credentials and security token associated to the SCC Integration User.  This request leverages the Salesforce grant-type of \"password\".  A successful request will generate an access token of token_type \"Bearer\" that must be attached to all subsequent REST interactions (ex. creating cases, accounts, and orders).\n- For details on this request-type, please visit https://help.salesforce.com/articleView?id=remoteaccess_oauth_username_password_flow.htm&type=5.\n- Once the bearer token has been generated, please update the Authorization tab in the parent project folder to include the generated Bearer token."
					},
					"response": []
				},
				{
					"name": "Get Cases for Account",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "fe9dec86-faa2-4da0-8a84-3e441742c616",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "fbe76d9f-a2da-44a8-8584-b6d68e9cb6d1",
								"exec": [
									"// Parse the JSON response",
									"var parsedResponse = JSON.parse(responseBody);",
									"",
									"// Retrieve the collection of recorded caseIds",
									"var caseIds = pm.environment.get('tmpCaseIds');",
									"var caseObjects = {};",
									"",
									"// Execute a test to validate that the access-token exists",
									"pm.test(\"StatusCode is 200.\", function () {",
									"    pm.expect(responseCode.code === 200).to.be.true;",
									"});",
									"",
									"// Execute a test to validate that we've received a response",
									"pm.test(\"Response is not empty.\", function () {",
									"    pm.expect(responseBody.length > 0).to.be.true;",
									"});",
									"",
									"// Execute a test to validate that the response provided is JSON",
									"pm.test(\"Response is JSON.\", function () {",
									"    pm.expect(parsedResponse !== null).to.be.true;",
									"});",
									"",
									"pm.test(\"Service Cloud returned at least two cases.\", function () {",
									"    pm.expect(parsedResponse.length).of.at.least(2);",
									"});",
									"",
									"// Convert the collection of cases into an object",
									"if (parsedResponse.length > 0) {",
									"    ",
									"    // Loop over the collection of cases and capture the ID for each",
									"    for (var caseIndex = 0; caseIndex < parsedResponse.length; caseIndex++) {",
									"        ",
									"        // Create a reference to the current case",
									"        var thisCase = parsedResponse[caseIndex];",
									"        ",
									"        // Capy the case to the objects collection",
									"        caseObjects[thisCase.Id] = thisCase;",
									"        ",
									"    }",
									"    ",
									"    // Check if we've found the cases that were created",
									"    for (var caseIndex = 0; caseIndex < caseIds.length; caseIndex++) {",
									"        ",
									"        // Create a reference to the current caseId",
									"        var thisCase = caseIds[caseIndex];",
									"        ",
									"        // Verity that the case(s) we're tracking were created in Service Cloud",
									"        pm.test(\"Verify that case [\" + thisCase + \"] is created in Service Cloud.\", function () {",
									"            pm.expect(caseObjects.hasOwnProperty(thisCase)).to.be.true;",
									"        }); ",
									"        ",
									"    }",
									"    ",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{sfscAuthToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"description": "... represents the content-type of the request.",
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"first_name\":\"{{sfccCustomerFirstName}}\",\n\t\"last_name\":\"{{sfccCustomerLastName}}\",\n\t\"email\":\"{{sfccCustomerEmail}}\",\n\t\"phone\":\"555-555-1212\",\n\t\"case_type\":\"ContactUs\",\n\t\"order_no\": \"00000100\",\n\t\"case_sub_type\":\"General Information\",\n\t\"subject\":\"General Information\",\n\t\"description\":\"Testing case creation via the storefront for a registered customer.  This should result in a PersonAccount being created, a case being created, and the case being mapped to the newly created PersonAccount.\",\n\t\"customer_id\":\"{{sfccCustomerId}}\"\n}"
						},
						"url": {
							"raw": "{{serviceCloudUrl}}/services/apexrest/Case/{{tmpAccountId}}",
							"host": [
								"{{serviceCloudUrl}}"
							],
							"path": [
								"services",
								"apexrest",
								"Case",
								"{{tmpAccountId}}"
							]
						},
						"description": "This request will retrieve all of the cases associated to an Account in Service Cloud."
					},
					"response": []
				},
				{
					"name": "Get Case Details (Manual) .",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fcf74074-63d5-42d8-8eda-78aba4283728",
								"exec": [
									"// Parse the JSON response",
									"var parsedResponse = JSON.parse(responseBody);",
									"",
									"// Execute a test to validate that the access-token exists",
									"pm.test(\"StatusCode is 200.\", function () {",
									"    pm.expect(responseCode.code === 200).to.be.true;",
									"});",
									"",
									"// Execute a test to validate that we've received a response",
									"pm.test(\"Response is not empty.\", function () {",
									"    pm.expect(responseBody.length > 0).to.be.true;",
									"});",
									"",
									"// Execute a test to validate that the response provided is JSON",
									"pm.test(\"Response is JSON.\", function () {",
									"    pm.expect(parsedResponse !== null).to.be.true;",
									"});",
									"",
									"pm.test(\"Service Cloud returned a valid account object response.\", function () {",
									"    pm.expect(parsedResponse.hasOwnProperty('Id')).to.be.true;",
									"    pm.expect(parsedResponse.hasOwnProperty('FirstName')).to.be.true;",
									"    pm.expect(parsedResponse.hasOwnProperty('LastName')).to.be.true;",
									"    pm.expect(parsedResponse.hasOwnProperty('PersonEmail')).to.be.true;",
									"});",
									"",
									"pm.test(\"The response object was of type 'Account'.\", function () {",
									"    pm.expect(parsedResponse.attributes.type).to.equal('Account');    ",
									"});",
									"",
									"pm.test(\"The Id of this Account matches the requestId.\", function () {",
									"    pm.expect(parsedResponse.Id).to.equal(pm.environment.get('tmpAccountId'));    ",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{sfscAuthToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"description": "... represents the content-type of the request.",
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"first_name\":\"{{sfccCustomerFirstName}}\",\n\t\"last_name\":\"{{sfccCustomerLastName}}\",\n\t\"email\":\"{{sfccCustomerEmail}}\",\n\t\"customer_id\":\"{{sfccCustomerId}}\",\n\t\"customer_no\":\"{{sfccCustomerNo}}\"\n}"
						},
						"url": {
							"raw": "{{serviceCloudUrl}}/services/apexrest/Case/",
							"host": [
								"{{serviceCloudUrl}}"
							],
							"path": [
								"services",
								"apexrest",
								"Case",
								""
							]
						},
						"description": "This will verify that a case is created is Service Cloud.  You can specify either a CaseID or an AccountID as part of this request."
					},
					"response": []
				},
				{
					"name": "Get Customer Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fcf74074-63d5-42d8-8eda-78aba4283728",
								"exec": [
									"// Parse the JSON response",
									"var parsedResponse = JSON.parse(responseBody);",
									"",
									"// Execute a test to validate that the access-token exists",
									"pm.test(\"StatusCode is 200.\", function () {",
									"    pm.expect(responseCode.code === 200).to.be.true;",
									"});",
									"",
									"// Execute a test to validate that we've received a response",
									"pm.test(\"Response is not empty.\", function () {",
									"    pm.expect(responseBody.length > 0).to.be.true;",
									"});",
									"",
									"// Execute a test to validate that the response provided is JSON",
									"pm.test(\"Response is JSON.\", function () {",
									"    pm.expect(parsedResponse !== null).to.be.true;",
									"});",
									"",
									"pm.test(\"Service Cloud returned a valid account object response.\", function () {",
									"    pm.expect(parsedResponse.hasOwnProperty('Id')).to.be.true;",
									"    pm.expect(parsedResponse.hasOwnProperty('FirstName')).to.be.true;",
									"    pm.expect(parsedResponse.hasOwnProperty('LastName')).to.be.true;",
									"    pm.expect(parsedResponse.hasOwnProperty('PersonEmail')).to.be.true;",
									"});",
									"",
									"pm.test(\"The response object was of type 'Account'.\", function () {",
									"    pm.expect(parsedResponse.attributes.type).to.equal('Account');    ",
									"});",
									"",
									"pm.test(\"The Id of this Account matches the requestId.\", function () {",
									"    pm.expect(parsedResponse.Id).to.equal(pm.environment.get('tmpAccountId'));    ",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{sfscAuthToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"description": "... represents the content-type of the request.",
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"first_name\":\"{{sfccCustomerFirstName}}\",\n\t\"last_name\":\"{{sfccCustomerLastName}}\",\n\t\"email\":\"{{sfccCustomerEmail}}\",\n\t\"customer_id\":\"{{sfccCustomerId}}\",\n\t\"customer_no\":\"{{sfccCustomerNo}}\"\n}"
						},
						"url": {
							"raw": "{{serviceCloudUrl}}/services/apexrest/Contact/Registration/{{tmpAccountId}}",
							"host": [
								"{{serviceCloudUrl}}"
							],
							"path": [
								"services",
								"apexrest",
								"Contact",
								"Registration",
								"{{tmpAccountId}}"
							]
						},
						"description": "... this request will validate that an customer exists in Service Cloud."
					},
					"response": []
				},
				{
					"name": "Get Customer Details (Manual)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fcf74074-63d5-42d8-8eda-78aba4283728",
								"exec": [
									"// Parse the JSON response",
									"var parsedResponse = JSON.parse(responseBody);",
									"",
									"// Execute a test to validate that the access-token exists",
									"pm.test(\"StatusCode is 200.\", function () {",
									"    pm.expect(responseCode.code === 200).to.be.true;",
									"});",
									"",
									"// Execute a test to validate that we've received a response",
									"pm.test(\"Response is not empty.\", function () {",
									"    pm.expect(responseBody.length > 0).to.be.true;",
									"});",
									"",
									"// Execute a test to validate that the response provided is JSON",
									"pm.test(\"Response is JSON.\", function () {",
									"    pm.expect(parsedResponse !== null).to.be.true;",
									"});",
									"",
									"pm.test(\"Service Cloud returned a valid account object response.\", function () {",
									"    pm.expect(parsedResponse.hasOwnProperty('Id')).to.be.true;",
									"    pm.expect(parsedResponse.hasOwnProperty('FirstName')).to.be.true;",
									"    pm.expect(parsedResponse.hasOwnProperty('LastName')).to.be.true;",
									"    pm.expect(parsedResponse.hasOwnProperty('PersonEmail')).to.be.true;",
									"});",
									"",
									"pm.test(\"The response object was of type 'Account'.\", function () {",
									"    pm.expect(parsedResponse.attributes.type).to.equal('Account');    ",
									"});",
									"",
									"pm.test(\"The Id of this Account matches the requestId.\", function () {",
									"    pm.expect(parsedResponse.Id).to.equal(pm.environment.get('tmpAccountId'));    ",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{sfscAuthToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"description": "... represents the content-type of the request.",
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"first_name\":\"{{sfccCustomerFirstName}}\",\n\t\"last_name\":\"{{sfccCustomerLastName}}\",\n\t\"email\":\"{{sfccCustomerEmail}}\",\n\t\"customer_id\":\"{{sfccCustomerId}}\",\n\t\"customer_no\":\"{{sfccCustomerNo}}\"\n}"
						},
						"url": {
							"raw": "{{serviceCloudUrl}}/services/apexrest/Contact/Registration/",
							"host": [
								"{{serviceCloudUrl}}"
							],
							"path": [
								"services",
								"apexrest",
								"Contact",
								"Registration",
								""
							]
						},
						"description": "... this request will validate that an customer exists in Service Cloud."
					},
					"response": []
				},
				{
					"name": "Get Order Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fcf74074-63d5-42d8-8eda-78aba4283728",
								"exec": [
									"// Parse the JSON response",
									"var parsedResponse = JSON.parse(responseBody);",
									"",
									"// Execute a test to validate that the access-token exists",
									"pm.test(\"StatusCode is 200.\", function () {",
									"    pm.expect(responseCode.code === 200).to.be.true;",
									"});",
									"",
									"// Execute a test to validate that we've received a response",
									"pm.test(\"Response is not empty.\", function () {",
									"    pm.expect(responseBody.length > 0).to.be.true;",
									"});",
									"",
									"// Execute a test to validate that the response provided is JSON",
									"pm.test(\"Response is JSON.\", function () {",
									"    pm.expect(parsedResponse !== null).to.be.true;",
									"});",
									"",
									"pm.test(\"Service Cloud returned a valid account object response.\", function () {",
									"    pm.expect(parsedResponse.hasOwnProperty('Id')).to.be.true;",
									"    pm.expect(parsedResponse.hasOwnProperty('FirstName')).to.be.true;",
									"    pm.expect(parsedResponse.hasOwnProperty('LastName')).to.be.true;",
									"    pm.expect(parsedResponse.hasOwnProperty('PersonEmail')).to.be.true;",
									"});",
									"",
									"pm.test(\"The response object was of type 'Account'.\", function () {",
									"    pm.expect(parsedResponse.attributes.type).to.equal('Account');    ",
									"});",
									"",
									"pm.test(\"The Id of this Account matches the requestId.\", function () {",
									"    pm.expect(parsedResponse.Id).to.equal(pm.environment.get('tmpAccountId'));    ",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{sfscAuthToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"description": "... represents the content-type of the request.",
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"first_name\":\"{{sfccCustomerFirstName}}\",\n\t\"last_name\":\"{{sfccCustomerLastName}}\",\n\t\"email\":\"{{sfccCustomerEmail}}\",\n\t\"customer_id\":\"{{sfccCustomerId}}\",\n\t\"customer_no\":\"{{sfccCustomerNo}}\"\n}"
						},
						"url": {
							"raw": "{{serviceCloudUrl}}/services/apexrest/Order/Placement/{{tmpOrderId}}",
							"host": [
								"{{serviceCloudUrl}}"
							],
							"path": [
								"services",
								"apexrest",
								"Order",
								"Placement",
								"{{tmpOrderId}}"
							]
						},
						"description": "... this request will validate that an order exists in Service Cloud."
					},
					"response": []
				},
				{
					"name": "Get Order Details (Manual)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fcf74074-63d5-42d8-8eda-78aba4283728",
								"exec": [
									"// Parse the JSON response",
									"var parsedResponse = JSON.parse(responseBody);",
									"",
									"// Execute a test to validate that the access-token exists",
									"pm.test(\"StatusCode is 200.\", function () {",
									"    pm.expect(responseCode.code === 200).to.be.true;",
									"});",
									"",
									"// Execute a test to validate that we've received a response",
									"pm.test(\"Response is not empty.\", function () {",
									"    pm.expect(responseBody.length > 0).to.be.true;",
									"});",
									"",
									"// Execute a test to validate that the response provided is JSON",
									"pm.test(\"Response is JSON.\", function () {",
									"    pm.expect(parsedResponse !== null).to.be.true;",
									"});",
									"",
									"pm.test(\"Service Cloud returned a valid account object response.\", function () {",
									"    pm.expect(parsedResponse.hasOwnProperty('Id')).to.be.true;",
									"    pm.expect(parsedResponse.hasOwnProperty('FirstName')).to.be.true;",
									"    pm.expect(parsedResponse.hasOwnProperty('LastName')).to.be.true;",
									"    pm.expect(parsedResponse.hasOwnProperty('PersonEmail')).to.be.true;",
									"});",
									"",
									"pm.test(\"The response object was of type 'Account'.\", function () {",
									"    pm.expect(parsedResponse.attributes.type).to.equal('Account');    ",
									"});",
									"",
									"pm.test(\"The Id of this Account matches the requestId.\", function () {",
									"    pm.expect(parsedResponse.Id).to.equal(pm.environment.get('tmpAccountId'));    ",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{sfscAuthToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"description": "... represents the content-type of the request.",
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"first_name\":\"{{sfccCustomerFirstName}}\",\n\t\"last_name\":\"{{sfccCustomerLastName}}\",\n\t\"email\":\"{{sfccCustomerEmail}}\",\n\t\"customer_id\":\"{{sfccCustomerId}}\",\n\t\"customer_no\":\"{{sfccCustomerNo}}\"\n}"
						},
						"url": {
							"raw": "{{serviceCloudUrl}}/services/apexrest/Order/Placement/",
							"host": [
								"{{serviceCloudUrl}}"
							],
							"path": [
								"services",
								"apexrest",
								"Order",
								"Placement",
								""
							]
						},
						"description": "... this request will validate that an order exists in Service Cloud.  Please append a valid OrderId to the url to view the details for that order."
					},
					"response": []
				},
				{
					"name": "Create Customer Service Case",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "fe9dec86-faa2-4da0-8a84-3e441742c616",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "34c2ba18-27e6-4917-810c-7a28947d762c",
								"exec": [
									"// Parse the JSON response",
									"var parsedResponse = JSON.parse(responseBody);",
									"",
									"// Execute a test to validate that the access-token exists",
									"pm.test(\"StatusCode is 200.\", function () {",
									"    pm.expect(responseCode.code === 200).to.be.true;",
									"});",
									"",
									"// Execute a test to validate that we've received a response",
									"pm.test(\"Response is not empty.\", function () {",
									"    pm.expect(responseBody.length > 0).to.be.true;",
									"});",
									"",
									"// Execute a test to validate that the response provided is JSON",
									"pm.test(\"Response is JSON.\", function () {",
									"    pm.expect(parsedResponse !== null).to.be.true;",
									"});",
									"",
									"pm.test(\"Service Cloud returned a valid case object response.\", function () {",
									"    pm.expect(parsedResponse.hasOwnProperty('objectType')).to.be.true;",
									"    pm.expect(parsedResponse.hasOwnProperty('recordId')).to.be.true;",
									"    pm.expect(parsedResponse.hasOwnProperty('errors')).to.be.true;",
									"});",
									"",
									"pm.test(\"The response object was of type 'Case'.\", function () {",
									"    pm.expect(parsedResponse.objectType).to.not.equal(null);    ",
									"    pm.expect(parsedResponse.objectType).to.equal('Case');",
									"});",
									"",
									"pm.test(\"The response object contains a valid recordId.\", function () {",
									"    pm.expect(parsedResponse.recordId).to.not.equal(null);",
									"});",
									"",
									"pm.test(\"The response object does not contain any errors.\", function () {",
									"    pm.expect(parsedResponse.errors).to.equal(null);",
									"});",
									"",
									"// Record the recordId for the last case that was processed",
									"if (parsedResponse.hasOwnProperty('recordId') && parsedResponse.recordId !== null) {",
									"    ",
									"    // Initialize the header object",
									"    var Header = require('postman-collection').Header;",
									"    ",
									"    // Initialize the request options",
									"    var options = { ",
									"        method: 'GET',",
									"        header: [] ",
									"    };",
									"    ",
									"    // Build out the environment url for this request",
									"    options.url = pm.environment.get('serviceCloudUrl') + '/services/apexrest/Case/' + parsedResponse.recordId;",
									"    ",
									"    // Add the headers to the request definition",
									"    options.header.push(new Header({key: 'Content-Type', value: 'application/json'}));",
									"    options.header.push({key: 'Authorization', value: 'Bearer ' + pm.environment.get('sfscAuthToken')});",
									"",
									"    // Invoke the request",
									"    pm.sendRequest(options, function (error, response) {",
									"    ",
									"        // Throw an error if one is caught",
									"        if (error) throw new Error(error);",
									"",
									"        // Convert the response to JSON",
									"        responseJSON = response.json();",
									"",
									"        pm.test(\"Verify the case is created in Service Cloud.\", function () {",
									"            pm.expect(responseJSON.length).to.equal(1);",
									"            pm.expect(responseJSON[0]['Id']).to.equal(parsedResponse.recordId);",
									"        });    ",
									"",
									"        // Capture and maintain a list of caseIds that were created",
									"        var caseIds = pm.environment.get('tmpCaseIds');",
									"        caseIds.push(parsedResponse.recordId);",
									"        pm.environment.set('tmpCaseIds', caseIds);",
									"",
									"    });",
									"",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{sfscAuthToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"description": "... represents the content-type of the request.",
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"first_name\":\"{{sfccCustomerFirstName}}\",\n\t\"last_name\":\"{{sfccCustomerLastName}}\",\n\t\"email\":\"{{sfccCustomerEmail}}\",\n\t\"phone\":\"555.555.1212\",\n\t\"case_type\":\"ContactUs\",\t\n\t\"case_sub_type\":\"General Information\",\n\t\"subject\":\"Second test case of case creation.\",\n\t\"description\":\"Testing case creation via an anonymous customer in Salesforce B2C Commerce.  This should create the case and associate it to the customer's existing PersonAccount.\"\n}"
						},
						"url": {
							"raw": "{{serviceCloudUrl}}/services/apexrest/Case",
							"host": [
								"{{serviceCloudUrl}}"
							],
							"path": [
								"services",
								"apexrest",
								"Case"
							]
						},
						"description": "... this request will attempt to create a case within Service Cloud for an anonymous user (ie - a user that isn't registered in Salesforce B2C Commerce) already registered in Service Cloud with a PersonAccount.  The request should result in:\n- the case is created in Service Cloud\n- the case is associated to the existing Service Cloud PersonAccount for this customer."
					},
					"response": []
				},
				{
					"name": "Register Customer Account",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fcf74074-63d5-42d8-8eda-78aba4283728",
								"exec": [
									"// Parse the JSON response",
									"var parsedResponse = JSON.parse(responseBody);",
									"",
									"// Execute a test to validate that the access-token exists",
									"pm.test(\"StatusCode is 200.\", function () {",
									"    pm.expect(responseCode.code === 200).to.be.true;",
									"});",
									"",
									"// Execute a test to validate that we've received a response",
									"pm.test(\"Response is not empty.\", function () {",
									"    pm.expect(responseBody.length > 0).to.be.true;",
									"});",
									"",
									"// Execute a test to validate that the response provided is JSON",
									"pm.test(\"Response is JSON.\", function () {",
									"    pm.expect(parsedResponse !== null).to.be.true;",
									"});",
									"",
									"pm.test(\"Service Cloud returned a valid account object response.\", function () {",
									"    pm.expect(parsedResponse.hasOwnProperty('objectType')).to.be.true;",
									"    pm.expect(parsedResponse.hasOwnProperty('recordId')).to.be.true;",
									"    pm.expect(parsedResponse.hasOwnProperty('errors')).to.be.true;",
									"});",
									"",
									"pm.test(\"The response object was of type 'Account'.\", function () {",
									"    pm.expect(parsedResponse.objectType).to.not.equal(null);    ",
									"    pm.expect(parsedResponse.objectType).to.equal('Account');",
									"});",
									"",
									"pm.test(\"The response object contains a valid recordId.\", function () {",
									"    pm.expect(parsedResponse.recordId).to.not.equal(null);",
									"});",
									"",
									"pm.test(\"The response object does not contain any errors.\", function () {",
									"    pm.expect(parsedResponse.errors).to.equal(null);",
									"});",
									"",
									"// Validate that the Account was successfully created",
									"if (parsedResponse.hasOwnProperty('recordId') && parsedResponse.recordId !== null) {",
									"    ",
									"    // Initialize the header object",
									"    var Header = require('postman-collection').Header;",
									"    ",
									"    // Initialize the request options",
									"    var options = { ",
									"        method: 'GET',",
									"        header: [] ",
									"    };",
									"    ",
									"    // Build out the environment url for this request",
									"    options.url = pm.environment.get('serviceCloudUrl') + '/services/apexrest/Contact/Registration/' + parsedResponse.recordId;",
									"    ",
									"    // Add the headers to the request definition",
									"    options.header.push(new Header({key: 'Content-Type', value: 'application/json'}));",
									"    options.header.push({key: 'Authorization', value: 'Bearer ' + pm.environment.get('sfscAuthToken')});",
									"",
									"    // Invoke the request",
									"    pm.sendRequest(options, function (error, response) {",
									"    ",
									"        // Throw an error if one is caught",
									"        if (error) throw new Error(error);",
									"",
									"        // Convert the response to JSON",
									"        responseJSON = response.json();",
									"",
									"        pm.test(\"Verify the customer is created in Service Cloud.\", function () {",
									"            pm.expect(responseJSON.length).to.equal(1);",
									"            pm.expect(responseJSON[0]['Id']).to.equal(parsedResponse.recordId);",
									"        });    ",
									"",
									"        // Record the AccountId for the registered user",
									"        pm.environment.set('tmpAccountId', parsedResponse.recordId);",
									"",
									"    });",
									"",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{sfscAuthToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"description": "... represents the content-type of the request.",
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"first_name\":\"{{sfccCustomerFirstName}}\",\n\t\"last_name\":\"{{sfccCustomerLastName}}\",\n\t\"email\":\"{{sfccCustomerEmail}}\",\n\t\"customer_id\":\"{{sfccCustomerId}}\",\n\t\"customer_no\":\"{{sfccCustomerNo}}\"\n}"
						},
						"url": {
							"raw": "{{serviceCloudUrl}}/services/apexrest/Contact/Registration",
							"host": [
								"{{serviceCloudUrl}}"
							],
							"path": [
								"services",
								"apexrest",
								"Contact",
								"Registration"
							]
						},
						"description": "... this request will create a customer as a Person Account in the specified Service Cloud Instance.  As a pre-requisite, please ensure that this user has been created and exists in your Salesforce B2C Commerce instance prior to attempting to create the account record in Service Cloud."
					},
					"response": []
				},
				{
					"name": "Update Customer Account",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fcf74074-63d5-42d8-8eda-78aba4283728",
								"exec": [
									"// Parse the JSON response",
									"var parsedResponse = JSON.parse(responseBody);",
									"",
									"// Execute a test to validate that the access-token exists",
									"pm.test(\"StatusCode is 200.\", function () {",
									"    pm.expect(responseCode.code === 200).to.be.true;",
									"});",
									"",
									"// Execute a test to validate that we've received a response",
									"pm.test(\"Response is not empty.\", function () {",
									"    pm.expect(responseBody.length > 0).to.be.true;",
									"});",
									"",
									"// Execute a test to validate that the response provided is JSON",
									"pm.test(\"Response is JSON.\", function () {",
									"    pm.expect(parsedResponse !== null).to.be.true;",
									"});",
									"",
									"pm.test(\"Service Cloud returned a valid account object response.\", function () {",
									"    pm.expect(parsedResponse.hasOwnProperty('objectType')).to.be.true;",
									"    pm.expect(parsedResponse.hasOwnProperty('recordId')).to.be.true;",
									"    pm.expect(parsedResponse.hasOwnProperty('errors')).to.be.true;",
									"});",
									"",
									"pm.test(\"The response object was of type 'Account'.\", function () {",
									"    pm.expect(parsedResponse.objectType).to.not.equal(null);    ",
									"    pm.expect(parsedResponse.objectType).to.equal('Account');",
									"});",
									"",
									"pm.test(\"The response object contains a valid recordId.\", function () {",
									"    pm.expect(parsedResponse.recordId).to.not.equal(null);",
									"});",
									"",
									"pm.test(\"The response object does not contain any errors.\", function () {",
									"    pm.expect(parsedResponse.errors).to.equal(null);",
									"});",
									"",
									"// Validate that the Account was successfully created",
									"if (parsedResponse.hasOwnProperty('recordId') && parsedResponse.recordId !== null) {",
									"    ",
									"    // Initialize the header object",
									"    var Header = require('postman-collection').Header;",
									"    ",
									"    // Initialize the request options",
									"    var options = { ",
									"        method: 'GET',",
									"        header: [] ",
									"    };",
									"    ",
									"    // Build out the environment url for this request",
									"    options.url = pm.environment.get('serviceCloudUrl') + '/services/apexrest/Contact/Registration/' + parsedResponse.recordId;",
									"    ",
									"    // Add the headers to the request definition",
									"    options.header.push(new Header({key: 'Content-Type', value: 'application/json'}));",
									"    options.header.push({key: 'Authorization', value: 'Bearer ' + pm.environment.get('sfscAuthToken')});",
									"",
									"    // Invoke the request",
									"    pm.sendRequest(options, function (error, response) {",
									"    ",
									"        // Throw an error if one is caught",
									"        if (error) throw new Error(error);",
									"",
									"        // Convert the response to JSON",
									"        responseJSON = response.json();",
									"",
									"        pm.test(\"Verify the customer is created in Service Cloud.\", function () {",
									"            pm.expect(responseJSON.length).to.equal(1);",
									"            pm.expect(responseJSON[0]['Id']).to.equal(parsedResponse.recordId);",
									"        });    ",
									"",
									"        // Record the AccountId for the registered user",
									"        pm.environment.set('tmpAccountId', parsedResponse.recordId);",
									"",
									"    });",
									"",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{sfscAuthToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"description": "... represents the content-type of the request.",
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"first_name\":\"{{sfccCustomerFirstName}}\",\n\t\"last_name\":\"{{sfccCustomerLastName}}\",\n\t\"email\":\"{{sfccCustomerEmail}}\",\n\t\"customer_id\":\"{{sfccCustomerId}}\",\n\t\"customer_no\":\"{{sfccCustomerNo}}\"\n}"
						},
						"url": {
							"raw": "{{serviceCloudUrl}}/services/apexrest/Contact/Registration",
							"host": [
								"{{serviceCloudUrl}}"
							],
							"path": [
								"services",
								"apexrest",
								"Contact",
								"Registration"
							]
						},
						"description": "... this request will create a customer as a Person Account in the specified Service Cloud Instance.  As a pre-requisite, please ensure that this user has been created and exists in your Salesforce B2C Commerce instance prior to attempting to create the account record in Service Cloud."
					},
					"response": []
				},
				{
					"name": "Register Customer Account via Batch",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a7fd9c00-7b3e-4d01-8e95-228f5d6c8961",
								"exec": [
									"// Parse the JSON response",
									"var parsedResponse = JSON.parse(responseBody);",
									"",
									"// Execute a test to validate that the access-token exists",
									"pm.test(\"StatusCode is 200.\", function () {",
									"    pm.expect(responseCode.code === 200).to.be.true;",
									"});",
									"",
									"// Execute a test to validate that we've received a response",
									"pm.test(\"Response is not empty.\", function () {",
									"    pm.expect(responseBody.length > 0).to.be.true;",
									"});",
									"",
									"// Execute a test to validate that the response provided is JSON",
									"pm.test(\"Response is JSON.\", function () {",
									"    pm.expect(parsedResponse !== null).to.be.true;",
									"});",
									"",
									"pm.test(\"Service Cloud returned at least one account.\", function () {",
									"    pm.expect(parsedResponse.length).of.at.least(1);",
									"});",
									"",
									"// Only process the validation results if at least one account was returned",
									"if (parsedResponse.length > 0) {",
									"",
									"    // Enable a deplay before attempting to validate each account",
									"    setTimeout( function() {",
									"    ",
									"        // Loop over the collection of parsed accounts",
									"        for (var accountIndex = 0; accountIndex < parsedResponse.length; accountIndex++) {",
									"            ",
									"            // Create a reference to the current account object",
									"            var thisAccount = parsedResponse[accountIndex];",
									"            ",
									"            pm.test(\"The response object was of type 'Account'.\", function () {",
									"                pm.expect(thisAccount.objectType).to.not.equal(null);    ",
									"                pm.expect(thisAccount.objectType).to.equal('Account');",
									"            });",
									"            ",
									"            pm.test(\"The response object contains a valid recordId.\", function () {",
									"                pm.expect(thisAccount.recordId).to.not.equal(null);",
									"            });",
									"            ",
									"            pm.test(\"The response object does not contain any errors.\", function () {",
									"                pm.expect(thisAccount.errors).to.equal(null);",
									"            }); ",
									"        ",
									"            // Validate that the Account was successfully created",
									"            if (thisAccount.hasOwnProperty('recordId') && thisAccount.recordId !== null) {",
									"                ",
									"                // Initialize the header object",
									"                var Header = require('postman-collection').Header;",
									"                ",
									"                // Initialize the request options",
									"                var options = { ",
									"                    method: 'GET',",
									"                    header: [] ",
									"                };",
									"                ",
									"                // Build out the environment url for this request",
									"                options.url = pm.environment.get('serviceCloudUrl') + '/services/apexrest/Contact/Registration/' + thisAccount.recordId;",
									"                ",
									"                // Add the headers to the request definition",
									"                options.header.push(new Header({key: 'Content-Type', value: 'application/json'}));",
									"                options.header.push({key: 'Authorization', value: 'Bearer ' + pm.environment.get('sfscAuthToken')});",
									"            ",
									"                // Invoke the request",
									"                pm.sendRequest(options, function (error, response) {",
									"                ",
									"                    // Throw an error if one is caught",
									"                    if (error) throw new Error(error);",
									"            ",
									"                    // Convert the response to JSON",
									"                    responseJSON = response.json();",
									"            ",
									"                    pm.test(\"Verify the customer [\" + thisAccount.recordId + \"] is created in Service Cloud.\", function () {",
									"                        pm.expect(responseJSON.length).to.equal(1);",
									"                        pm.expect(responseJSON[0]['Id']).to.equal(thisAccount.recordId);",
									"                    });    ",
									"        ",
									"                });",
									"            ",
									"            }",
									"            ",
									"        }",
									"        ",
									"    }, pm.environment.get('postRequestDelay'));",
									"    ",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{sfscAuthToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"description": "... represents the content-type of the request.",
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n\t{\n\t\t\"first_name\":\"{{sfccCustomerFirstName}}\",\n\t\t\"last_name\":\"{{sfccCustomerLastName}}\",\n\t\t\"email\":\"{{sfccCustomerEmail}}\",\n\t\t\"customer_id\":\"{{sfccCustomerId}}\",\n\t\t\"customer_no\":\"{{sfccCustomerNo}}\"\n\t}\n]"
						},
						"url": {
							"raw": "{{serviceCloudUrl}}/services/apexrest/Contact/Registration/Batch",
							"host": [
								"{{serviceCloudUrl}}"
							],
							"path": [
								"services",
								"apexrest",
								"Contact",
								"Registration",
								"Batch"
							]
						},
						"description": "... this request can be used to register multiple customer accounts via the batch registration service (user definitions should exist in an array and leverage the same format as the singular Contact/Registration service).  As a pre-requisite, please ensure that these users have been created and exit in your Salesforce B2C Commerce instance prior to attempting to create the account records in Service Cloud."
					},
					"response": []
				},
				{
					"name": "Create Customer Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3de4b97e-e1a6-4996-80d3-3d0c678de887",
								"exec": [
									"// Parse the JSON response",
									"var parsedResponse = JSON.parse(responseBody);",
									"",
									"// Execute a test to validate that the access-token exists",
									"pm.test(\"StatusCode is 200.\", function () {",
									"    pm.expect(responseCode.code === 200).to.be.true;",
									"});",
									"",
									"// Execute a test to validate that we've received a response",
									"pm.test(\"Response is not empty.\", function () {",
									"    pm.expect(responseBody.length > 0).to.be.true;",
									"});",
									"",
									"// Execute a test to validate that the response provided is JSON",
									"pm.test(\"Response is JSON.\", function () {",
									"    pm.expect(parsedResponse !== null).to.be.true;",
									"});",
									"",
									"pm.test(\"Service Cloud returned a valid order object response.\", function () {",
									"    pm.expect(parsedResponse.hasOwnProperty('objectType')).to.be.true;",
									"    pm.expect(parsedResponse.hasOwnProperty('recordId')).to.be.true;",
									"    pm.expect(parsedResponse.hasOwnProperty('errors')).to.be.true;",
									"});",
									"",
									"pm.test(\"The response object was of type 'Order'.\", function () {",
									"    pm.expect(parsedResponse.objectType).to.not.equal(null);    ",
									"    pm.expect(parsedResponse.objectType).to.equal('Order');",
									"});",
									"",
									"pm.test(\"The response object contains a valid recordId.\", function () {",
									"    pm.expect(parsedResponse.recordId).to.not.equal(null);",
									"});",
									"",
									"pm.test(\"The response object does not contain any errors.\", function () {",
									"    pm.expect(parsedResponse.errors).to.equal(null);",
									"});",
									"",
									"// Validate that the order was successfully created",
									"if (parsedResponse.hasOwnProperty('recordId') && parsedResponse.recordId !== null) {",
									"",
									"    // Enable a delay  before validating the order details",
									"    setTimeout(function() {",
									"        ",
									"        // Initialize the header object",
									"        var Header = require('postman-collection').Header;",
									"        ",
									"        // Initialize the request options",
									"        var options = { ",
									"            method: 'GET',",
									"            header: [] ",
									"        };",
									"        ",
									"        // Build out the environment url for this request",
									"        options.url = pm.environment.get('serviceCloudUrl') + '/services/apexrest/Order/Placement/' + parsedResponse.recordId;",
									"        ",
									"        // Add the headers to the request definition",
									"        options.header.push(new Header({key: 'Content-Type', value: 'application/json'}));",
									"        options.header.push({key: 'Authorization', value: 'Bearer ' + pm.environment.get('sfscAuthToken')});",
									"    ",
									"        // Invoke the request",
									"        pm.sendRequest(options, function (error, response) {",
									"        ",
									"            // Throw an error if one is caught",
									"            if (error) throw new Error(error);",
									"    ",
									"            // Convert the response to JSON",
									"            var responseJSON = response.json();",
									"            var thisOrder = responseJSON[0];",
									"    ",
									"            pm.test(\"Verify the order is found in Service Cloud.\", function () {",
									"                pm.expect(thisOrder['Id']).to.equal(parsedResponse.recordId);",
									"            });    ",
									"    ",
									"            pm.test(\"Verify the order's SFCC orderId matches the registered order number.\", function () {",
									"                pm.expect(thisOrder['SFCC_Order_Number__c']).to.equal(pm.environment.get('sfccRegisteredOrderNo'));",
									"            });    ",
									"    ",
									"            pm.test(\"Verify the order's Service Cloud total matches the submitted value.\", function () {",
									"                pm.expect(thisOrder['SFCC_Order_Total__c']).to.equal(pm.environment.get('sfccRegisteredOrderTotal'));",
									"            })",
									"",
									"            // Only process the account validation if the order has an acountId    ",
									"            if (thisOrder.hasOwnProperty('AccountId')) {",
									"                ",
									"                // Initialize the header object",
									"                var Header = require('postman-collection').Header;",
									"                ",
									"                // Initialize the request options",
									"                var options = { ",
									"                    method: 'GET',",
									"                    header: [] ",
									"                };",
									"                ",
									"                // Build out the environment url for this request",
									"                options.url = pm.environment.get('serviceCloudUrl') + '/services/apexrest/Contact/Registration/' + thisOrder.AccountId;",
									"                ",
									"                // Add the headers to the request definition",
									"                options.header.push(new Header({key: 'Content-Type', value: 'application/json'}));",
									"                options.header.push({key: 'Authorization', value: 'Bearer ' + pm.environment.get('sfscAuthToken')});",
									"            ",
									"                // Invoke the request",
									"                pm.sendRequest(options, function (error, response) {",
									"                ",
									"                    // Throw an error if one is caught",
									"                    if (error) throw new Error(error);",
									"            ",
									"                    // Convert the response to JSON",
									"                    var responseJSON = response.json();",
									"                    var thisAccount = responseJSON[0];",
									"            ",
									"                    pm.test(\"Verify the customer is created in Service Cloud.\", function () {",
									"                        pm.expect(responseJSON.length).to.equal(1);",
									"                        pm.expect(thisAccount['Id']).to.equal(thisOrder.AccountId);",
									"                    });    ",
									"",
									"                    pm.test(\"Verify the account is mapped to the registered order's email address.\", function () {",
									"                        pm.expect(thisAccount['PersonEmail']).to.equal(pm.environment.get('tmpRegisteredOrderEmail'));",
									"                    }); ",
									"",
									"                    pm.test(\"Verify the account has a Commerce Cloud Id mapped to the registered order's customer record.\", function () {",
									"                        pm.expect(thisAccount['SFCC_Customer_Id__pc']).to.equal(pm.environment.get('tmpRegisteredOrderCustomerId'));",
									"                    }); ",
									"",
									"                    console.log(thisAccount['SFCC_Customer_Id__pc'] + ' - ' + pm.environment.get('tmpRegisteredOrderCustomerId'))",
									"",
									"                });",
									"    ",
									"            }",
									"",
									"        });",
									"        ",
									"    }, pm.environment.get('postRequestDelay'));",
									"    ",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{sfscAuthToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"description": "... represents the content-type of the request.",
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"order_no\":\"{{sfccRegisteredOrderNo}}\",\n\t\"status\":\"Draft\",\n\t\"order_total\":{{sfccRegisteredOrderTotal}},\n\t\"scc_sync_status\":\"Created\"\n}\n\n"
						},
						"url": {
							"raw": "{{serviceCloudUrl}}/services/apexrest/Order/Placement/",
							"host": [
								"{{serviceCloudUrl}}"
							],
							"path": [
								"services",
								"apexrest",
								"Order",
								"Placement",
								""
							]
						},
						"description": "... this request can be used to create an order for a registered user within Service Cloud.  As a pre-requisite, please ensure that this order have been created and exists in your Salesforce B2C Commerce instance prior to attempting to create the order records in Service Cloud."
					},
					"response": []
				},
				{
					"name": "Update Customer Order Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3de4b97e-e1a6-4996-80d3-3d0c678de887",
								"exec": [
									"// Parse the JSON response",
									"var parsedResponse = JSON.parse(responseBody);",
									"",
									"// Execute a test to validate that the access-token exists",
									"pm.test(\"StatusCode is 200.\", function () {",
									"    pm.expect(responseCode.code === 200).to.be.true;",
									"});",
									"",
									"// Execute a test to validate that we've received a response",
									"pm.test(\"Response is not empty.\", function () {",
									"    pm.expect(responseBody.length > 0).to.be.true;",
									"});",
									"",
									"// Execute a test to validate that the response provided is JSON",
									"pm.test(\"Response is JSON.\", function () {",
									"    pm.expect(parsedResponse !== null).to.be.true;",
									"});",
									"",
									"pm.test(\"Service Cloud returned a valid order object response.\", function () {",
									"    pm.expect(parsedResponse.hasOwnProperty('objectType')).to.be.true;",
									"    pm.expect(parsedResponse.hasOwnProperty('recordId')).to.be.true;",
									"    pm.expect(parsedResponse.hasOwnProperty('errors')).to.be.true;",
									"});",
									"",
									"pm.test(\"The response object was of type 'Order'.\", function () {",
									"    pm.expect(parsedResponse.objectType).to.not.equal(null);    ",
									"    pm.expect(parsedResponse.objectType).to.equal('Order');",
									"});",
									"",
									"pm.test(\"The response object contains a valid recordId.\", function () {",
									"    pm.expect(parsedResponse.recordId).to.not.equal(null);",
									"});",
									"",
									"pm.test(\"The response object does not contain any errors.\", function () {",
									"    pm.expect(parsedResponse.errors).to.equal(null);",
									"});",
									"",
									"// Validate that the Account was successfully created",
									"if (parsedResponse.hasOwnProperty('recordId') && parsedResponse.recordId !== null) {",
									"    ",
									"    // Give the future-handler time to process",
									"    setTimeout(function(){",
									"        ",
									"        // Initialize the header object",
									"        var Header = require('postman-collection').Header;",
									"        ",
									"        // Initialize the request options",
									"        var options = { ",
									"            method: 'GET',",
									"            header: [] ",
									"        };",
									"        ",
									"        // Build out the environment url for this request",
									"        options.url = pm.environment.get('serviceCloudUrl') + '/services/apexrest/Order/Placement/' + parsedResponse.recordId;",
									"        ",
									"        // Add the headers to the request definition",
									"        options.header.push(new Header({key: 'Content-Type', value: 'application/json'}));",
									"        options.header.push({key: 'Authorization', value: 'Bearer ' + pm.environment.get('sfscAuthToken')});",
									"    ",
									"        // Invoke the request",
									"        pm.sendRequest(options, function (error, response) {",
									"        ",
									"            // Throw an error if one is caught",
									"            if (error) throw new Error(error);",
									"    ",
									"            // Convert the response to JSON",
									"            responseJSON = response.json();",
									"    ",
									"            pm.test(\"Verify the order is found in Service Cloud.\", function () {",
									"                pm.expect(responseJSON[0]['Id']).to.equal(parsedResponse.recordId);",
									"            });    ",
									"    ",
									"            pm.test(\"Verify the order's SFCC orderId matches the anonymous order number.\", function () {",
									"                pm.expect(responseJSON[0]['SFCC_Order_Number__c']).to.equal(pm.environment.get('sfccAnonymousOrderNo'));",
									"            });    ",
									"            ",
									"            pm.test(\"Verify that the anonymous order's status has been updated to \" + pm.environment.get('tmpOrderStatus') + \".\", function () {",
									"                pm.expect(responseJSON[0]['Status']).to.equal(pm.environment.get('tmpOrderStatus'));",
									"            });",
									"    ",
									"        });        ",
									"        ",
									"    }, pm.environment.get('postRequestDelay'));    ",
									"",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "18812204-a57e-4775-93e7-9ffc5c5c7607",
								"exec": [
									"// Define the variable used to manage the status update.",
									"pm.environment.set('tmpOrderStatus', 'Created');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{sfscAuthToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"description": "... represents the content-type of the request.",
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"order_no\":\"{{sfccAnonymousOrderNo}}\",\n\t\"status\":\"{{tmpOrderStatus}}\",\n\t\"scc_sync_status\":\"Updated\"\n}\n\n"
						},
						"url": {
							"raw": "{{serviceCloudUrl}}/services/apexrest/Order/Placement/",
							"host": [
								"{{serviceCloudUrl}}"
							],
							"path": [
								"services",
								"apexrest",
								"Order",
								"Placement",
								""
							]
						},
						"description": "... this request can be used to update the status of an anonymous order within Service Cloud.  As a pre-requisite, please ensure that this order have been created and exists in your Salesforce B2C Commerce instance prior to attempting to create the order records in Service Cloud.  You can update the order status via the Pre-request script (set the tmpOrderStatus variable)."
					},
					"response": []
				}
			],
			"description": "This collection of requests can be used to exercise the Service Cloud REST endpoints that are leveraged as part of the Service Cloud Connector.  To leverage these service calls, please make the following configuration changes:\n\n1. In the parent folder, please select the 'edit' icon.\n2. Configure the variables at the root of this project to point to your specific environment\n3. For Service Cloud, generate an authToken and seed the bearerToken in the Authorization tab with the generated value\n\nWith the auth token seeded in the Authorization tab, you can now execute each of the individual service calls via Postman.  As a reminder, please perform this step after every authToken has been generated.",
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "00D0b000000D5tR!ARYAQPRVxfWlJmUynO0.8JfiPfRSkUVTfCVXN0yksEY5plUnamyb3J9ANSEHiwgvnGol5UcsHWZNltDeii5r8naz.joOSZLk",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "c42eeacd-495d-48d5-8f79-ee7c56e6be62",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "3615baeb-a096-40e0-920e-461bd7dca8cc",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Salesforce B2C Commerce Requests",
			"item": [
				{
					"name": "Data API",
					"item": [
						{
							"name": "Search for Customers in a CustomerList",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{sfccAuthToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"query\" : \n     {\n        \"text_query\": { \"fields\": [\"credentials.login\"], \"search_phrase\":\"{{sfccCustomerEmail}}\" }\n     }\n}"
								},
								"url": {
									"raw": "{{sfccDataUrl}}/customer_lists/{{sfccCustomerListId}}/customer_search",
									"host": [
										"{{sfccDataUrl}}"
									],
									"path": [
										"customer_lists",
										"{{sfccCustomerListId}}",
										"customer_search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Customer via CustomerList",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{sfccAuthToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"query\" : \n     {\n        \"text_query\": { \"fields\": [\"credentials.login\"], \"search_phrase\":\"{{sfccCustomerEmail}}\" }\n     }\n}"
								},
								"url": {
									"raw": "{{sfccDataUrl}}/customer_lists/{{sfccCustomerListId}}/customer_search",
									"host": [
										"{{sfccDataUrl}}"
									],
									"path": [
										"customer_lists",
										"{{sfccCustomerListId}}",
										"customer_search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Customer Addresses via CustomerList",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{sfccAuthToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"query\" : \n     {\n        \"text_query\": { \"fields\": [\"credentials.login\"], \"search_phrase\":\"sfccCustomerEmail\" }\n     }\n}"
								},
								"url": {
									"raw": "{{sfccDataUrl}}/customer_lists/{{sfccCustomerListId}}/customer_search",
									"host": [
										"{{sfccDataUrl}}"
									],
									"path": [
										"customer_lists",
										"{{sfccCustomerListId}}",
										"customer_search"
									]
								},
								"description": "... retrieves the addresses for a given customer via the data api / customerList resource."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Shop API",
					"item": [
						{
							"name": "Get Customer ",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{sfccAuthToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "x-dw-client-id",
										"value": "{{sfccClientId}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{sfccShopUrl}}/customers/{{sfccCustomerId}}",
									"host": [
										"{{sfccShopUrl}}"
									],
									"path": [
										"customers",
										"{{sfccCustomerId}}"
									]
								},
								"description": "... retrieves the details for a given customer.  Please update the sfccCustomerId environment variable with with identifier representing the customer whose details are to be retrieved.  Prior to retrieving the customer, please retrieve an authToken by executing request 00a. Retrieve Commerce Cloud AuthToken."
							},
							"response": []
						},
						{
							"name": "Update Customer",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{sfccAuthToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "x-dw-client-id",
										"value": "{{sfccClientId}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\tfirst_name: \"George\",\n\tlast_name: \"Costanza\"\n}"
								},
								"url": {
									"raw": "{{sfccShopUrl}}/customers/{{sfccCustomerId}}",
									"host": [
										"{{sfccShopUrl}}"
									],
									"path": [
										"customers",
										"{{sfccCustomerId}}"
									]
								},
								"description": "... updates the properties for a given customer.  Prior to modifying the customer, please retrieve an authToken by executing request 00a. Retrieve Commerce Cloud AuthToken."
							},
							"response": []
						},
						{
							"name": "Get Customer (Manual)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{sfccAuthToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "x-dw-client-id",
										"value": "{{sfccClientId}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{sfccShopUrl}}/customers/",
									"host": [
										"{{sfccShopUrl}}"
									],
									"path": [
										"customers",
										""
									]
								},
								"description": "... retrieves the details for a given customer.  Please update the sfccCustomerId environment variable with with identifier representing the customer whose details are to be retrieved.  Prior to retrieving the customer, please retrieve an authToken by executing request 00a. Retrieve Commerce Cloud AuthToken.  Append the customerId to the url to request customer details."
							},
							"response": []
						},
						{
							"name": "Get Customer Addresses",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f25e99dd-f1ca-4c51-a04e-35681f538642",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{sfccAuthToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "x-dw-client-id",
										"value": "{{clientid}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{sfccShopUrl}}/customers/{{sfccCustomerId}}/addresses",
									"host": [
										"{{sfccShopUrl}}"
									],
									"path": [
										"customers",
										"{{sfccCustomerId}}",
										"addresses"
									]
								},
								"description": "... retrieves the address for a given customer.  Please update the sfccCustomerId environment variable with with identifier representing the customer whose details are to be retrieved.  Prior to retrieving the customer addresses, please retrieve an authToken by executing request 00a. Retrieve Commerce Cloud AuthToken."
							},
							"response": []
						},
						{
							"name": "Get Customer  Address and Payment Instruments",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{sfccAuthToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "x-dw-client-id",
										"value": "{{sfccClientId}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{sfccShopUrl}}/customers/{{sfccCustomerId}}?expand=addresses,paymentinstruments",
									"host": [
										"{{sfccShopUrl}}"
									],
									"path": [
										"customers",
										"{{sfccCustomerId}}"
									],
									"query": [
										{
											"key": "expand",
											"value": "addresses,paymentinstruments"
										}
									]
								},
								"description": "... retrieves the details for a given customer.  Please update the sfccCustomerId environment variable with with identifier representing the customer whose details are to be retrieved.  Prior to retrieving the customer, please retrieve an authToken by executing request 00a. Retrieve Commerce Cloud AuthToken."
							},
							"response": []
						},
						{
							"name": "Create Customer Address",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f25e99dd-f1ca-4c51-a04e-35681f538642",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{sfccAuthToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "x-dw-client-id",
										"value": "{{clientid}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"address_id\": \"{{sfccCustomerAddressName}}\",\n  \"address1\" : \"555 Costanza Lane\",\n  \"address2\" : \"Apt. 902\",\n  \"city\" : \"New York\",\n  \"company_name\" : \"Vandelay Industries\",\n  \"country_code\" : \"US\",\n  \"first_name\": \"Jerry\",\n  \"job_title\" : \"Actor / Comedian\",\n  \"last_name\" : \"Seinfeld\",\n  \"phone\" : \"555-555-1212\",\n  \"postal_code\" : \"55555\",\n  \"preferred\" : false,\n  \"salutation\" : \"Mr.\",\n  \"state_code\": \"NY\"\n}"
								},
								"url": {
									"raw": "{{sfccShopUrl}}/customers/{{sfccCustomerId}}/addresses",
									"host": [
										"{{sfccShopUrl}}"
									],
									"path": [
										"customers",
										"{{sfccCustomerId}}",
										"addresses"
									]
								},
								"description": "... creates a new address for a given customer.  Please update the sfccCustomerId environment variable with with identifier representing the customer owning the address book where the new address will be created.  Prior to retrieving the customer addresses, please retrieve an authToken by executing request 00a. Retrieve Commerce Cloud AuthToken."
							},
							"response": []
						},
						{
							"name": "Update Customer Address",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f25e99dd-f1ca-4c51-a04e-35681f538642",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{sfccAuthToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "x-dw-client-id",
										"value": "{{clientid}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"address_id\": \"{{sfccCustomerAddressName}}\",\n  \"address1\" : \"555 Costanza Lane\",\n  \"address2\" : \"Apt. 555\",\n  \"city\" : \"New York\",\n  \"company_name\" : \"Vandelay Industries\",\n  \"country_code\" : \"US\",\n  \"first_name\": \"Jerry\",\n  \"job_title\" : \"Actor / Comedian\",\n  \"last_name\" : \"Seinfeld\",\n  \"phone\" : \"555-555-1212\",\n  \"postal_code\" : \"55555\",\n  \"preferred\" : false,\n  \"salutation\" : \"Mr.\",\n  \"state_code\": \"NY\"\n}"
								},
								"url": {
									"raw": "{{sfccShopUrl}}/customers/{{sfccCustomerId}}/addresses/{{sfccCustomerAddressName}}",
									"host": [
										"{{sfccShopUrl}}"
									],
									"path": [
										"customers",
										"{{sfccCustomerId}}",
										"addresses",
										"{{sfccCustomerAddressName}}"
									]
								},
								"description": "... modifies an existing address for a given customer.  Please update the sfccCustomerId environment variable with with identifier representing the customer owning the address book where the existing address will be modified.  Additionally, update the sfccCustomerAddressName with the name of the address being modified.  Prior to retrieving the customer addresses, please retrieve an authToken by executing request 00a. Retrieve Commerce Cloud AuthToken."
							},
							"response": []
						},
						{
							"name": "Delete Customer Address",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f25e99dd-f1ca-4c51-a04e-35681f538642",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{sfccAuthToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "x-dw-client-id",
										"value": "{{clientid}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{sfccShopUrl}}/customers/{{sfccCustomerId}}/addresses/{{sfccCustomerAddressName}}",
									"host": [
										"{{sfccShopUrl}}"
									],
									"path": [
										"customers",
										"{{sfccCustomerId}}",
										"addresses",
										"{{sfccCustomerAddressName}}"
									]
								},
								"description": "... deletes the specified address from the customer's address book.  Please update the sfccCustomerId environment variable with with identifier representing the customer owning the address book from which the specifed address will be removed.  Additionally, update the sfccCustomerAddressName with the name of the address being removed.  Prior to removing the address, please retrieve an authToken by executing request 00a. Retrieve Commerce Cloud AuthToken."
							},
							"response": []
						},
						{
							"name": "Get Orders by CustomerId",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{sfccAuthToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "x-dw-client-id",
										"value": "{{sfccClientId}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{sfccShopUrl}}/customers/{{sfccCustomerId}}/orders",
									"host": [
										"{{sfccShopUrl}}"
									],
									"path": [
										"customers",
										"{{sfccCustomerId}}",
										"orders"
									]
								},
								"description": "... retrieves a summary of the orders for a given customer.  Please update the sfccCustomerId environment variable with with identifier representing the customer whose details are to be retrieved.  Prior to retrieving the customer order summary, please retrieve an authToken by executing request 00a. Retrieve Commerce Cloud AuthToken."
							},
							"response": []
						},
						{
							"name": "Get Order by OrderId",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{sfccAuthToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "x-dw-client-id",
										"value": "{{sfccClientId}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{sfccShopUrl}}/orders/{{sfccOrderId}}",
									"host": [
										"{{sfccShopUrl}}"
									],
									"path": [
										"orders",
										"{{sfccOrderId}}"
									]
								},
								"description": "... retrieves the order for the specified orderId.  Please update the sfccOrderId environment variable with with identifier representing the customer whose details are to be retrieved.  Prior to retrieving the order details, please retrieve an authToken by executing request 00a. Retrieve Commerce Cloud AuthToken."
							},
							"response": []
						},
						{
							"name": "Get Order by OrderId (Manual)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{sfccAuthToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "x-dw-client-id",
										"value": "{{sfccClientId}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{sfccShopUrl}}/orders/",
									"host": [
										"{{sfccShopUrl}}"
									],
									"path": [
										"orders",
										""
									]
								},
								"description": "... retrieves the order for the specified orderId.  Please update the sfccOrderId environment variable with with identifier representing the customer whose details are to be retrieved.  Prior to retrieving the order details, please retrieve an authToken by executing request 00a. Retrieve Commerce Cloud AuthToken.  Append the order number to the url to retrieve the order details."
							},
							"response": []
						},
						{
							"name": "Update Order Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f25e99dd-f1ca-4c51-a04e-35681f538642",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{sfccAuthToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "x-dw-client-id",
										"value": "{{clientid}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"status\": \"new\"\n}"
								},
								"url": {
									"raw": "{{sfccShopUrl}}/orders/{{sfccOrderId}}",
									"host": [
										"{{sfccShopUrl}}"
									],
									"path": [
										"orders",
										"{{sfccOrderId}}"
									]
								},
								"description": "... modifies an order status (see https://goo.gl/RYjRHp for available statuses).  Please update the sfccOrderId environment variable with with identifier representing the order whose status will be modified.  Prior to retrieving the customer addresses, please retrieve an authToken by executing request 00a. Retrieve Commerce Cloud AuthToken."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "00a. Retrieve Commerce Cloud AuthToken",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "86c21dc4-46c9-4da9-8a77-bb21288a428e",
								"exec": [
									"// Audit the pre-execution test script",
									"console.log(' ----------------------------------------------------------');",
									"console.log(' - START: Executing SFCC RetrieveAuthToken Pre-Execution Script')",
									"console.log(' ----------------------------------------------------------');",
									"",
									"// Build the credential string by concatenating the username, password, and clientSecret",
									"credentialString = pm.environment.get(\"sfccUsername\") + ':' + pm.environment.get(\"sfccPassword\") + ':' + pm.environment.get(\"sfccClientSecret\");",
									"",
									"// Encrypt the credential string to base64",
									"rawCredential = CryptoJS.enc.Utf8.parse(credentialString);",
									"encodedCredential = CryptoJS.enc.Base64.stringify(rawCredential);",
									"",
									"// Set the environment variable representing the credential",
									"pm.environment.set(\"sfccUserCredential\", encodedCredential);",
									"",
									"console.log(' ----------------------------------------------------------');",
									"console.log(' -   END: Executing SFCC RetrieveAuthToken Pre-Execution Script')",
									"console.log(' ----------------------------------------------------------');",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0dc132c9-2c32-41b5-b224-9fb1f872cdc3",
								"exec": [
									"",
									"// Parse the response data",
									"var parsedResponse = JSON.parse(responseBody);",
									"",
									"// Execute a test to validate that the access-token exists",
									"pm.test(\"StatusCode is 200.\", function () {",
									"    pm.expect(responseCode.code === 200).to.be.true;",
									"});",
									"",
									"// Execute a test to validate that we've received a response",
									"pm.test(\"Response is not empty.\", function () {",
									"    pm.expect(responseBody.length > 0).to.be.true;",
									"});",
									"",
									"// Execute a test to validate that the response provided is JSON",
									"pm.test(\"Response is JSON.\", function () {",
									"    pm.expect(parsedResponse !== null).to.be.true;",
									"});",
									"",
									"// Execute a test to validate that the response contains the properties expected.",
									"pm.test(\"Response is well-formed and contains the access_token property.\", function () {",
									"    pm.expect(parsedResponse.hasOwnProperty('access_token')).to.be.true;",
									"    pm.expect(parsedResponse.hasOwnProperty('expires_in')).to.be.true;",
									"    pm.expect(parsedResponse.hasOwnProperty('token_type')).to.be.true;",
									"});",
									"",
									"// Check if the parsedResponse has an access-token key",
									"if (parsedResponse.hasOwnProperty('access_token')) {",
									"    ",
									"    // If an access-token exists, then set it as part of the environment",
									"    postman.setEnvironmentVariable('sfccAuthToken', parsedResponse.access_token);",
									"",
									"} "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Basic {{sfccUserCredential}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "grant_type=urn:demandware:params:oauth:grant-type:client-id:dwsid:dwsecuretoken"
						},
						"url": {
							"raw": "{{sfccOAuth2Url}}?client_id={{sfccClientId}}",
							"host": [
								"{{sfccOAuth2Url}}"
							],
							"query": [
								{
									"key": "client_id",
									"value": "{{sfccClientId}}"
								}
							]
						},
						"description": "... retrieves an authToken for a Salesforce B2C Commerce Business Manager user.  The request will encode the username:password:clientSecret via Base64 and seed the encoded string via the sfccUserCredential environment property.  This encoded string is then used to request the authToken."
					},
					"response": []
				},
				{
					"name": "00b. Retrieve Guest Authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5c5885ee-900e-4d15-9861-0de5a0f468d0",
								"exec": [
									"",
									"// Parse the response data",
									"var parsedResponse = JSON.parse(responseBody);",
									"",
									"// Execute a test to validate that the access-token exists",
									"pm.test(\"StatusCode is 200.\", function () {",
									"    pm.expect(responseCode.code === 200).to.be.true;",
									"});",
									"",
									"// Execute a test to validate that we've received a response",
									"pm.test(\"Response is not empty.\", function () {",
									"    pm.expect(responseBody.length > 0).to.be.true;",
									"});",
									"",
									"// Execute a test to validate that the response provided is JSON",
									"pm.test(\"Response is JSON.\", function () {",
									"    pm.expect(parsedResponse !== null).to.be.true;",
									"});",
									"",
									"// Execute a test to validate that the response contains the properties expected.",
									"pm.test(\"Response is well-formed and contains the auth_type property.\", function () {",
									"    pm.expect(parsedResponse.hasOwnProperty('auth_type')).to.be.true;",
									"    pm.expect(parsedResponse.hasOwnProperty('customer_id')).to.be.true;",
									"});",
									"",
									"// Execute a test to validate that the auth-type granted is registered",
									"pm.test(\"Verify that the 'guest' auth-type was granted.\", function () {",
									"    pm.expect(parsedResponse['auth_type']).to.be.equal('guest');",
									"});",
									"",
									"// Check if the response has an authorization header",
									"if (pm.response.to.have.header('Authorization')) {",
									"",
									"    // Parse the authorization token out of the header",
									"    var rawAuthToken = pm.response.headers.one('Authorization').toString();",
									"    var authTokenArray = rawAuthToken.split(' ');",
									"",
									"    // If an authorization header exists, then write it as the customer auth-token",
									"    postman.setEnvironmentVariable('sfccCustomerAuthToken', authTokenArray.pop());",
									"",
									"} "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-dw-client-id",
								"value": "{{sfccClientId}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"type\" : \"guest\"\n}"
						},
						"url": {
							"raw": "{{sfccShopUrl}}/customers/auth",
							"host": [
								"{{sfccShopUrl}}"
							],
							"path": [
								"customers",
								"auth"
							]
						},
						"description": "... retrives an authorization for a Salesforce B2C Commerce guest user."
					},
					"response": []
				},
				{
					"name": "00c. Retrieve Customer Authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "13913f71-ad24-473e-bf21-efd0b12325c8",
								"exec": [
									"// Parse the response data",
									"var parsedResponse = JSON.parse(responseBody);",
									"    ",
									"// Execute a test to validate that the access-token exists",
									"pm.test(\"StatusCode is 200.\", function () {",
									"    pm.expect(responseCode.code === 200).to.be.true;",
									"});",
									"",
									"// Execute a test to validate that we've received a response",
									"pm.test(\"Response is not empty.\", function () {",
									"    pm.expect(responseBody.length > 0).to.be.true;",
									"});",
									"",
									"// Execute a test to validate that the response provided is JSON",
									"pm.test(\"Response is JSON.\", function () {",
									"    pm.expect(parsedResponse !== null).to.be.true;",
									"});",
									"",
									"// Execute a test to validate that the response contains the properties expected.",
									"pm.test(\"Response is well-formed and contains the auth_type property.\", function () {",
									"    pm.expect(parsedResponse.hasOwnProperty('auth_type')).to.be.true;",
									"    pm.expect(parsedResponse.hasOwnProperty('customer_id')).to.be.true;",
									"});",
									"",
									"// Execute a test to validate that the auth-type granted is registered",
									"pm.test(\"Verify that the 'registered' auth-type was granted.\", function () {",
									"    pm.expect(parsedResponse['auth_type']).to.be.equal('registered');",
									"});",
									"",
									"// Check if the response has an authorization header",
									"if (pm.response.to.have.header('Authorization')) {",
									"",
									"    // Parse the authorization token out of the header",
									"    var rawAuthToken = pm.response.headers.one('Authorization').toString();",
									"    var authTokenArray = rawAuthToken.split(' ');",
									"",
									"    // If an authorization header exists, then write it as the customer auth-token",
									"    postman.setEnvironmentVariable('sfccCustomerAuthToken', authTokenArray.pop());",
									"",
									"    // Also write the customerId / customerNumber",
									"    postman.setEnvironmentVariable('sfccCustomerId', parsedResponse.customer_id);",
									"    postman.setEnvironmentVariable('sfccCustomerNo', parsedResponse.customer_no);",
									"",
									"",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{sfccCustomerPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{sfccCustomerUsername}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "x-dw-client-id",
								"value": "{{sfccClientId}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"type\" : \"credentials\"\n}"
						},
						"url": {
							"raw": "{{sfccShopUrl}}/customers/auth",
							"host": [
								"{{sfccShopUrl}}"
							],
							"path": [
								"customers",
								"auth"
							]
						},
						"description": "... retrieves an authorization for a registered Salesforce B2C Commerce storefront user.  Please ensure that the storefront customer's username and password are provided via the sfccCustomerUsername and sfccCustomerPassword environment variables.  The authorization request will use these values as part of the request."
					},
					"response": []
				},
				{
					"name": "00d. Create Customer Session",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f25e99dd-f1ca-4c51-a04e-35681f538642",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{sfccCustomerAuthToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "x-dw-client-id",
								"value": "{{sfccClientId}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{sfccShopUrl}}/sessions",
							"host": [
								"{{sfccShopUrl}}"
							],
							"path": [
								"sessions"
							]
						},
						"description": "... instantiates a new session for a given customer based on the type of authorization token provided (either guest or customer).  Prior to creating the session, please execute requests 00b. Retrieve Guest Authorization or 00c. Request Customer Authorization as these requests will seed the sfccCustomerAuthToken used to request the session."
					},
					"response": []
				},
				{
					"name": "00e. Retrieve Customer OOBO Authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "13913f71-ad24-473e-bf21-efd0b12325c8",
								"exec": [
									"// Parse the response data",
									"var parsedResponse = JSON.parse(responseBody);",
									"    ",
									"// Execute a test to validate that the access-token exists",
									"pm.test(\"StatusCode is 200.\", function () {",
									"    pm.expect(responseCode.code === 200).to.be.true;",
									"});",
									"",
									"// Execute a test to validate that we've received a response",
									"pm.test(\"Response is not empty.\", function () {",
									"    pm.expect(responseBody.length > 0).to.be.true;",
									"});",
									"",
									"// Execute a test to validate that the response provided is JSON",
									"pm.test(\"Response is JSON.\", function () {",
									"    pm.expect(parsedResponse !== null).to.be.true;",
									"});",
									"",
									"// Execute a test to validate that the response contains the properties expected.",
									"pm.test(\"Response is well-formed and contains the auth_type property.\", function () {",
									"    pm.expect(parsedResponse.hasOwnProperty('auth_type')).to.be.true;",
									"    pm.expect(parsedResponse.hasOwnProperty('customer_id')).to.be.true;",
									"});",
									"",
									"// Execute a test to validate that the auth-type granted is registered",
									"pm.test(\"Verify that the 'registered' auth-type was granted.\", function () {",
									"    pm.expect(parsedResponse['auth_type']).to.be.equal('registered');",
									"});",
									"",
									"// Check if the response has an authorization header",
									"if (pm.response.to.have.header('Authorization')) {",
									"",
									"    // Parse the authorization token out of the header",
									"    var rawAuthToken = pm.response.headers.one('Authorization').toString();",
									"    var authTokenArray = rawAuthToken.split(' ');",
									"",
									"    // If an authorization header exists, then write it as the customer auth-token",
									"    postman.setEnvironmentVariable('sfccCustomerAuthToken', authTokenArray.pop());",
									"",
									"    // Also write the customerId / customerNumber",
									"    postman.setEnvironmentVariable('sfccCustomerId', parsedResponse.customer_id);",
									"    postman.setEnvironmentVariable('sfccCustomerNo', parsedResponse.customer_no);",
									"",
									"",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{sfccAuthToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "x-dw-client-id",
								"value": "{{sfccClientId}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"type\" : \"credentials\"\n}"
						},
						"url": {
							"raw": "{{sfccShopUrl}}/customers/{{sfccCustomerId}}/auth",
							"host": [
								"{{sfccShopUrl}}"
							],
							"path": [
								"customers",
								"{{sfccCustomerId}}",
								"auth"
							]
						},
						"description": "... retrieves an authorization for a registered Salesforce B2C Commerce storefront user via in an OOBO scenario.  Please ensure that the sfccUserName and sfccPassword fields are specified in the environment variables -- and execute request '00a. Retrieve the Commerce Cloud AuthToken' to generate the authToken that is included in this request."
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer"
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "69d2890d-076f-4f1e-a8b2-478f863f5bb6",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "13759155-8224-4d4e-b482-bcf7a3b8a44c",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}